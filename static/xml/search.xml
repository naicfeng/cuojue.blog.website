<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo 更新后部分刷新 CloudFlare 缓存</title>
    <link href="/read/hexo-purge-cloudflare-cache.html"/>
    <url>/read/hexo-purge-cloudflare-cache.html</url>
    
    <content type="html"><![CDATA[<p>之的文章 <a href="/read/run-sh-after-vercel-deploy-complete.html">Vercel 部署完成后自动执行 Github Action</a> 讲了如何在 Vercel 部署完成后刷新缓存。</p><p>但它是整个域下面刷新，某些不需要刷新的部分也被无辜的刷掉了，需要重新回源</p><p>例如本站的头像缓存 <code>/avatar</code> 下面子域名的缓存，都被刷掉了</p><p>既然 Hexo 是静态生成的，那所有的路径都是编译过程中可获取的，说干就干</p><h3 id="如何获取路径"><a href="#如何获取路径" class="headerlink" title="如何获取路径"></a>如何获取路径</h3><p>一开始，我想的是写一个 Hexo 的插件，输出所有的 url 列表，转念一想，输出的 sitemap 不就是现成的 url 列表吗？</p><p>从 xml 提取所有的链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> reg =<br>  <span class="hljs-regexp">/(https):\/\/cuojue.org[-A-Za-z0-9+&amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;@#/%=~_|]/g</span>;<br><span class="hljs-keyword">let</span> url_array = datastr.<span class="hljs-title function_">match</span>(reg);<br></code></pre></td></tr></table></figure><p>提取的只有 文章 分类 归档 标签 的路径，因为我的静态资源都是托管在其他 CDN 上的，不需要处理<br>只有首页地址和搜索用的 search.xml 没有，所以要加入它们</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">url_array.<span class="hljs-title function_">push</span>(<br>  <span class="hljs-string">&quot;https://cuojue.org/static/xml/search.xml&quot;</span>,<br>  <span class="hljs-string">&quot;https://cuojue.org/&quot;</span><br>);<br></code></pre></td></tr></table></figure><h3 id="开始实现梦想"><a href="#开始实现梦想" class="headerlink" title="开始实现梦想"></a>开始实现梦想</h3><p>用 axios 构造一个 Post 函数调用 CloudFlare 的 API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Post</span>(<span class="hljs-params">s</span>) &#123;<br>  axios<br>    .<span class="hljs-title function_">post</span>(<br>      <span class="hljs-string">`https://api.cloudflare.com/client/v4/zones/<span class="hljs-subst">$&#123;process.env.CLOUDFLARE_ZONE&#125;</span>/purge_cache`</span>,<br>      &#123;<br>        <span class="hljs-attr">files</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(s),<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;process.env.CLOUDFLARE_TOKEN&#125;</span>`</span>,<br>          <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>        &#125;,<br>      &#125;<br>    )<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`statusCode: <span class="hljs-subst">$&#123;res.status&#125;</span> success: <span class="hljs-subst">$&#123;res.data.success&#125;</span> `</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>试了一下，出错了。原来是 CloudFlare 的 API 请求有限制，每次最多只能提交 30 个 URL</p><p>给 URL 分组，每组 30 个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> _url_array = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; url_array.<span class="hljs-property">length</span>; i += <span class="hljs-number">30</span>) &#123;<br>  _result.<span class="hljs-title function_">push</span>(url_array.<span class="hljs-title function_">slice</span>(i, i + <span class="hljs-number">30</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>试一下，提交成功，刷新成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Run node ./purgecache.js<br>statusCode: 200 success: <span class="hljs-literal">true</span><br>statusCode: 200 success: <span class="hljs-literal">true</span><br>statusCode: 200 success: <span class="hljs-literal">true</span><br>statusCode: 200 success: <span class="hljs-literal">true</span><br>statusCode: 200 success: <span class="hljs-literal">true</span><br>statusCode: 200 success: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="梦想实现啦"><a href="#梦想实现啦" class="headerlink" title="梦想实现啦"></a>梦想实现啦</h3><p>成品</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;axios&quot;</span>);<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&quot;./public/sitemap.xml&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, datastr</span>) &#123;<br>  <span class="hljs-keyword">const</span> reg =<br>    <span class="hljs-regexp">/(https):\/\/cuojue.org[-A-Za-z0-9+&amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;@#/%=~_|]/g</span>;<br>  <span class="hljs-keyword">let</span> url_array = datastr.<span class="hljs-title function_">match</span>(reg);<br>  url_array.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;https://cuojue.org/static/xml/search.xml&quot;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; url_array.<span class="hljs-property">length</span>; i += <span class="hljs-number">30</span>) &#123;<br>    <span class="hljs-comment">//console.log(url_array.slice(i, i + 30))</span><br>    <span class="hljs-title class_">Post</span>(url_array.<span class="hljs-title function_">slice</span>(i, i + <span class="hljs-number">30</span>));<br>  &#125;<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Post</span>(<span class="hljs-params">s</span>) &#123;<br>  axios<br>    .<span class="hljs-title function_">post</span>(<br>      <span class="hljs-string">`https://api.cloudflare.com/client/v4/zones/<span class="hljs-subst">$&#123;process.env.CLOUDFLARE_ZONE&#125;</span>/purge_cache`</span>,<br>      &#123;<br>        <span class="hljs-attr">files</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(s),<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;process.env.CLOUDFLARE_TOKEN&#125;</span>`</span>,<br>          <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>        &#125;,<br>      &#125;<br>    )<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`statusCode: <span class="hljs-subst">$&#123;res.status&#125;</span> success: <span class="hljs-subst">$&#123;res.data.success&#125;</span> `</span>);<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>后续，把 Github action 的编译顺序放到了 Vercel 后面，Vercel 编译成功后 Github action 再编译，然后再刷新 CDN</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>CloudFlare</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>兜兜转转还是回到 CloudFlare 的怀抱</title>
    <link href="/read/always-back-to-cloudflare.html"/>
    <url>/read/always-back-to-cloudflare.html</url>
    
    <content type="html"><![CDATA[<p>由于我国复杂的互联网环境，本博客无法部署在国内，但是国内也需要稳定的访问它。</p><p>鉴于此博主测试了</p><blockquote><p>Vercel 直连<br>Netlify 直连<br>Fly.io 直连<br>Oracle 首尔直连</p></blockquote><p>之后，还是回到了 CloudFlare + Vercel 的服务</p><span id="more"></span><p><del>绝不提静态资源白嫖大厂 CDN</del></p><p>当然都是建立在所有服务必须 Free 的前提下</p><hr><h3 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h3><h4 id="为什么没有选择独立部署"><a href="#为什么没有选择独立部署" class="headerlink" title="为什么没有选择独立部署"></a>为什么没有选择独立部署</h4><p>博主是有多余的空闲 Oracle 首尔服务器的，为什么没有在它上面部署博客呢，其实也不是没有尝试。</p><p>主要是自己部署 Hexo 更新不如 SaaS 方便，现在直接提交到 github 各大平台就会编译，CDN 会自动清理旧资源</p><p>自己部署需要自己维护软件环境，服务器环境等等，对于一个没有多大流量的个人博客来说有些浪费了</p><h4 id="为什么选择-Vercel"><a href="#为什么选择-Vercel" class="headerlink" title="为什么选择 Vercel"></a>为什么选择 Vercel</h4><p>Vercel 的函数服务(Functions)可以选择运行的区域。现在它运行在 AWS 波特兰区域上，数据库也运行在 AWS 相同的区域，保证了低延迟。</p><p>Netlify 的函数服务(Functions)不支持选择运行的区域，只能运行在美东，延迟较大。</p><p>Fly.io 可以选亚洲区部署，但是(控制服务&#x2F;CLI&#x2F;网页面板)不能很好的直连，丢包严重，放在 Github Action 才能部署，不然有时候卡住很久。</p><h4 id="为什么要配合-CloudFlare"><a href="#为什么要配合-CloudFlare" class="headerlink" title="为什么要配合 CloudFlare"></a>为什么要配合 CloudFlare</h4><p>虽然 Vercel 已经提供了 AGA 全球 CDN ，但是从去年(被墙)开始，已经是重点关注对象，时不时来个阻断，或者过长的 Stalled 时间</p><p>CloudFlare 的 Ping 是最高的，但是它能稳定的访问。他也提供了很多个性化的定制，缓存规则 页面规则等等都是免费的，自动缓解攻击，流量也是无限的。</p><p>其他的服务，看起来 Ping 很低，但是他们都有一个问题，随机丢包，路由不稳，上午 Ping 40 下午可能 Ping 300 了</p><p>还会被时不时卡下脖子，具体表现为随机 Stalled 时间很长</p><hr><p>总的来说可能就是没有 CloudFlare 省心吧</p><p>各位还在折腾的站长，如果想要稳定，还是趁早换上 CloudFlare 算啦</p><hr><p>各路大神们都介绍了部署在国外的博客如何提高在国内访问速度</p><p><a href="https://www.v2ex.com/t/739279">优化托管在国外博客的国内访问速度</a><br><a href="https://www.bmpi.dev/dev/guide-to-setup-blog-site-with-zero-cost/5/">零成本搭建现代博客之优化国内访问速度</a><br><a href="https://blog.skk.moe/post/deploy-blog-to-cf-workers-site/">将 Hexo 部署到 Cloudflare Workers Site 上的趟坑记录</a><br><a href="https://www.tangruiping.com/post/github-coding-ci-cd-hexo-cdn.html">自动部署 Hexo，多 CDN 线路为网站加速思想</a></p><p>无一例外，<strong>他们自身</strong>，都是采用的 CloudFlare</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CloudFlare</tag>
      
      <tag>Network</tag>
      
      <tag>Blog</tag>
      
      <tag>SaaS</tag>
      
      <tag>Free</tag>
      
      <tag>CDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Snap Docker 配置 IPV6 和修复遗留错误</title>
    <link href="/read/snap-docker-daemon-config.html"/>
    <url>/read/snap-docker-daemon-config.html</url>
    
    <content type="html"><![CDATA[<p>原因是服务器上有个 Docker 服务需要用 IPV6 访问某 API<br>该 API 是双栈的，但是 IPV4 不通，不得已只能用 V6 来访问</p><p>使用 Ubuntu 的 apt 安装的 Docker 默认用的 snap 镜像，配置文件位置和其他方式安装的不同，导致识别不到配置文件</p><p>一开始我发现并不存在<code>/etc/docker/daemon.json</code>文件<br>便创建了一个新的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> &gt;/etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;ipv6&quot;: true,</span><br><span class="hljs-string">    &quot;fixed-cidr-v6&quot;: &quot;fd00::/80&quot;,</span><br><span class="hljs-string">    &quot;experimental&quot;: true,</span><br><span class="hljs-string">    &quot;ip6tables&quot;: true</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>然后使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p>准备重启，发现没有找到 docker 服务？？？</p><p>运行一下<code>list</code>发现 snap 的 docker 用的是<code>snap.docker.dockerd</code>作为服务名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl restart snap.docker.dockerd<br></code></pre></td></tr></table></figure><p>重启 Docker 后，没有任何变化，还是没有分配 IPV6 的地址，也还是没办法访问 IPV6 网络</p><p>Google 了半天发现全都是相同的内容，直到发现了<a href="https://github.com/docker-archive/docker-snap/issues/22">How to config the daemon settings?</a></p><p>原来 snap 的 docker 配置文件路径不同，不过这篇文章写的路径也不对</p><p>不是</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">/var/snap/docker/current/etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>实际应该是</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">/var/snap/docker/current/config/daemon.json<br></code></pre></td></tr></table></figure><p>修改了<code>daemon.json</code>后，可以正确获取到 IPV6 也可以正常从内到外访问 IPV6 的资源了</p><hr><p>然后是最近运行 <code>docker-compose</code> 提示一直错误，版本过低</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">/snap/docker/2281/lib/python3.6/site-packages/paramiko/transport.py:33:<br>CryptographyDeprecationWarning:<br>Python 3.6 is no longer supported by the Python core team.<br>Therefore, support <span class="hljs-keyword">for</span> it is deprecated <span class="hljs-keyword">in</span> cryptography and will be removed <span class="hljs-keyword">in</span> a future release.<br>  from cryptography.hazmat.backends import default_backend<br></code></pre></td></tr></table></figure><p>原来是 <code>docker-compose</code> 已经过时了，新版的命令是 <code>docker compose</code> (去掉了横线)<br>要是用习惯了可以给它创建一个别名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">alias</span> docker-compose=<span class="hljs-string">&#x27;docker compose&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Snap</tag>
      
      <tag>IPV6</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vercel 部署完成后自动执行 Github Action</title>
    <link href="/read/run-sh-after-vercel-deploy-complete.html"/>
    <url>/read/run-sh-after-vercel-deploy-complete.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>找遍了 Vercel 的文档，没有找到部署完成后的 WebHook&#x2F;回调，最后发现可以利用 Vercel 和 GitHub 的集成实现这个功能</p></blockquote><p>原理是 Vercel 编译会集成到 GitHub 的库，部署过程有个回调 <code>deployment_status</code> 来通知 GitHub 上显示成功或失败</p><p>我需要这个功能是因为我在 Vercel 前用了 CloudFlare 来缓存，部署成功后，需要调用 API 来清除缓存</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.56/blog/static/files/2022/10/run-sh-after-vercel-deploy-complete-1.png"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.56/blog/static/files/2022/10/run-sh-after-vercel-deploy-complete-2.png"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.56/blog/static/files/2022/10/run-sh-after-vercel-deploy-complete-3.png"></p><p>最后贴上清除 Cache 的 Github Action</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Purge</span> <span class="hljs-string">Cloudflare</span> <span class="hljs-string">Cache</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">deployment_status:</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">run:</span><br>    <span class="hljs-attr">if:</span> <span class="hljs-string">github.event_name</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;deployment_status&#x27;</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">github.event.deployment_status.state</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;success&#x27;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Clear</span> <span class="hljs-string">Cloudflare</span> <span class="hljs-string">cache</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">Cyb3r-Jak3/action-cloudflare-cache@v1.1.0</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">zone:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.CLOUDFLARE_ZONE</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">api_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.CLOUDFLARE_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vercel</tag>
      
      <tag>WebHook</tag>
      
      <tag>Github</tag>
      
      <tag>Github Action</tag>
      
      <tag>deployment_status</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Vercel 加速 Gravatar 和 G Analytics</title>
    <link href="/read/deploy-gravatar-ga-in-vercel.html"/>
    <url>/read/deploy-gravatar-ga-in-vercel.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://vercel.com/docs/concepts/functions/edge-functions">Vercel Edge Functions</a> 类似于 Cloudflare Workers，可以在边缘节点运行 js 程序，目前 Edge Functions 没有限制调用次数</p><h3 id="Google-Analytics-加速"><a href="#Google-Analytics-加速" class="headerlink" title="Google Analytics 加速"></a>Google Analytics 加速</h3><blockquote><p>我一直以来都在使用 Google Analytics 统计自己的博客和几个网站访问情况。但是一个 gzip 以后都还有 45KB 大小的 analytics.js、Cache-Control 还只有 7200 秒；Google 国内的数据中心会被抽风不说，<a href="http://www.google-analytics.com/">www.google-analytics.com</a> 域名早就上了各个广告屏蔽软件的黑名单。</p></blockquote><p>采用博主 <a href="https://blog.skk.moe/post/cloudflare-workers-cfga/">Sukka</a> 的 Cloudflare Workers 版本改造而成，前端使用方法见：<a href="https://github.com/SukkaW/cloudflare-workers-async-google-analytics">原项目 GitHub</a></p><h4 id="analytics-js"><a href="#analytics-js" class="headerlink" title="analytics.js"></a>analytics.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">AllowedReferrer</span> = [<span class="hljs-string">&quot;cuojue.org&quot;</span>]; <span class="hljs-comment">// multiple domains is supported in array format</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> config = &#123;<br>  <span class="hljs-attr">runtime</span>: <span class="hljs-string">&quot;experimental-edge&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">req</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">response</span>(req);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">senData</span>(<span class="hljs-params">request, url, uuid, user_agent</span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">encode</span> = (<span class="hljs-params">data</span>) =&gt; <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-built_in">decodeURIComponent</span>(data));<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getReqHeader</span> = (<span class="hljs-params">key</span>) =&gt; request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(key);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getQueryString</span> = (<span class="hljs-params">name</span>) =&gt; url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(name);<br><br>  <span class="hljs-keyword">const</span> reqParameter = &#123;<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-title class_">Host</span>: <span class="hljs-string">&quot;www.google-analytics.com&quot;</span>,<br>      <span class="hljs-string">&quot;User-Agent&quot;</span>: user_agent,<br>      <span class="hljs-title class_">Accept</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Accept&quot;</span>),<br>      <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Accept-Language&quot;</span>),<br>      <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Accept-Encoding&quot;</span>),<br>      <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;max-age=0&quot;</span>,<br>    &#125;,<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> pvData = <span class="hljs-string">`tid=<span class="hljs-subst">$&#123;encode(getQueryString(<span class="hljs-string">&quot;ga&quot;</span>))&#125;</span>&amp;cid=<span class="hljs-subst">$&#123;uuid&#125;</span>&amp;dl=<span class="hljs-subst">$&#123;encode(</span></span><br><span class="hljs-subst"><span class="hljs-string">    getQueryString(<span class="hljs-string">&quot;dl&quot;</span>)</span></span><br><span class="hljs-subst"><span class="hljs-string">  )&#125;</span>&amp;uip=<span class="hljs-subst">$&#123;getReqHeader(<span class="hljs-string">&quot;CF-Connecting-IP&quot;</span>)&#125;</span>&amp;ua=<span class="hljs-subst">$&#123;user_agent&#125;</span>&amp;dt=<span class="hljs-subst">$&#123;encode(</span></span><br><span class="hljs-subst"><span class="hljs-string">    getQueryString(<span class="hljs-string">&quot;dt&quot;</span>)</span></span><br><span class="hljs-subst"><span class="hljs-string">  )&#125;</span>&amp;de=<span class="hljs-subst">$&#123;encode(getQueryString(<span class="hljs-string">&quot;de&quot;</span>))&#125;</span>&amp;dr=<span class="hljs-subst">$&#123;encode(</span></span><br><span class="hljs-subst"><span class="hljs-string">    getQueryString(<span class="hljs-string">&quot;dr&quot;</span>)</span></span><br><span class="hljs-subst"><span class="hljs-string">  )&#125;</span>&amp;ul=<span class="hljs-subst">$&#123;getQueryString(<span class="hljs-string">&quot;ul&quot;</span>)&#125;</span>&amp;sd=<span class="hljs-subst">$&#123;getQueryString(<span class="hljs-string">&quot;sd&quot;</span>)&#125;</span>&amp;sr=<span class="hljs-subst">$&#123;getQueryString(</span></span><br><span class="hljs-subst"><span class="hljs-string">    <span class="hljs-string">&quot;sr&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">  )&#125;</span>&amp;vp=<span class="hljs-subst">$&#123;getQueryString(<span class="hljs-string">&quot;vp&quot;</span>)&#125;</span>`</span>;<br><br>  <span class="hljs-keyword">const</span> perfData = <span class="hljs-string">`plt=<span class="hljs-subst">$&#123;getQueryString(<span class="hljs-string">&quot;plt&quot;</span>)&#125;</span>&amp;dns=<span class="hljs-subst">$&#123;getQueryString(</span></span><br><span class="hljs-subst"><span class="hljs-string">    <span class="hljs-string">&quot;dns&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">  )&#125;</span>&amp;pdt=<span class="hljs-subst">$&#123;getQueryString(<span class="hljs-string">&quot;pdt&quot;</span>)&#125;</span>&amp;rrt=<span class="hljs-subst">$&#123;getQueryString(</span></span><br><span class="hljs-subst"><span class="hljs-string">    <span class="hljs-string">&quot;rrt&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">  )&#125;</span>&amp;tcp=<span class="hljs-subst">$&#123;getQueryString(<span class="hljs-string">&quot;tcp&quot;</span>)&#125;</span>&amp;srt=<span class="hljs-subst">$&#123;getQueryString(</span></span><br><span class="hljs-subst"><span class="hljs-string">    <span class="hljs-string">&quot;srt&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">  )&#125;</span>&amp;dit=<span class="hljs-subst">$&#123;getQueryString(<span class="hljs-string">&quot;dit&quot;</span>)&#125;</span>&amp;clt=<span class="hljs-subst">$&#123;getQueryString(<span class="hljs-string">&quot;clt&quot;</span>)&#125;</span>`</span>;<br><br>  <span class="hljs-keyword">const</span> pvUrl = <span class="hljs-string">`https://www.google-analytics.com/collect?v=1&amp;t=pageview&amp;<span class="hljs-subst">$&#123;pvData&#125;</span>&amp;z=<span class="hljs-subst">$&#123;getQueryString(</span></span><br><span class="hljs-subst"><span class="hljs-string">    <span class="hljs-string">&quot;z&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">  )&#125;</span>`</span>;<br>  <span class="hljs-keyword">const</span> perfUrl = <span class="hljs-string">`https://www.google-analytics.com/collect?v=1&amp;t=timing&amp;<span class="hljs-subst">$&#123;pvData&#125;</span>&amp;<span class="hljs-subst">$&#123;perfData&#125;</span>&amp;z=<span class="hljs-subst">$&#123;getQueryString(</span></span><br><span class="hljs-subst"><span class="hljs-string">    <span class="hljs-string">&quot;z&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">  )&#125;</span>`</span>;<br><br>  <span class="hljs-keyword">const</span> response1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(pvUrl, reqParameter);<br>  <span class="hljs-keyword">const</span> response2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(perfUrl, reqParameter);<br>  <span class="hljs-comment">// To sent data to google analytics after response id finished</span><br>  <span class="hljs-keyword">await</span> response1.<span class="hljs-title function_">waitUntil</span>();<br>  <span class="hljs-keyword">await</span> response2.<span class="hljs-title function_">waitUntil</span>();<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">response</span>(<span class="hljs-params">request</span>) &#123;<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(request.<span class="hljs-property">url</span>);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getReqHeader</span> = (<span class="hljs-params">key</span>) =&gt; request.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(key);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Referer</span> = <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;Referer&quot;</span>);<br>  <span class="hljs-keyword">const</span> user_agent = <span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;User-Agent&quot;</span>);<br>  <span class="hljs-keyword">const</span> ref_host = (<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-title class_">Referer</span>).<span class="hljs-property">hostname</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  &#125;)();<br><br>  <span class="hljs-keyword">let</span> needBlock = <span class="hljs-literal">false</span>;<br><br>  needBlock =<br>    !ref_host ||<br>    ref_host === <span class="hljs-string">&quot;&quot;</span> ||<br>    !user_agent ||<br>    !url.<span class="hljs-property">search</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;ga=UA-&quot;</span>)<br>      ? <span class="hljs-literal">true</span><br>      : <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">if</span> (<br>    <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">AllowedReferrer</span> !== <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp;<br>    <span class="hljs-title class_">AllowedReferrer</span> !== <span class="hljs-literal">null</span> &amp;&amp;<br>    <span class="hljs-title class_">AllowedReferrer</span><br>  ) &#123;<br>    <span class="hljs-keyword">let</span> _AllowedReferrer = <span class="hljs-title class_">AllowedReferrer</span>;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(<span class="hljs-title class_">AllowedReferrer</span>)) _AllowedReferrer = [_AllowedReferrer];<br><br>    <span class="hljs-keyword">const</span> rAllowedReferrer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(_AllowedReferrer.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;|&quot;</span>), <span class="hljs-string">&quot;g&quot;</span>);<br><br>    needBlock = !rAllowedReferrer.<span class="hljs-title function_">test</span>(ref_host) ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_AllowedReferrer, rAllowedReferrer, ref_host);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (needBlock) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-string">&quot;403 Forbidden&quot;</span>, &#123;<br>      <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span> &#125;,<br>      <span class="hljs-attr">status</span>: <span class="hljs-number">403</span>,<br>      <span class="hljs-attr">statusText</span>: <span class="hljs-string">&quot;Forbidden&quot;</span>,<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getCookie</span> = (<span class="hljs-params">name</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> pattern = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(^| )&quot;</span> + name + <span class="hljs-string">&quot;=([^;]*)(;|$)&quot;</span>);<br>    <span class="hljs-keyword">const</span> r = (<span class="hljs-title function_">getReqHeader</span>(<span class="hljs-string">&quot;cookie&quot;</span>) || <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">match</span>(pattern);<br>    <span class="hljs-keyword">return</span> r !== <span class="hljs-literal">null</span> ? <span class="hljs-built_in">unescape</span>(r[<span class="hljs-number">2</span>]) : <span class="hljs-literal">null</span>;<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">createUuid</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> s = [];<br>    <span class="hljs-keyword">const</span> hexDigits = <span class="hljs-string">&quot;0123456789abcdef&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">36</span>; i++) &#123;<br>      s[i] = hexDigits.<span class="hljs-title function_">substr</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">0x10</span>), <span class="hljs-number">1</span>);<br>    &#125;<br>    s[<span class="hljs-number">14</span>] = <span class="hljs-string">&quot;4&quot;</span>; <span class="hljs-comment">// bits 12-15 of the time_hi_and_version field to 0010</span><br>    s[<span class="hljs-number">19</span>] = hexDigits.<span class="hljs-title function_">substr</span>((s[<span class="hljs-number">19</span>] &amp; <span class="hljs-number">0x3</span>) | <span class="hljs-number">0x8</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// bits 6-7 of the clock_seq_hi_and_reserved to 01</span><br>    s[<span class="hljs-number">8</span>] = s[<span class="hljs-number">13</span>] = s[<span class="hljs-number">18</span>] = s[<span class="hljs-number">23</span>] = <span class="hljs-string">&quot;-&quot;</span>;<br><br>    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">const</span> _uuid = <span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&quot;uuid&quot;</span>);<br>  <span class="hljs-keyword">const</span> uuid = _uuid ? _uuid : <span class="hljs-title function_">createUuid</span>();<br><br>  <span class="hljs-title function_">senData</span>(request, url, uuid, user_agent, <span class="hljs-title class_">Referer</span>);<br><br>  <span class="hljs-comment">// Return an 204 to speed up: No need to download a gif</span><br>  <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(<span class="hljs-literal">null</span>, &#123;<br>    <span class="hljs-attr">status</span>: <span class="hljs-number">204</span>,<br>    <span class="hljs-attr">statusText</span>: <span class="hljs-string">&quot;No Content&quot;</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">if</span> (!_uuid)<br>    response.<span class="hljs-property">headers</span>.<span class="hljs-title function_">set</span>(<br>      <span class="hljs-string">&quot;Set-Cookie&quot;</span>,<br>      <span class="hljs-string">`uuid=<span class="hljs-subst">$&#123;uuid&#125;</span>; Expires=<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(</span></span><br><span class="hljs-subst"><span class="hljs-string">        <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() + <span class="hljs-number">365</span> * <span class="hljs-number">86400</span> * <span class="hljs-number">30</span> * <span class="hljs-number">1000</span></span></span><br><span class="hljs-subst"><span class="hljs-string">      ).toGMTString()&#125;</span>; Path=&#x27;/&#x27;; SameSite=None; Secure`</span><br>    );<br><br>  <span class="hljs-keyword">return</span> response;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Gravatar-加速"><a href="#Gravatar-加速" class="headerlink" title="Gravatar 加速"></a>Gravatar 加速</h3><p>由于众所周知的原因，Gravatar 在国内访问速度不佳，并且经常被阻断。<br>加上昨天国内知名的 Gravatar 代理 Cravatar.cn 也宕机了，大量博客头像显示 502 错误，所以还是做一个后备</p><blockquote><p>原始代码来自知名的 Cloudflare Workers 反代项目，避免被墙，暂无链接指向</p></blockquote><h4 id="gravatar-js"><a href="#gravatar-js" class="headerlink" title="gravatar.js"></a>gravatar.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> config = &#123;<br>  <span class="hljs-attr">runtime</span>: <span class="hljs-string">&quot;experimental-edge&quot;</span>,<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">req</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetchAndApply</span>(req);<br>&#125;<br><br><span class="hljs-keyword">const</span> upstream = <span class="hljs-string">&quot;www.gravatar.com&quot;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchAndApply</span>(<span class="hljs-params">request</span>) &#123;<br>  <span class="hljs-keyword">let</span> response = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(request.<span class="hljs-property">url</span>);<br><br>  url.<span class="hljs-property">host</span> = upstream;<br>  <span class="hljs-keyword">let</span> method = request.<span class="hljs-property">method</span>;<br>  <span class="hljs-keyword">let</span> request_headers = request.<span class="hljs-property">headers</span>;<br>  <span class="hljs-keyword">let</span> new_request_headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(request_headers);<br>  new_request_headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;Host&quot;</span>, upstream);<br>  new_request_headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;Referer&quot;</span>, url.<span class="hljs-property">href</span>);<br>  <span class="hljs-keyword">let</span> original_response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url.<span class="hljs-property">href</span>, &#123;<br>    <span class="hljs-attr">method</span>: method,<br>    <span class="hljs-attr">headers</span>: new_request_headers,<br>  &#125;);<br><br>  <span class="hljs-keyword">let</span> original_response_clone = original_response.<span class="hljs-title function_">clone</span>();<br>  <span class="hljs-keyword">let</span> original_text = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">let</span> response_headers = original_response.<span class="hljs-property">headers</span>;<br>  <span class="hljs-keyword">let</span> new_response_headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(response_headers);<br>  <span class="hljs-keyword">let</span> status = original_response.<span class="hljs-property">status</span>;<br><br>  new_response_headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;access-control-allow-origin&quot;</span>, <span class="hljs-string">&quot;https://cuojue.org&quot;</span>);<br>  new_response_headers.<span class="hljs-title function_">set</span>(<br>    <span class="hljs-string">&quot;Cache-Control&quot;</span>,<br>    <span class="hljs-string">&quot;max-age=600, s-maxage=2592000, stale-while-revalidate&quot;</span><br>  );<br>  new_response_headers.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;link&quot;</span>);<br><br>  original_text = original_response_clone.<span class="hljs-property">body</span>;<br><br>  response = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(original_text, &#123;<br>    status,<br>    <span class="hljs-attr">headers</span>: new_response_headers,<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> response;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Vercel-上要怎么部署"><a href="#Vercel-上要怎么部署" class="headerlink" title="Vercel 上要怎么部署"></a>Vercel 上要怎么部署</h3><p>以上两个文件丢进项目的 <code>/api</code> 目录，会自动识别为 <code>Edge Functions</code></p><p>然后在项目的 <code>vercel.json</code> 配置一下重定向</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;rewrites&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/analytics&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;api/analytics&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/avatar/(.*)&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;api/gravatar&quot;</span> <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如果担心 Vercel 的免费 100G 流量用完，可以在前面再套一层 Cloudflare 作为缓存，这样就拥有了无限流量+无限调用次数的双层 Buff</p><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>如果用了 cloudflare ，最好关闭 Argo Tiered Cache 功能，不知道它默认在哪里的数据中心回源，但是在 Vercel 的 ATA 网络显示，回源节点在 澳大利亚 悉尼……</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vercel</tag>
      
      <tag>Google</tag>
      
      <tag>Gravatar</tag>
      
      <tag>Analytics</tag>
      
      <tag>Edge Functions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Fly.io 上部署 alist 网盘程序</title>
    <link href="/read/deploy-alist-in-flyio.html"/>
    <url>/read/deploy-alist-in-flyio.html</url>
    
    <content type="html"><![CDATA[<h3 id="为什么选择-Fly-io"><a href="#为什么选择-Fly-io" class="headerlink" title="为什么选择 Fly.io"></a>为什么选择 Fly.io</h3><p>Fly.io 是一个基于容器的部署平台，致力于在全球各个区域提供贴近最终用户的部署环境。</p><p>跟传统的基于 VM 的云服务相比，基于容器的的部署平台不需要管理底层操作系统，能确保应用在开发和生产环境运行在同一环境，并且可以轻松缩放。</p><p>跟其他容器部署平台相比（例如 Heroku），Fly.io 提供了更多的部署区域（例如中国香港），提供数据持久层（Volume），自带虚拟私有网络（Heroku 企业版内容），更慷慨的免费政策，可以说是在很多层面是一个更好的 Heroku。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>Fly.io 自身的文档已经提供了 <a href="https://fly.io/docs/languages-and-frameworks/dockerfile/">Docker 应用部署流程</a></p><blockquote><p>本次部署是采用数据持久层来存档 alist 的 sqlite3 数据库，虽然 Fly.io 原生提供了 PostgreSQL 但是那得多用一个 VM 指标，并且免费用户一旦创建了 PostgreSQL 就消耗掉了免费的 1G 空间。</p></blockquote><h4 id="首先安装-flyctl"><a href="#首先安装-flyctl" class="headerlink" title="首先安装 flyctl"></a>首先安装 flyctl</h4><p>Fly.io 的大多数操作需要使用命令行，所以先要安装命令行工具 flyctl。</p><p>安装方式可以参考官方文档：<a href="https://fly.io/docs/getting-started/installing-flyctl">安装 flyctl</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -L https://fly.io/install.sh | sh <span class="hljs-comment">#安装命令</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/home/username/.fly/bin <span class="hljs-comment">#添加到环境变量，一般安装程序会自动添加</span><br><span class="hljs-built_in">source</span> <span class="hljs-variable">$HOME</span>/.profile <span class="hljs-comment">#刷新环境变量</span><br></code></pre></td></tr></table></figure><h4 id="注册-fly-io"><a href="#注册-fly-io" class="headerlink" title="注册 fly.io"></a>注册 fly.io</h4><p>在 Fly.io 创建应用之前先要注册，如果之前没有注册可以通过命令行执行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flyctl auth signup</span><br></code></pre></td></tr></table></figure><p>它会打开浏览器进入注册流程，注册完毕后会自己跳回到命令行通过验证。</p><p><del>要注意的是为了避免免费资源被滥用，fly.io 要求注册之后填写信用卡完成验证。当然，这样也便于转化付费用户。</del><br>今天(2022-10-30)我注册并没有要求验证信用卡，不知道是不是已经取消了这个要求。</p><p>如果之前已经注册过了，可以直接登录：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flyctl auth login</span><br></code></pre></td></tr></table></figure><p>注册完成后，我们就可以正式开始部署应用。</p><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/alist-org/alist-render<br><span class="hljs-built_in">cd</span> alist-render<br>flyctl launch<br></code></pre></td></tr></table></figure><p>执行创建用户命令后，会问几个问题，名称啊，区域啊</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">Creating app <span class="hljs-keyword">in</span> /path/to/project<br>Scanning <span class="hljs-built_in">source</span> code<br>Detected a Dockerfile app<br>? App Name (leave blank to use an auto-generated name):<br>? Select organization: Name (personal)<br>? Select region: hkg (Hong Kong)<br>Created app app-slug <span class="hljs-keyword">in</span> organization personal<br>Wrote config file fly.toml<br>? Would you like to deploy now? No<br></code></pre></td></tr></table></figure><p>其中 <code>App Name</code> 需要是全局唯一的，而且之后不能更改，同时会作为 <code>app</code> 的子域名。如果只是尝试一下，也可以直接回车自动生成。其他选项按照需要选择即可。最后一步问是否现在部署，选择 <code>No</code>，因为在启动前还需要修改配置，设置环境变量，挂载目录等。</p><p>修改配置文件，端口为<code>5244</code></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[[services]]</span><br>  <span class="hljs-attr">http_checks</span> = []<br>  <span class="hljs-attr">internal_port</span> = <span class="hljs-number">5244</span><br></code></pre></td></tr></table></figure><p>创建一个 <code>1G</code> 的持久存储空间(最小单位 1)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">flyctl volumes create data --size 1 --app APP_NAME<br></code></pre></td></tr></table></figure><p>然后在 fly.toml 内添加以下内容：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[mounts]</span><br>  <span class="hljs-attr">destination</span> = <span class="hljs-string">&quot;/opt/alist/data&quot;</span><br>  <span class="hljs-attr">source</span> = <span class="hljs-string">&quot;data&quot;</span><br></code></pre></td></tr></table></figure><h4 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h4><p>准备工作已经完成，现在可以部署 alist 应用，输入以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">flyctl deploy --remote-only<br></code></pre></td></tr></table></figure><p>如果部署顺利，之后就可以用以下命令打开应用：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">flyctl open<br></code></pre></td></tr></table></figure><p>你也可以直接在浏览器打开 <code>https://APP_NAME.fly.dev</code></p><p>如果部署不顺利，一般都是网络问题，需要科学上网<br>或者<a href="https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/">使用 Github Action 来部署</a></p><h4 id="查看密码"><a href="#查看密码" class="headerlink" title="查看密码"></a>查看密码</h4><p>部署的时候，日志会显示密码，如果没有保存，可以在后台日志里面看<br><a href="https://fly.io/apps/APP_NAME/monitoring">https://fly.io/apps/APP_NAME/monitoring</a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">flyctl ssh <span class="hljs-built_in">console</span> -a APP_NAME<br></code></pre></td></tr></table></figure><h3 id="查看成品"><a href="#查看成品" class="headerlink" title="查看成品"></a>查看成品</h3><p>本站例 <a href="https://disk.fly.dev/">https://disk.fly.dev</a></p><hr><p>参考：<a href="https://geeknote.net/Rei/posts/387">https://geeknote.net/Rei/posts/387</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>PaaS</tag>
      
      <tag>alist</tag>
      
      <tag>Fly.io</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 禁用 AES CBC 系列弱密码</title>
    <link href="/read/nginx-disable-cbc-ciphers.html"/>
    <url>/read/nginx-disable-cbc-ciphers.html</url>
    
    <content type="html"><![CDATA[<p>由于我的 ciphers 用的简化写法 <code>EECDH+AES128</code> 包含了所有的 AES 算法，如果单独写 GCM CCM CCM-8 得写好长一条。<br>所以我尝试了一下禁用，像 <code>!RC4!MD5</code> 这种，写了 <code>!AES-CBC</code> 之类的，并没有卵效果……</p><p>搜索中发现了 <a href="https://www.bauer-power.net/2019/12/how-to-disable-weak-cbc-ssl-ciphers-in.html">bauer-power</a> 和 <a href="https://security.stackexchange.com/questions/166484/how-to-disable-cbc-mode-ciphers">Stack Exchange</a> 的内容<br>其中写道可以禁用 <code>!SHA1:!SHA256:!SHA384</code> 来曲线救国达到禁用 CBC 的效果</p><blockquote><p>You can use !SHA1:!SHA256:!SHA384 to disable all CBC mode ciphers. There are some non-CBC false positives that will also be disabled (RC4, NULL), but you probably also want to disable them anyway.</p></blockquote><blockquote><p>Note that while GCM and CHACHA20 ciphers have SHA* in their name, they’re not disabled because they use their own MAC algorithm. The SHA* in their name is for <a href="https://crypto.stackexchange.com/questions/26410/whats-the-gcm-sha-256-of-a-tls-protocol/26434#26434">the PRF, not the MAC</a></p></blockquote><p>简单翻译一下就是 AES-GCM 和 CHACHA20 之类的加密，自身已经可以验证消息完整性，不需要额外的 SHA 来计算。</p><p>所以禁用 SHA 后，CBC 自然无法使用</p><p>顺便把 <code>RSA+AES</code> 也禁用了，仅允许 ECDHE_RSA 了。</p><p>现在我用的 ciphers 是</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssl_ciphers</span> <span class="hljs-string">&quot;TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:EECDH+AES256:!MD5:!SHA1:!SHA256:!SHA384&quot;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>友情提示，本算法仅支持较新的设备。IOS 9+ Android 4.4+ Chrome 49+ Firefox 31+</p></blockquote><p><a href="https://www.ssllabs.com/ssltest/">SSL Labs</a> 测试结果</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/04/nginx-disable-cbc-ciphers-3.png" alt="禁用前"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/04/nginx-disable-cbc-ciphers-4.png" alt="禁用后"></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>ssl</tag>
      
      <tag>ciphers</tag>
      
      <tag>aes-cbc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 acme.sh 申请 Google 的免费 SSL 证书</title>
    <link href="/read/google-gts-free-ssl.html"/>
    <url>/read/google-gts-free-ssl.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>上个月 30 日，Google Cloud 在其博客发表文章 <a href="https://cloud.google.com/blog/products/identity-security/automate-public-certificate-lifecycle-management-via--acme-client-api">Automate Public Certificates Lifecycle Management via RFC 8555 (ACME)</a> 发布了测试版的自动化公共 CA 管理程序。<br>简而言之就是 Google 也开放了类似于 Let’s Encrypt 的免费证书申请。并且和 Google 各项服务使用相同的根证书。</p></blockquote><h3 id="优劣分析"><a href="#优劣分析" class="headerlink" title="优劣分析"></a>优劣分析</h3><ol><li>可以设置颁发证书的有效期；（最长 90 天，最短 1 天）</li><li>支持多域名及通配符；（与 Let’s Encrypt 相同）</li><li>仅支持 DNS 验证和文件验证，不支持邮件验证；（与 Let’s Encrypt 相同）</li><li>支持 IP 地址，但是仅允许该 IP 地址块的所有者进行验证；（Let’s Encrypt 暂不支持）</li><li>不支持 IDN (International Domain Name, 国际化域名，使用 Punycode 进行编码，形如 xn–1.xn–2).（Let’s Encrypt 已经支持）</li><li>目前签发的证书，即使选择 ECC 类型，证书链的中级证书也是 RSA 的（Let’s Encrypt 已经支持全链 ECC）</li><li>ocsp.pki.goog 有国内节点，访客体验还是很不错的。</li><li>目前有 DNSSEC CAA 问题，在 DNSPod 添加了 DNSSEC 的用户请暂缓申请</li></ol><h3 id="申请准备"><a href="#申请准备" class="headerlink" title="申请准备"></a>申请准备</h3><p>需要准备一个 <a href="https://cloud.google.com/">Google Cloud Platform</a> 的账号</p><p>然后去 <strong><a href="https://docs.google.com/forms/d/1Euhflb5CXpuLik8czElhyAloTZJZobar4086dmlPqXA">点击这里</a></strong> 填写表单申请</p><p>表单里有一项 Google Cloud Project ID，可以通过 <a href="https://console.cloud.google.com/apis/dashboard">https://console.cloud.google.com/apis/dashboard</a> 得到</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/04/google-gts-free-ssl-1.png" alt="Google Cloud Project ID"></p><h3 id="获取密钥"><a href="#获取密钥" class="headerlink" title="获取密钥"></a>获取密钥</h3><p>填写后大概半天内即可收到一封主题为 <strong>Welcome to Google Cloud Certificate Manager, Public CA</strong> 的邮件。</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/04/google-gts-free-ssl-2.png" alt="邮件内容"></p><p>等收到后进入到<br><a href="https://console.cloud.google.com/apis/library/publicca.googleapis.com?project=test-1823685">https://console.cloud.google.com/apis/library/publicca.googleapis.com?project=test-1823685</a><br>（test-1823685 为前文提到的 Project ID），单击“启用”，等他圈圈转完。</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/04/google-gts-free-ssl-3.png" alt="启用"></p><p>然后单击右上角的“激活 Cloud Shell”，打开 Google Cloud Shell</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/04/google-gts-free-ssl-4.png" alt="Google Cloud Shell"></p><p>键入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcloud beta publicca external-account-keys create<br></code></pre></td></tr></table></figure><p>（可能会弹出授权，授权选允许）</p><p>获取相关凭据，会返回如下一组密钥</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">Created an external account key<br>[b64MacKey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>keyId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]<br></code></pre></td></tr></table></figure><blockquote><p>EAB 密钥使用一次后自动失效；如果没有使用，7 天后也会自动失效。使用 EAB 密钥注册的 ACME 帐户没有过期时间（对证书续期没有影响）。</p></blockquote><h3 id="开始申请"><a href="#开始申请" class="headerlink" title="开始申请"></a>开始申请</h3><p>先更新 <code>acme.sh</code> 到最新版</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">acme.sh --upgrade<br></code></pre></td></tr></table></figure><p>然后运行 <code>acme.sh</code> 注册 ACME 账户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">acme.sh  --register-account  -m  report@cuojue.org --server google \<br>    --eab-kid xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \<br>    --eab-hmac-key xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br></code></pre></td></tr></table></figure><p>然后就直接用 <code>acme.sh</code> 签发证书，选择 Server 为 Google</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">acme.sh -f --server google --issue \<br>    -d cuojue.org \<br>    -w <span class="hljs-string">&quot;/home/wwwroot/cuojue.org&quot;</span> \<br>    --reloadcmd <span class="hljs-string">&quot;/etc/init.d/nginx reload&quot;</span><br></code></pre></td></tr></table></figure><p>想要 ECC 证书可以指定 key 类型</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">acme.sh -f --server google --issue \<br>    -d cuojue.org --keylength ec-256 \<br>    -w <span class="hljs-string">&quot;/home/wwwroot/cuojue.org&quot;</span> \<br>    --reloadcmd <span class="hljs-string">&quot;/etc/init.d/nginx reload&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/04/google-gts-free-ssl-5.png" alt="证书"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/04/google-gts-free-ssl-6.png" alt="证书"></p><p>参考：</p><ol><li><a href="https://hostloc.com/thread-993780-1-1.html">https://hostloc.com/thread-993780-1-1.html</a></li><li><a href="https://cloud.google.com/public-certificate-authority/docs/quickstart">https://cloud.google.com/public-certificate-authority/docs/quickstart</a> (无权限账号会显示 404 错误)</li><li><a href="https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA">https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssl</tag>
      
      <tag>Google</tag>
      
      <tag>GTS</tag>
      
      <tag>ACME</tag>
      
      <tag>acme.sh</tag>
      
      <tag>free ssl</tag>
      
      <tag>GTS SSL</tag>
      
      <tag>Certificates</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用QuicTLS编译支持QUIC/HTTP3的nginx</title>
    <link href="/read/nginx-quic-h3.html"/>
    <url>/read/nginx-quic-h3.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>之前介绍过用 <a href="/read/quic_http3.html">OpenLiteSpeed 来实现 QUIC 和 HTTP&#x2F;3 支持</a> 现在 nginx 官方也支持 QUIC 了，部署测试一下</p></blockquote><p>nginx 官方支持两种 SSL library <a href="https://github.com/google/boringssl">boringssl</a> 和 <a href="https://github.com/quictls/openssl">quictls</a> 都可以正常编译成功</p><h3 id="QuicTLS-是什么"><a href="#QuicTLS-是什么" class="headerlink" title="QuicTLS 是什么"></a>QuicTLS 是什么</h3><p>QuicTLS 是一个支持了 QUIC 的 openssl 分支。由 Akamai 和 Microsoft 开发。</p><p>上游同步 openssl ，对 openssl 的改动仅增加了 QUIC 支持。适合不想使用 boringssl 又想体验 QUIC 的人群。</p><p>它的 API 被微软的 <a href="https://github.com/microsoft/msquic">MsQuic</a> 和谷歌的 <a href="https://chromium.googlesource.com/chromium/src/+/master/net/quic/">Chromium QUIC</a> 使用。</p><h3 id="下载模块"><a href="#下载模块" class="headerlink" title="下载模块"></a>下载模块</h3><h4 id="下载部分依赖模块"><a href="#下载部分依赖模块" class="headerlink" title="下载部分依赖模块"></a>下载部分依赖模块</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">hg <span class="hljs-built_in">clone</span> -b quic https://hg.nginx.org/nginx-quic<br>git <span class="hljs-built_in">clone</span> https://github.com/quictls/openssl quictls<br>git <span class="hljs-built_in">clone</span> https://github.com/vision5/ngx_devel_kit<br>git <span class="hljs-built_in">clone</span> https://github.com/openresty/luajit2<br>git <span class="hljs-built_in">clone</span> https://github.com/google/ngx_brotli<br>git <span class="hljs-built_in">clone</span> https://github.com/openresty/headers-more-nginx-module<br>git <span class="hljs-built_in">clone</span> https://github.com/cloudflare/zlib<br>git <span class="hljs-built_in">clone</span> https://github.com/openresty/lua-nginx-module<br>git <span class="hljs-built_in">clone</span> https://github.com/openresty/lua-resty-core<br>git <span class="hljs-built_in">clone</span> https://github.com/openresty/lua-resty-lrucache<br>wget https://sourceforge.net/projects/pcre/files/pcre/8.45/pcre-8.45.tar.gz<br>tar zxvf pcre-8.45.tar.gz<br></code></pre></td></tr></table></figure><h4 id="预配置"><a href="#预配置" class="headerlink" title="预配置"></a>预配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> luajit2<br>make install PREFIX=/usr/local/luajit<br><span class="hljs-built_in">export</span> LUAJIT_LIB=/usr/local/luajit/lib<br><span class="hljs-built_in">export</span> LUAJIT_INC=/usr/local/luajit/include/luajit-2.1<br><span class="hljs-built_in">ln</span> -s /usr/local/luajit/lib/libluajit-5.1.so.2 /usr/lib64/libluajit-5.1.so.2<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> zlib<br>make -f Makefile.<span class="hljs-keyword">in</span> distclean<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ngx_brotli<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure><p>打上 <a href="https://github.com/kn007/patch/">kn007</a> 的补丁</p><p>Add HTTP2 HPACK Encoding Support.</p><p>Add Dynamic TLS Record Support.</p><p>Use the OpenSSL library instead of the Nginx original function.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd nginx-quic<br>curl https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kn007/</span>patch<span class="hljs-regexp">/master/</span>nginx.patch | patch -p1<br>curl https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kn007/</span>patch<span class="hljs-regexp">/master/u</span>se_openssl_md5_sha1.patch | patch -p1<br></code></pre></td></tr></table></figure><h3 id="编译测试"><a href="#编译测试" class="headerlink" title="编译测试"></a>编译测试</h3><h4 id="编译完整参数"><a href="#编译完整参数" class="headerlink" title="编译完整参数"></a>编译完整参数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">./auto/configure --user=www --group=www \<br>--prefix=/usr/local/nginx \<br>--with-http_stub_status_module \<br>--with-http_ssl_module \<br>--with-http_v2_module \<br>--with-http_v3_module \<br>--with-http_gzip_static_module \<br>--with-http_sub_module \<br>--with-stream \<br>--with-stream_ssl_module \<br>--with-stream_quic_module \<br>--add-module=../src/ngx_brotli \<br>--add-module=../src/headers-more-nginx-module \<br>--add-module=../src/ngx_devel_kit \<br>--add-module=../src/lua-nginx-module \<br>--with-zlib=../src/zlib \<br>--with-pcre=../src/pcre-8.45 \<br>--with-openssl=../src/quictls \<br>--with-openssl-opt=<span class="hljs-string">&#x27;zlib -march=native -ljemalloc -Wl,-flto&#x27;</span> \<br>--with-cc-opt=<span class="hljs-string">&#x27;-I../src/quictls/build/include&#x27;</span> \<br>--with-ld-opt=<span class="hljs-string">&#x27;-ljemalloc -L../src/quictls/build/lib&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="配置文件内添加"><a href="#配置文件内添加" class="headerlink" title="配置文件内添加"></a>配置文件内添加</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> http3 reuseport;<br><span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> http3 reuseport;<br>...<br><span class="hljs-attribute">add_header</span> Alt-Svc <span class="hljs-string">&#x27;h3=&quot;:443&quot;; ma=86400&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在线测试网站：<a href="https://www.http3check.net/">https://www.http3check.net</a></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/03/nginx-quic-h3-3.png" alt="http3check"></p><p>chrome 测试</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/03/nginx-quic-h3-4.png" alt="chrome"></p><p>收工</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>QuicTLS</tag>
      
      <tag>http3</tag>
      
      <tag>quic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cloudflare切换SSL证书颁发者</title>
    <link href="/read/Cloudflare-certificate-authority.html"/>
    <url>/read/Cloudflare-certificate-authority.html</url>
    
    <content type="html"><![CDATA[<h3 id="写这篇文章的缘由"><a href="#写这篇文章的缘由" class="headerlink" title="写这篇文章的缘由"></a>写这篇文章的缘由</h3><p><br>Cloudflare 目前 Free 计划<a href="https://developers.cloudflare.com/ssl/reference/certificate-authorities/">提供四种证书</a>，一种是 <code>DigiCert</code> 根，一种是 <code>ISRG Root X1</code> 根，一种是 <code>Google Trust Services</code> 根，一种是 <code>Sectigo</code> 根(仅作为备份，不能主动启用)，在控制台使用应该是随机分配的，没办法指定.<br>然后在看 Cloudflare API 文档的时候，发现了一个文档没有提及的参数 <code>certificate_authority</code> ，实验了一下，可以成功切换证书.</p><h3 id="为啥要更换证书提供者"><a href="#为啥要更换证书提供者" class="headerlink" title="为啥要更换证书提供者"></a>为啥要更换证书提供者</h3><p><br>在 <code>ISRG Root X1</code> 下签发的证书，由于使用了新的 ECC 证书，所以为了兼容性必须附带两级中间证书.</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">ISRG R<span class="hljs-function"><span class="hljs-title">oot</span> X1 -&gt;</span> ISRG R<span class="hljs-function"><span class="hljs-title">oot</span> X2 -&gt;</span> E1 -&gt; cuojue.org<br></code></pre></td></tr></table></figure><p>而 <code>DigiCert</code> 下签发的证书兼容性更广，证书链也更短，只有一级中间证书.<br>(2022-10-28 更新：<a href="https://developers.cloudflare.com/ssl/reference/certificate-authorities/">即将停用</a>)</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">DigiCert </span><span class="hljs-keyword">Baltimore </span>Root -&gt; <span class="hljs-keyword">Cloudflare </span>Inc <span class="hljs-built_in">ECC</span> CA<span class="hljs-number">-3</span> -&gt; cuojue.<span class="hljs-keyword">org</span><br></code></pre></td></tr></table></figure><p>并且 Let’s Encrypt 在国内还有 OCSP 验证服务器被墙的问题</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p><br>使用 <code>PATCH</code> 方法对 cloudflare 的 api 进行请求</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">curl -X PATCH <span class="hljs-string">&quot;https://api.cloudflare.com/client/v4/zones/你的域名区域ID/ssl/universal/settings&quot;</span> <span class="hljs-string">\</span><br>     -H <span class="hljs-string">&quot;X-Auth-Email: 你的CF邮箱&quot;</span> <span class="hljs-string">\</span><br>     -H <span class="hljs-string">&quot;X-Auth-Key: 你的APIKEY&quot;</span> <span class="hljs-string">\</span><br>     -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> <span class="hljs-string">\</span><br>     --data <span class="hljs-string">&#x27;&#123;&quot;enabled&quot;:true,&quot;certificate_authority&quot;:&quot;digicert&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>如上的 curl 访问是切换到 <code>DigiCert</code> 。<br>如果想换到 <code>Let&#39;s Encrypt</code> 则修改其中的 <code>digicert</code> 为 <code>lets_encrypt</code><br>如果想换到 <code>Google Trust Services</code> 则修改其中的 <code>digicert</code> 为 <code>google</code><br>如果想换到 <code>Sectigo</code> 则修改其中的 <code>digicert</code> 为 <code>sectigo</code><br>(暂不能切换到 Sectigo 会返回 <code>You do not have the entitlements to switch to sectigo</code>)</p><p>返回</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&#123;<span class="hljs-string">&quot;result&quot;</span><span class="hljs-symbol">:</span>&#123;<span class="hljs-string">&quot;enabled&quot;</span><span class="hljs-symbol">:true</span>,<span class="hljs-string">&quot;certificate_authority&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;digicert&quot;</span></span>&#125;,<span class="hljs-string">&quot;success&quot;</span><span class="hljs-symbol">:true</span>,<span class="hljs-string">&quot;errors&quot;</span><span class="hljs-symbol">:[]</span>,<span class="hljs-string">&quot;messages&quot;</span><span class="hljs-symbol">:[]</span>&#125;<br></code></pre></td></tr></table></figure><p>就代表成功了，去控制台也可以看到新的证书了~</p><p>如果没有切换，表示原证书还可以使用，这时候开关一下就可以让 cf 刷新重新颁发证书<br>把上面的”enabled”改为 false 提交一次，再改为 true 提交一次</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><br></code></pre></td></tr></table></figure><h4 id="获取区域-ID-和-APIKEY-的地方"><a href="#获取区域-ID-和-APIKEY-的地方" class="headerlink" title="获取区域 ID 和 APIKEY 的地方"></a>获取区域 ID 和 APIKEY 的地方</h4><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/03/Cloudflare-certificate-authority-3.jpg" title="区域ID"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2022/03/Cloudflare-certificate-authority-4.jpg" title="APIKEY"></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cloudflare</tag>
      
      <tag>SSL Certificate</tag>
      
      <tag>SNI</tag>
      
      <tag>Let&#39;s Encrypt</tag>
      
      <tag>certificate-authority</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键备份脚本backup.sh(新增支持COS/阿里云盘)</title>
    <link href="/read/backup-sh.html"/>
    <url>/read/backup-sh.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>修改自大神 <a href="https://teddysun.com/469.html">秋水逸冰</a> 的 backup.sh<br>增加了上传到 腾讯云 COS 和 阿里云盘 功能<br>增强加密强度，增加 pbkdf2 迭代 20w 次，md 换成 sha256</p></blockquote><h2 id="总结一下-backup-sh-特点："><a href="#总结一下-backup-sh-特点：" class="headerlink" title="总结一下 backup.sh 特点："></a>总结一下 backup.sh 特点：</h2><ol><li>支持 MySQL&#x2F;MariaDB&#x2F;Percona 的数据库全量备份或选择备份；</li><li>支持指定目录或文件的备份；</li><li>支持加密备份文件（需安装 openssl 命令，可选）；</li><li>支持上传至 Google Drive（需先安装 rclone 并配置，可选）；</li><li>支持上传至 腾讯云 COS（需先安装 <a href="https://cloud.tencent.com/document/product/436/10976">coscmd</a> 并配置，可选）；</li><li>支持上传至 阿里云盘（需先安装 <a href="https://github.com/wxy1343/aliyunpan">aliyunpan</a> 并配置，可选）；</li><li>支持上传至 FTP（可选）；</li><li>支持在删除指定天数本地旧的备份文件的同时，也删除 Google Drive&#x2F;COS&#x2F;阿里云盘 上的同名文件（可选）。</li></ol><h2 id="修改并配置脚本"><a href="#修改并配置脚本" class="headerlink" title="修改并配置脚本"></a>修改并配置脚本</h2><h3 id="关于变量名的一些说明："><a href="#关于变量名的一些说明：" class="headerlink" title="关于变量名的一些说明："></a>关于变量名的一些说明：</h3><ul><li>ENCRYPTFLG （加密 FLG，true 为加密，false 为不加密，默认是加密）</li><li>BACKUPPASS （加密密码，重要，务必要修改）</li><li>LOCALDIR （备份目录，可自己指定）</li><li>TEMPDIR （备份目录的临时目录，可自己指定）</li><li>LOGFILE （脚本运行产生的日志文件路径）</li><li>MYSQL_ROOT_PASSWORD （MySQL&#x2F;MariaDB&#x2F;Percona 的 root 用户密码）</li><li>MYSQL_DATABASE_NAME （指定 MySQL&#x2F;MariaDB&#x2F;Percona 的数据库名，留空则是备份所有数据库）</li></ul><p><strong>※ MYSQL_DATABASE_NAME 是一个数组变量，可以指定多个。举例如下：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">MYSQL_DATABASE_NAME[0]=<span class="hljs-string">&quot;phpmyadmin&quot;</span><br>MYSQL_DATABASE_NAME[1]=<span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure><ul><li>BACKUP （需要备份的指定目录或文件列表，留空就是不备份目录或文件）</li></ul><p><strong>※ BACKUP 是一个数组变量，可以指定多个。举例如下：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">BACKUP[0]=<span class="hljs-string">&quot;/data/www/default/test.tgz&quot;</span><br>BACKUP[1]=<span class="hljs-string">&quot;/data/www/default/test/&quot;</span><br>BACKUP[2]=<span class="hljs-string">&quot;/data/www/default/test2/&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>LOCALAGEDAILIES （指定多少天之后删除本地旧的备份文件，默认为 7 天）</p></li><li><p>DELETE_REMOTE_FILE_FLG （删除 Google Drive&#x2F;COS&#x2F;AliyunDrive&#x2F;FTP 上备份文件的 FLG，true 为删除，false 为不删除）</p></li><li><p>RCLONE_NAME （设置 rclone config 时设定的 remote 名称，务必要指定）</p></li><li><p>RCLONE_FOLDER （指定备份时设定的 remote 的目录名称，该目录名在 Google Drive 不存在时则会自行创建。默认为空，也就是根目录）</p></li><li><p>RCLONE_FLG （上传本地备份文件至 Google Drive 的 FLG，true 为上传，false 为不上传）</p></li><li><p>COS_FOLDER （指定备份时设定的 remote 的目录名称，该目录名在 COS 不存在时则会自行创建。默认为空，也就是根目录）</p></li><li><p>COS_FLG （上传本地备份文件至 COS 的 FLG，true 为上传，false 为不上传）</p></li><li><p>ALI_FLG （上传本地备份文件至 AliyunDrive 的 FLG，true 为上传，false 为不上传）</p></li><li><p>ALI_FOLDER （指定备份时设定的 remote 的目录名称，<strong>该目录名在 AliyunDrive 不存在时会错误！！！需要手动创建！</strong>）</p></li><li><p>ALI_PY_FILE （指定 <a href="https://github.com/wxy1343/aliyunpan">aliyunpan</a> 的 <code>main.py</code> 路径）</p></li><li><p>ALI_REFRESH_TOKEN （阿里云盘的 REFRESH_TOKEN ）</p></li><li><p>FTP_FLG （上传文件至 FTP 服务器的 FLG，true 为上传，false 为不上传）</p></li><li><p>FTP_HOST （连接的 FTP 域名或 IP 地址）</p></li><li><p>FTP_USER （连接的 FTP 的用户名）</p></li><li><p>FTP_PASS （连接的 FTP 的用户的密码）</p></li><li><p>FTP_DIR （连接的 FTP 的远程目录，比如： public_html）</p></li></ul><h3 id="一些注意事项的说明："><a href="#一些注意事项的说明：" class="headerlink" title="一些注意事项的说明："></a>一些注意事项的说明：</h3><ol><li>脚本需要用 root 用户来执行；</li><li>脚本需要用到 openssl 来加密，请事先安装好；</li><li>脚本默认备份所有的数据库（全量备份）；</li><li>备份文件的解密命令如下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl enc -aes256 -salt -pbkdf2 -iter 200000 -<span class="hljs-keyword">in</span> [ENCRYPTED BACKUP] -out decrypted_backup.tgz -pass pass:[BACKUPPASS] -d -md sha256<br></code></pre></td></tr></table></figure><ol start="5"><li>备份文件解密后，解压命令如下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -zxPf [DECRYPTION BACKUP FILE]<br></code></pre></td></tr></table></figure><p>解释一下参数 -P：<br>tar 压缩文件默认都是相对路径的。加个 -P 是为了 tar 能以绝对路径压缩文件。因此，解压的时候也要带个 -P 参数。</p><h2 id="配置-rclone-命令-可选"><a href="#配置-rclone-命令-可选" class="headerlink" title="配置 rclone 命令(可选)"></a>配置 rclone 命令(可选)</h2><p>rclone 是一个命令行工具，用于 Google Drive 的上传下载等操作。官网网站：<br><a href="https://rclone.org/">https://rclone.org/</a></p><p>你可以用以下的命令来安装 rclone，以 RedHat 系举例，记得要先安装 unzip 命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install unzip &amp;&amp; wget -qO- https://rclone.org/install.sh | bash<br></code></pre></td></tr></table></figure><p>然后，运行以下命令开始配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rclone config<br></code></pre></td></tr></table></figure><p>参考<a href="https://www.qcmoke.site/tools/rclone.html">这篇文章</a>，当设置到 Use auto config? 是否使用自动配置，选 n 不自动配置，然后根据提示用浏览器打开 rclone 给出的 URL，点击接受（Accept），然后将浏览器上显示出来的字符串粘贴回命令行里，完成授权，然后退出即可。参考文章里有挂载的操作，记得这里不需要挂载 Google Drive。</p><h2 id="配置-coscmd-命令-可选"><a href="#配置-coscmd-命令-可选" class="headerlink" title="配置 coscmd 命令(可选)"></a>配置 coscmd 命令(可选)</h2><h3 id="通过-pip-安装"><a href="#通过-pip-安装" class="headerlink" title="通过 pip 安装"></a>通过 pip 安装</h3><p>执行<code>pip</code>命令进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install coscmd<br></code></pre></td></tr></table></figure><p>安装成功之后，用户可以通过<code>-v</code>或者<code>--version</code>命令查看当前的版本信息。</p><h3 id="pip-更新"><a href="#pip-更新" class="headerlink" title="pip 更新"></a>pip 更新</h3><p>安装完成后，执行以下命令进行更新：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install coscmd -U<br></code></pre></td></tr></table></figure><blockquote><p>! 当 pip 版本号大于等于 10.0.0 时，升级或安装依赖库时可能会出现失败，建议使用 pip 版本 9.x（pip install pip&#x3D;&#x3D;9.0.0）。如果您安装的是最新 Python 版本（例如 3.9.0），则已集成 pip，您无需再次安装。</p></blockquote><h3 id="快速配置"><a href="#快速配置" class="headerlink" title="快速配置"></a>快速配置</h3><p>通常情况下，若您只需要进行简单的操作，可参照以下操作示例进行快速配置。</p><blockquote><p>?配置前，您需要先在 COS 控制台创建一个用于配置参数的存储桶（例如 configure-bucket-1250000000），并创建密钥信息。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">coscmd config -a AChT4ThiXAbpBDEFGhT4ThiXAbp**** -s WE54wreefvds3462refgwewe**** -b configure-bucket-1250000000 -r ap-chengdu<br></code></pre></td></tr></table></figure><h2 id="配置-aliyunpan-命令-可选"><a href="#配置-aliyunpan-命令-可选" class="headerlink" title="配置 aliyunpan 命令(可选)"></a>配置 aliyunpan 命令(可选)</h2><h3 id="安装-aliyunpan"><a href="#安装-aliyunpan" class="headerlink" title="安装 aliyunpan"></a>安装 aliyunpan</h3><p>原命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/wxy1343/aliyunpan.git<br><span class="hljs-built_in">cd</span> aliyunpan<br>pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>新命令 <strong>2022-03-30</strong> 更新</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install aliyunpan<br>pip install aliyunpan --upgrade<br></code></pre></td></tr></table></figure><h3 id="设置-password-x2F-refresh-token"><a href="#设置-password-x2F-refresh-token" class="headerlink" title="设置 password &#x2F; refresh_token"></a>设置 password &#x2F; refresh_token</h3><blockquote><p>不推荐 web 端获取，问题挺多</p></blockquote><h4 id="可以指定账号密码登入"><a href="#可以指定账号密码登入" class="headerlink" title="可以指定账号密码登入"></a>可以指定账号密码登入</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;username: &#x27;xxxxx&#x27;&quot;</span>  &gt;  ~/.config/aliyunpan.yaml<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;password: &#x27;xxxxx&#x27;&quot;</span>  &gt;&gt;  ~/.config/aliyunpan.yaml<br></code></pre></td></tr></table></figure><h4 id="可以通过手机端查找日志获取-refresh-token"><a href="#可以通过手机端查找日志获取-refresh-token" class="headerlink" title="可以通过手机端查找日志获取 refresh_token"></a>可以通过手机端查找日志获取 refresh_token</h4><blockquote><p>&#x2F;sdcard&#x2F;Android&#x2F;data&#x2F;com.alicloud.databox&#x2F;files&#x2F;logs&#x2F;trace&#x2F;userId&#x2F;yunpan&#x2F;latest.log</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;refresh_token: &#x27;xxxxx&#x27;&quot;</span>  &gt;  ~/.config/aliyunpan.yaml<br></code></pre></td></tr></table></figure><h2 id="运行脚本开始备份"><a href="#运行脚本开始备份" class="headerlink" title="运行脚本开始备份"></a>运行脚本开始备份</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./backup.sh<br></code></pre></td></tr></table></figure><p>脚本默认会显示备份进度，并在最后统计出所需时间。<br>如果你想将脚本加入到 cron 自动运行的话，就不需要前台显示备份进度，只写日志就可以了。<br>这个时候你需要稍微改一下脚本中的 log 函数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-function"><span class="hljs-title">log</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>)</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-subst">$(date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>)</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;LOGFILE&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-function"><span class="hljs-title">log</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-subst">$(date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>)</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;LOGFILE&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何使用-cron-自动备份"><a href="#如何使用-cron-自动备份" class="headerlink" title="如何使用 cron 自动备份"></a>如何使用 cron 自动备份</h3><p>我的例子</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">crontab -l <span class="hljs-comment">#查看一下计划任务列表</span><br>crontab -e <span class="hljs-comment">#加入计划任务</span><br>30  2  *  *  * /home/server/backup/backup.sh <span class="hljs-comment">#每天凌晨2:30运行备份</span><br></code></pre></td></tr></table></figure><h2 id="附：脚本文件"><a href="#附：脚本文件" class="headerlink" title="附：脚本文件"></a>附：脚本文件</h2><details>  <summary>点击查看脚本文件</summary><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><span class="hljs-comment"># Copyright (C) 2013 - 2020 Teddysun &lt;i@teddysun.com&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This file is part of the LAMP script.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># LAMP is a powerful bash script for the installation of</span><br><span class="hljs-comment"># Apache + PHP + MySQL/MariaDB and so on.</span><br><span class="hljs-comment"># You can install Apache + PHP + MySQL/MariaDB in an very easy way.</span><br><span class="hljs-comment"># Just need to input numbers to choose what you want to install before installation.</span><br><span class="hljs-comment"># And all things will be done in a few minutes.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Description:      Auto backup shell script</span><br><span class="hljs-comment"># Description URL:  https://teddysun.com/469.html</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Website:  https://lamp.sh</span><br><span class="hljs-comment"># Github:   https://github.com/teddysun/lamp</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># You must to modify the config before run it!!!</span><br><span class="hljs-comment"># Backup MySQL/MariaDB datebases, files and directories</span><br><span class="hljs-comment"># Backup file is encrypted with AES256-cbc with SHA1 message-digest (option)</span><br><span class="hljs-comment"># Auto transfer backup file to Google Drive (need install rclone command) (option)</span><br><span class="hljs-comment"># Auto transfer backup file to FTP server (option)</span><br><span class="hljs-comment"># Auto delete Google Drive&#x27;s or FTP server&#x27;s remote file (option)</span><br><br>[[ <span class="hljs-variable">$EUID</span> -ne 0 ]] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Error: This script must be run as root!&quot;</span> &amp;&amp; <span class="hljs-built_in">exit</span> 1<br><br><span class="hljs-comment">########## START OF CONFIG ##########</span><br><br><span class="hljs-comment"># Encrypt flag (true: encrypt, false: not encrypt)</span><br>ENCRYPTFLG=<span class="hljs-literal">true</span><br><br><span class="hljs-comment"># WARNING: KEEP THE PASSWORD SAFE!!!</span><br><span class="hljs-comment"># The password used to encrypt the backup</span><br><span class="hljs-comment"># To decrypt backups made by this script, run the following command:</span><br><span class="hljs-comment"># openssl enc -aes256 -in [encrypted backup] -out decrypted_backup.tgz -pass pass:[backup password] -d -md sha1</span><br>BACKUPPASS=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># Directory to store backups</span><br>LOCALDIR=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># Temporary directory used during backup creation</span><br>TEMPDIR=<span class="hljs-string">&quot;/tmp/backups/temp/&quot;</span><br><br><span class="hljs-comment"># File to log the outcome of backups</span><br>LOGFILE=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># OPTIONAL:</span><br><span class="hljs-comment"># If you want to backup the MySQL database, enter the MySQL root password below, otherwise leave it blank</span><br>MYSQL_ROOT_PASSWORD=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># Below is a list of MySQL database name that will be backed up</span><br><span class="hljs-comment"># If you want backup ALL databases, leave it blank.</span><br>MYSQL_DATABASE_NAME[0]=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># Below is a list of files and directories that will be backed up in the tar backup</span><br><span class="hljs-comment"># For example:</span><br><span class="hljs-comment"># File: /data/www/default/test.tgz</span><br><span class="hljs-comment"># Directory: /data/www/default/test</span><br>BACKUP[0]=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># Number of days to store daily local backups (default 7 days)</span><br>LOCALAGEDAILIES=<span class="hljs-string">&quot;7&quot;</span><br><br><span class="hljs-comment"># Delete remote file from Googole Drive or FTP server flag (true: delete, false: not delete)</span><br>DELETE_REMOTE_FILE_FLG=<span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Rclone remote name</span><br>RCLONE_NAME=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># Rclone remote folder name (default &quot;&quot;)</span><br>RCLONE_FOLDER=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># Cos remote folder name (default &quot;&quot;)</span><br>COS_FOLDER=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># AliyunDrive remote folder name (default &quot;&quot;)</span><br>ALI_FOLDER=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># Upload local file to FTP server flag (true: upload, false: not upload)</span><br>FTP_FLG=<span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Upload local file to Google Drive flag (true: upload, false: not upload)</span><br>RCLONE_FLG=<span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Upload local file to Cos flag (true: upload, false: not upload)</span><br>COS_FLG=<span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Upload local file to AliyunDrive flag (true: upload, false: not upload)</span><br>ALI_FLG=<span class="hljs-literal">true</span><br>ALI_PY_FILE=<span class="hljs-string">&quot;/usr/local/bin/aliyunpan-cli&quot;</span><br><br><span class="hljs-comment"># FTP server</span><br><span class="hljs-comment"># OPTIONAL: If you want to upload to FTP server, enter the Hostname or IP address below</span><br>FTP_HOST=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># FTP username</span><br><span class="hljs-comment"># OPTIONAL: If you want to upload to FTP server, enter the FTP username below</span><br>FTP_USER=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># FTP password</span><br><span class="hljs-comment"># OPTIONAL: If you want to upload to FTP server, enter the username&#x27;s password below</span><br>FTP_PASS=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># FTP server remote folder</span><br><span class="hljs-comment"># OPTIONAL: If you want to upload to FTP server, enter the FTP remote folder below</span><br><span class="hljs-comment"># For example: public_html</span><br>FTP_DIR=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment">########## END OF CONFIG ##########</span><br><br><span class="hljs-comment"># Date &amp; Time</span><br>DAY=$(<span class="hljs-built_in">date</span> +%d)<br>MONTH=$(<span class="hljs-built_in">date</span> +%m)<br>YEAR=$(<span class="hljs-built_in">date</span> +%C%y)<br>BACKUPDATE=$(<span class="hljs-built_in">date</span> +%Y%m%d%H%M%S)<br><span class="hljs-comment"># Backup file name</span><br>TARFILE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LOCALDIR&#125;</span>&quot;</span><span class="hljs-string">&quot;<span class="hljs-subst">$(hostname)</span>&quot;</span>_<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUPDATE&#125;</span>&quot;</span>.tgz<br><span class="hljs-comment"># Encrypted backup file name</span><br>ENC_TARFILE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TARFILE&#125;</span>.enc&quot;</span><br><span class="hljs-comment"># Backup MySQL dump file name</span><br>SQLFILE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TEMPDIR&#125;</span>mysql_<span class="hljs-variable">$&#123;BACKUPDATE&#125;</span>.sql&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">log</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>)</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-subst">$(date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>)</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$&#123;LOGFILE&#125;</span><br>&#125;<br><br><span class="hljs-comment"># Check for list of mandatory binaries</span><br><span class="hljs-function"><span class="hljs-title">check_commands</span></span>() &#123;<br>    <span class="hljs-comment"># This section checks for all of the binaries used in the backup</span><br>    <span class="hljs-comment"># Do not check mysql command if you do not want to backup the MySQL database</span><br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        BINARIES=( <span class="hljs-built_in">cat</span> <span class="hljs-built_in">cd</span> <span class="hljs-built_in">du</span> <span class="hljs-built_in">date</span> <span class="hljs-built_in">dirname</span> <span class="hljs-built_in">echo</span> openssl <span class="hljs-built_in">pwd</span> <span class="hljs-built_in">rm</span> tar )<br>    <span class="hljs-keyword">else</span><br>        BINARIES=( <span class="hljs-built_in">cat</span> <span class="hljs-built_in">cd</span> <span class="hljs-built_in">du</span> <span class="hljs-built_in">date</span> <span class="hljs-built_in">dirname</span> <span class="hljs-built_in">echo</span> openssl mysql mysqldump <span class="hljs-built_in">pwd</span> <span class="hljs-built_in">rm</span> tar )<br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># Iterate over the list of binaries, and if one isn&#x27;t found, abort</span><br>    <span class="hljs-keyword">for</span> BINARY <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BINARIES[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span> [ ! <span class="hljs-string">&quot;<span class="hljs-subst">$(command -v <span class="hljs-string">&quot;<span class="hljs-variable">$BINARY</span>&quot;</span>)</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;<span class="hljs-variable">$BINARY</span> is not installed. Install it and try again&quot;</span><br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br><br>    <span class="hljs-comment"># check rclone command</span><br>    RCLONE_COMMAND=<span class="hljs-literal">false</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(command -v <span class="hljs-string">&quot;rclone&quot;</span>)</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        RCLONE_COMMAND=<span class="hljs-literal">true</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># check COS command</span><br>    COS_COMMAND=<span class="hljs-literal">false</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-subst">$(command -v <span class="hljs-string">&quot;coscmd&quot;</span>)</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        COS_COMMAND=<span class="hljs-literal">true</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># check AliyunDrive command</span><br>    ALI_COMMAND=<span class="hljs-literal">false</span><br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ALI_PY_FILE&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        ALI_COMMAND=<span class="hljs-literal">true</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># check ftp command</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;FTP_FLG&#125;</span>; <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> [ ! <span class="hljs-string">&quot;<span class="hljs-subst">$(command -v <span class="hljs-string">&quot;ftp&quot;</span>)</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;ftp is not installed. Install it and try again&quot;</span><br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">calculate_size</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> file_name=<span class="hljs-variable">$1</span><br>    <span class="hljs-built_in">local</span> file_size=$(<span class="hljs-built_in">du</span> -h <span class="hljs-variable">$file_name</span> 2&gt;/dev/null | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;file_size&#125;</span>&quot;</span> = <span class="hljs-string">&quot;x&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;unknown&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file_size&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># Backup MySQL databases</span><br><span class="hljs-function"><span class="hljs-title">mysql_backup</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;MySQL root password not set, MySQL backup skipped&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;MySQL dump start&quot;</span><br>        mysql -u root -p<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span>&quot;</span> 2&gt;/dev/null &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">exit</span><br><span class="hljs-string">EOF</span><br>        <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;MySQL root password is incorrect. Please check it and try again&quot;</span><br>            <span class="hljs-built_in">exit</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;MYSQL_DATABASE_NAME[@]&#125;</span>&quot;</span> == <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>            mysqldump -u root -p<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span>&quot;</span> --all-databases &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SQLFILE&#125;</span>&quot;</span> 2&gt;/dev/null<br>            <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;MySQL all databases backup failed&quot;</span><br>                <span class="hljs-built_in">exit</span> 1<br>            <span class="hljs-keyword">fi</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;MySQL all databases dump file name: <span class="hljs-variable">$&#123;SQLFILE&#125;</span>&quot;</span><br>            <span class="hljs-comment">#Add MySQL backup dump file to BACKUP list</span><br>            BACKUP=(<span class="hljs-variable">$&#123;BACKUP[@]&#125;</span> <span class="hljs-variable">$&#123;SQLFILE&#125;</span>)<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">for</span> db <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;MYSQL_DATABASE_NAME[@]&#125;</span>; <span class="hljs-keyword">do</span><br>                <span class="hljs-built_in">unset</span> DBFILE<br>                DBFILE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TEMPDIR&#125;</span><span class="hljs-variable">$&#123;db&#125;</span>_<span class="hljs-variable">$&#123;BACKUPDATE&#125;</span>.sql&quot;</span><br>                mysqldump -u root -p<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;MYSQL_ROOT_PASSWORD&#125;</span>&quot;</span> <span class="hljs-variable">$&#123;db&#125;</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DBFILE&#125;</span>&quot;</span> 2&gt;/dev/null<br>                <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>                    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;MySQL database name [<span class="hljs-variable">$&#123;db&#125;</span>] backup failed, please check database name is correct and try again&quot;</span><br>                    <span class="hljs-built_in">exit</span> 1<br>                <span class="hljs-keyword">fi</span><br>                <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;MySQL database name [<span class="hljs-variable">$&#123;db&#125;</span>] dump file name: <span class="hljs-variable">$&#123;DBFILE&#125;</span>&quot;</span><br>                <span class="hljs-comment">#Add MySQL backup dump file to BACKUP list</span><br>                BACKUP=(<span class="hljs-variable">$&#123;BACKUP[@]&#125;</span> <span class="hljs-variable">$&#123;DBFILE&#125;</span>)<br>            <span class="hljs-keyword">done</span><br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;MySQL dump completed&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">start_backup</span></span>() &#123;<br>    [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#BACKUP[@]&#125;</span>&quot;</span> -eq 0 ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Error: You must to modify the [<span class="hljs-subst">$(basename $0)</span>] config before run it!&quot;</span> &amp;&amp; <span class="hljs-built_in">exit</span> 1<br><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tar backup file start&quot;</span><br>    tar -zcPf <span class="hljs-variable">$&#123;TARFILE&#125;</span> <span class="hljs-variable">$&#123;BACKUP[@]&#125;</span><br>    <span class="hljs-keyword">if</span> [ $? -gt 1 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tar backup file failed&quot;</span><br>        <span class="hljs-built_in">exit</span> 1<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tar backup file completed&quot;</span><br><br>    <span class="hljs-comment"># Encrypt tar file</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;ENCRYPTFLG&#125;</span>; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Encrypt backup file start&quot;</span><br>        openssl enc -aes256 -salt -pbkdf2 -iter 200000 -<span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TARFILE&#125;</span>&quot;</span> -out <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ENC_TARFILE&#125;</span>&quot;</span> -pass pass:<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUPPASS&#125;</span>&quot;</span> -md sha256<br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Encrypt backup file completed&quot;</span><br><br>        <span class="hljs-comment"># Delete unencrypted tar</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Delete unencrypted tar file: <span class="hljs-variable">$&#123;TARFILE&#125;</span>&quot;</span><br>        <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$&#123;TARFILE&#125;</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># Delete MySQL temporary dump file</span><br>    <span class="hljs-keyword">for</span> sql <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;TEMPDIR&#125;</span>*.sql); <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Delete MySQL temporary dump file: <span class="hljs-variable">$&#123;sql&#125;</span>&quot;</span><br>        <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$&#123;sql&#125;</span><br>    <span class="hljs-keyword">done</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;ENCRYPTFLG&#125;</span>; <span class="hljs-keyword">then</span><br>        OUT_FILE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ENC_TARFILE&#125;</span>&quot;</span><br>    <span class="hljs-keyword">else</span><br>        OUT_FILE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TARFILE&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;File name: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span>, File size: <span class="hljs-subst">$(calculate_size $&#123;OUT_FILE&#125;)</span>&quot;</span><br>&#125;<br><br><span class="hljs-comment"># Transfer backup file to Google Drive</span><br><span class="hljs-comment"># If you want to install rclone command, please visit website:</span><br><span class="hljs-comment"># https://rclone.org/downloads/</span><br><span class="hljs-function"><span class="hljs-title">rclone_upload</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;RCLONE_FLG&#125;</span> &amp;&amp; <span class="hljs-variable">$&#123;RCLONE_COMMAND&#125;</span>; <span class="hljs-keyword">then</span><br>        [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;RCLONE_NAME&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: RCLONE_NAME can not be empty!&quot;</span> &amp;&amp; <span class="hljs-built_in">return</span> 1<br>        <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;RCLONE_FOLDER&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            rclone <span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;RCLONE_NAME&#125;</span>:<span class="hljs-variable">$&#123;RCLONE_FOLDER&#125;</span> 2&gt;&amp;1 &gt; /dev/null<br>            <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Create the path <span class="hljs-variable">$&#123;RCLONE_NAME&#125;</span>:<span class="hljs-variable">$&#123;RCLONE_FOLDER&#125;</span>&quot;</span><br>                rclone <span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$&#123;RCLONE_NAME&#125;</span>:<span class="hljs-variable">$&#123;RCLONE_FOLDER&#125;</span><br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tranferring backup file: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> to Google Drive&quot;</span><br>        rclone copy <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> <span class="hljs-variable">$&#123;RCLONE_NAME&#125;</span>:<span class="hljs-variable">$&#123;RCLONE_FOLDER&#125;</span> &gt;&gt; <span class="hljs-variable">$&#123;LOGFILE&#125;</span><br>        <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: Tranferring backup file: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> to Google Drive failed&quot;</span><br>            <span class="hljs-built_in">return</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tranferring backup file: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> to Google Drive completed&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><br><span class="hljs-comment"># Tranferring backup file to COS</span><br><span class="hljs-function"><span class="hljs-title">cos_upload</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;COS_FLG&#125;</span> &amp;&amp; <span class="hljs-variable">$&#123;COS_COMMAND&#125;</span>; <span class="hljs-keyword">then</span><br>        [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;COS_FOLDER&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: COS_FOLDER can not be empty!&quot;</span> &amp;&amp; <span class="hljs-built_in">return</span> 1<br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tranferring backup file: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> to COS&quot;</span><br>        coscmd upload <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> <span class="hljs-variable">$&#123;COS_FOLDER&#125;</span>/ &gt;&gt; <span class="hljs-variable">$&#123;LOGFILE&#125;</span><br>        <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: Tranferring backup file: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> to COS&quot;</span><br>            <span class="hljs-built_in">return</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tranferring backup file: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> to COS completed&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># Tranferring backup file to AliyunDrive</span><br><span class="hljs-function"><span class="hljs-title">ali_upload</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;ALI_FLG&#125;</span> &amp;&amp; <span class="hljs-variable">$&#123;ALI_COMMAND&#125;</span>; <span class="hljs-keyword">then</span><br>        [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;ALI_FOLDER&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: ALI_FOLDER can not be empty!&quot;</span> &amp;&amp; <span class="hljs-built_in">return</span> 1<br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tranferring backup file: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> to AliyunDrive&quot;</span><br>        <span class="hljs-variable">$&#123;ALI_PY_FILE&#125;</span> upload <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> <span class="hljs-variable">$&#123;ALI_FOLDER&#125;</span> <span class="hljs-comment"># &gt;&gt; $&#123;LOGFILE&#125;</span><br>        <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: Tranferring backup file: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> to AliyunDrive&quot;</span><br>            <span class="hljs-built_in">return</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tranferring backup file: <span class="hljs-variable">$&#123;OUT_FILE&#125;</span> to AliyunDrive completed&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># Tranferring backup file to FTP server</span><br><span class="hljs-function"><span class="hljs-title">ftp_upload</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;FTP_FLG&#125;</span>; <span class="hljs-keyword">then</span><br>        [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;FTP_HOST&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: FTP_HOST can not be empty!&quot;</span> &amp;&amp; <span class="hljs-built_in">return</span> 1<br>        [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;FTP_USER&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: FTP_USER can not be empty!&quot;</span> &amp;&amp; <span class="hljs-built_in">return</span> 1<br>        [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;FTP_PASS&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: FTP_PASS can not be empty!&quot;</span> &amp;&amp; <span class="hljs-built_in">return</span> 1<br>        [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;FTP_DIR&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: FTP_DIR can not be empty!&quot;</span> &amp;&amp; <span class="hljs-built_in">return</span> 1<br>        <span class="hljs-built_in">local</span> FTP_OUT_FILE=$(<span class="hljs-built_in">basename</span> <span class="hljs-variable">$&#123;OUT_FILE&#125;</span>)<br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tranferring backup file: <span class="hljs-variable">$&#123;FTP_OUT_FILE&#125;</span> to FTP server&quot;</span><br>        ftp -<span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;FTP_HOST&#125;</span> 2&gt;&amp;1 &gt;&gt; <span class="hljs-variable">$&#123;LOGFILE&#125;</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">user $FTP_USER $FTP_PASS</span><br><span class="hljs-string">binary</span><br><span class="hljs-string">lcd $LOCALDIR</span><br><span class="hljs-string">cd $FTP_DIR</span><br><span class="hljs-string">put $FTP_OUT_FILE</span><br><span class="hljs-string">quit</span><br><span class="hljs-string">EOF</span><br>        <span class="hljs-keyword">if</span> [ $? -ne 0 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Error: Tranferring backup file: <span class="hljs-variable">$&#123;FTP_OUT_FILE&#125;</span> to FTP server failed&quot;</span><br>            <span class="hljs-built_in">return</span> 1<br>        <span class="hljs-keyword">fi</span><br>        <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Tranferring backup file: <span class="hljs-variable">$&#123;FTP_OUT_FILE&#125;</span> to FTP server completed&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># Get file date</span><br><span class="hljs-function"><span class="hljs-title">get_file_date</span></span>() &#123;<br>    <span class="hljs-comment">#Approximate a 30-day month and 365-day year</span><br>    DAYS=$(( $((<span class="hljs-number">10</span>#<span class="hljs-variable">$&#123;YEAR&#125;</span>*<span class="hljs-number">365</span>)) + $((<span class="hljs-number">10</span>#<span class="hljs-variable">$&#123;MONTH&#125;</span>*<span class="hljs-number">30</span>)) + $((<span class="hljs-number">10</span>#<span class="hljs-variable">$&#123;DAY&#125;</span>)) ))<br>    <span class="hljs-built_in">unset</span> FILEYEAR FILEMONTH FILEDAY FILEDAYS FILEAGE<br>    FILEYEAR=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> | <span class="hljs-built_in">cut</span> -d_ -f2 | <span class="hljs-built_in">cut</span> -c 1-4)<br>    FILEMONTH=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> | <span class="hljs-built_in">cut</span> -d_ -f2 | <span class="hljs-built_in">cut</span> -c 5-6)<br>    FILEDAY=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> | <span class="hljs-built_in">cut</span> -d_ -f2 | <span class="hljs-built_in">cut</span> -c 7-8)<br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;FILEYEAR&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;FILEMONTH&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;FILEDAY&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>        <span class="hljs-comment">#Approximate a 30-day month and 365-day year</span><br>        FILEDAYS=$(( $((<span class="hljs-number">10</span>#<span class="hljs-variable">$&#123;FILEYEAR&#125;</span>*<span class="hljs-number">365</span>)) + $((<span class="hljs-number">10</span>#<span class="hljs-variable">$&#123;FILEMONTH&#125;</span>*<span class="hljs-number">30</span>)) + $((<span class="hljs-number">10</span>#<span class="hljs-variable">$&#123;FILEDAY&#125;</span>)) ))<br>        FILEAGE=$(( <span class="hljs-number">10</span>#<span class="hljs-variable">$&#123;DAYS&#125;</span> - <span class="hljs-number">10</span>#<span class="hljs-variable">$&#123;FILEDAYS&#125;</span> ))<br>        <span class="hljs-built_in">return</span> 0<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">return</span> 1<br>&#125;<br><br><span class="hljs-comment"># Delete Google Drive&#x27;s old backup file</span><br><span class="hljs-function"><span class="hljs-title">delete_gdrive_file</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> FILENAME=<span class="hljs-variable">$1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;DELETE_REMOTE_FILE_FLG&#125;</span> &amp;&amp; <span class="hljs-variable">$&#123;RCLONE_COMMAND&#125;</span>; <span class="hljs-keyword">then</span><br>        rclone <span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;RCLONE_NAME&#125;</span>:<span class="hljs-variable">$&#123;RCLONE_FOLDER&#125;</span>/<span class="hljs-variable">$&#123;FILENAME&#125;</span> 2&gt;&amp;1 &gt; /dev/null<br>        <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>            rclone delete <span class="hljs-variable">$&#123;RCLONE_NAME&#125;</span>:<span class="hljs-variable">$&#123;RCLONE_FOLDER&#125;</span>/<span class="hljs-variable">$&#123;FILENAME&#125;</span> &gt;&gt; <span class="hljs-variable">$&#123;LOGFILE&#125;</span><br>            <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Google Drive&#x27;s old backup file: <span class="hljs-variable">$&#123;FILENAME&#125;</span> has been deleted&quot;</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Failed to delete Google Drive&#x27;s old backup file: <span class="hljs-variable">$&#123;FILENAME&#125;</span>&quot;</span><br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Google Drive&#x27;s old backup file: <span class="hljs-variable">$&#123;FILENAME&#125;</span> is not exist&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># Delete COS&#x27;s old backup file</span><br><span class="hljs-function"><span class="hljs-title">delete_cos_file</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> FILENAME=<span class="hljs-variable">$1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;DELETE_REMOTE_FILE_FLG&#125;</span> &amp;&amp; <span class="hljs-variable">$&#123;COS_COMMAND&#125;</span>; <span class="hljs-keyword">then</span><br>        cos delete <span class="hljs-variable">$&#123;COS_FOLDER&#125;</span>/<span class="hljs-variable">$&#123;FILENAME&#125;</span> &gt;&gt; <span class="hljs-variable">$&#123;LOGFILE&#125;</span><br>        <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;COS&#x27;s old backup file: <span class="hljs-variable">$&#123;FILENAME&#125;</span> has been deleted&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Failed to delete COS&#x27;s old backup file: <span class="hljs-variable">$&#123;FILENAME&#125;</span>&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># Delete AliyunDrive&#x27;s old backup file</span><br><span class="hljs-function"><span class="hljs-title">delete_ali_file</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> FILENAME=<span class="hljs-variable">$1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;DELETE_REMOTE_FILE_FLG&#125;</span> &amp;&amp; <span class="hljs-variable">$&#123;ALI_COMMAND&#125;</span>; <span class="hljs-keyword">then</span><br>        <span class="hljs-variable">$&#123;ALI_PY_FILE&#125;</span> delete <span class="hljs-variable">$&#123;ALI_FOLDER&#125;</span><span class="hljs-variable">$&#123;FILENAME&#125;</span> <span class="hljs-comment"># &gt;&gt; $&#123;LOGFILE&#125;</span><br>        <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;AliyunDrive&#x27;s old backup file: <span class="hljs-variable">$&#123;FILENAME&#125;</span> has been deleted&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Failed to delete AliyunDrive&#x27;s old backup file: <span class="hljs-variable">$&#123;FILENAME&#125;</span>&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># Delete FTP server&#x27;s old backup file</span><br><span class="hljs-function"><span class="hljs-title">delete_ftp_file</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> FILENAME=<span class="hljs-variable">$1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;DELETE_REMOTE_FILE_FLG&#125;</span> &amp;&amp; <span class="hljs-variable">$&#123;FTP_FLG&#125;</span>; <span class="hljs-keyword">then</span><br>        ftp -<span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;FTP_HOST&#125;</span> 2&gt;&amp;1 &gt;&gt; <span class="hljs-variable">$&#123;LOGFILE&#125;</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">user $FTP_USER $FTP_PASS</span><br><span class="hljs-string">cd $FTP_DIR</span><br><span class="hljs-string">del $FILENAME</span><br><span class="hljs-string">quit</span><br><span class="hljs-string">EOF</span><br>        <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;FTP server&#x27;s old backup file: <span class="hljs-variable">$&#123;FILENAME&#125;</span> has been deleted&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Failed to delete FTP server&#x27;s old backup file: <span class="hljs-variable">$&#123;FILENAME&#125;</span>&quot;</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># Clean up old file</span><br><span class="hljs-function"><span class="hljs-title">clean_up_files</span></span>() &#123;<br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;LOCALDIR&#125;</span> || <span class="hljs-built_in">exit</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;ENCRYPTFLG&#125;</span>; <span class="hljs-keyword">then</span><br>        LS=($(<span class="hljs-built_in">ls</span> *.enc))<br>    <span class="hljs-keyword">else</span><br>        LS=($(<span class="hljs-built_in">ls</span> *.tgz))<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;LS[@]&#125;</span>; <span class="hljs-keyword">do</span><br>        get_file_date <span class="hljs-variable">$&#123;f&#125;</span><br>        <span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$&#123;FILEAGE&#125;</span> -gt <span class="hljs-variable">$&#123;LOCALAGEDAILIES&#125;</span> ]]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$&#123;f&#125;</span><br>                <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Old backup file name: <span class="hljs-variable">$&#123;f&#125;</span> has been deleted&quot;</span><br>                delete_gdrive_file <span class="hljs-variable">$&#123;f&#125;</span><br>                delete_ftp_file <span class="hljs-variable">$&#123;f&#125;</span><br>                delete_cos_file <span class="hljs-variable">$&#123;f&#125;</span><br>                delete_ali_file <span class="hljs-variable">$&#123;f&#125;</span><br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br>&#125;<br><br><span class="hljs-comment"># Main progress</span><br>STARTTIME=$(<span class="hljs-built_in">date</span> +%s)<br><br><span class="hljs-comment"># Check if the backup folders exist and are writeable</span><br>[ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LOCALDIR&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;LOCALDIR&#125;</span><br>[ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;TEMPDIR&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;TEMPDIR&#125;</span><br><br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Backup progress start&quot;</span><br>check_commands<br>mysql_backup<br>start_backup<br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Backup progress complete&quot;</span><br><br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Upload progress start&quot;</span><br>rclone_upload<br>ftp_upload<br>cos_upload<br>ali_upload<br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Upload progress complete&quot;</span><br><br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Cleaning up&quot;</span><br>clean_up_files<br>ENDTIME=$(<span class="hljs-built_in">date</span> +%s)<br>DURATION=$((ENDTIME - STARTTIME))<br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;All done&quot;</span><br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Backup and transfer completed in <span class="hljs-variable">$&#123;DURATION&#125;</span> seconds&quot;</span><br><br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>backup.sh</tag>
      
      <tag>COS</tag>
      
      <tag>AliyunDrive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Cloudflare Workers搭建免费OneDrive网盘</title>
    <link href="/read/Cloudflare-Workers-OneDrive.html"/>
    <url>/read/Cloudflare-Workers-OneDrive.html</url>
    
    <content type="html"><![CDATA[<h2 id="由-CloudFlare-Workers-强力驱动的-OneDrive-索引"><a href="#由-CloudFlare-Workers-强力驱动的-OneDrive-索引" class="headerlink" title="由 CloudFlare Workers 强力驱动的 OneDrive 索引"></a>由 CloudFlare Workers 强力驱动的 OneDrive 索引</h2><p>在线演示：<a href="https://one.cuojue.workers.dev/">WuYang’s Disk</a></p><blockquote><p>演示还是我那 30 多 G 的妹子图……<br><a href="/read/106.html">共享一波妹子图</a><br>由于囊中羞涩没有继续部署 PHP 版本的 OneIndex 了.<br>换用 <a href="https://github.com/spencerwooo/onedrive-cf-index">OneIndex-CF-Index</a> 后可以获得 <a href="https://workers.cloudflare.com/">Cloudflare-Workers</a> 每日 1W PV 的免费请求.</p></blockquote><hr><blockquote><p>2022-03-13 更新 程序已换到更强大的 <a href="https://github.com/spencerwooo/onedrive-vercel-index">OneIndex-Vercel-Index</a><br>例：<a href="https://one.cuojue.org/">WuYang’s Disk</a></p></blockquote><hr><blockquote><p>本文大部分内容抄自官方文档，但是补充了亲自部署时候遇到的问题和解决方法.</p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="🚀-功能一览"><a href="#🚀-功能一览" class="headerlink" title="🚀 功能一览"></a>🚀 功能一览</h3><ul><li>全新「面包屑」导航栏；</li><li>令牌凭证由 Cloudflare Workers 自动刷新，并保存于（免费的）全局 KV 存储中；</li><li>使用 <a href="https://github.com/turbolinks/turbolinks">Turbolinks®</a> 实现路由懒加载；</li><li>支持由世纪互联运营的 OneDrive 版本；</li><li>支持 SharePoint 部署；</li></ul><h3 id="🗃️-目录索引显示"><a href="#🗃️-目录索引显示" class="headerlink" title="🗃️ 目录索引显示"></a>🗃️ 目录索引显示</h3><ul><li>全新支持自定义的设计风格：<a href="themes/spencer.css">spencer.css</a>；</li><li>支持使用 Emoji 作为文件夹图标（如果文件夹名称第一位是 Emoji 则自动开启该功能）；</li><li>渲染 <code>README.md</code> 如果当前目录下包含此文件，使用 <a href="https://github.com/sindresorhus/github-markdown-css">github-markdown-css</a> 渲染样式；</li><li>支持「分页」，没有一个目录仅限显示 200 个项目的限制了！</li></ul><h3 id="📁-文件在线预览"><a href="#📁-文件在线预览" class="headerlink" title="📁 文件在线预览"></a>📁 文件在线预览</h3><ul><li>根据文件类型渲染文件图标，图标使用 <a href="https://fontawesome.com/">Font Awesome icons</a>；</li><li>支持预览：<ul><li>纯文本：<code>.txt</code>.</li><li>Markdown 格式文本：<code>.md</code>, <code>.mdown</code>, <code>.markdown</code>.</li><li>图片（支持 Medium 风格的图片缩放）：<code>.png</code>, <code>.jpg</code>, and <code>.gif</code>.</li><li>代码高亮：<code>.js</code>, <code>.py</code>, <code>.c</code>, <code>.json</code>…</li><li>PDF（支持懒加载、加载进度、Chrome 内置 PDF 阅读器）：<code>.pdf</code>.</li><li>音乐：<code>.mp3</code>, <code>.aac</code>, <code>.wav</code>, <code>.oga</code>.</li><li>视频：<code>.mp4</code>, <code>.flv</code>, <code>.webm</code>, <code>.m3u8</code>.</li></ul></li></ul><h3 id="🔒-私有文件夹"><a href="#🔒-私有文件夹" class="headerlink" title="🔒 私有文件夹"></a>🔒 私有文件夹</h3><p>我们可以给某个特定的文件夹（目录）上锁，需要认证才能访问。我们可以在 <code>src/auth/config.js</code> 文件中将我们想要设为私有文件夹的文件夹名称写入 <code>ENABLE_PATHS</code> 列表中，并将 <code>AUTH_ENABLED</code> 设置为 <code>true</code> 来开启这一功能。我们还可以自定义认证所使用的用户名 <code>NAME</code> 以及密码，其中认证密码保存于 <code>AUTH_PASSWORD</code> 环境变量中，如果需要这一功能，则需要使用 wrangler 来设置这一环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wrangler secret put AUTH_PASSWORD<br><span class="hljs-comment"># 在这里输入你自己的认证密码</span><br></code></pre></td></tr></table></figure><blockquote><p>这里注意，别略过！！！待会部署提交预览之前一定要设置，或者按照下面的提示关掉。不然会提示<code>Uncaught ReferenceError: AUTH_PASSWORD is not defined</code></p></blockquote><p>如果不需要开启这一功能，那么你可以直接注释掉定义 <code>PASS</code> 变量的那一行，使用下一行将 <code>PASS</code> 设置为空字符串即可。（另外也需要将 <code>AUTH_ENABLED</code> 设置为 <code>false</code>。）有关 wrangler 的使用细节等详细内容，请参考 <a href="#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">接下来的部分段落</a>。</p><h3 id="⬇️-代理下载文件-x2F-文件直链访问-x2F-缩略图"><a href="#⬇️-代理下载文件-x2F-文件直链访问-x2F-缩略图" class="headerlink" title="⬇️ 代理下载文件 &#x2F; 文件直链访问 &#x2F; 缩略图"></a>⬇️ 代理下载文件 &#x2F; 文件直链访问 &#x2F; 缩略图</h3><ul><li>[可选] Proxied download（代理下载文件）：<code>?proxied</code> - 经由 CloudFlare Workers 下载文件。要满足两个条件（1）<code>config/default.js</code> 中的 <code>proxyDownload</code> 为 <code>true</code>，以及（2）使用参数 <code>?proxied</code> 请求文件；</li><li>[可选] Raw file download（文件直链访问）：<code>?raw</code> - 返回文件直链而不是预览界面；</li><li>两个参数可以一起使用，即 <code>?proxied&amp;raw</code> 和 <code>?raw&amp;proxied</code> 均有效。</li></ul><h4 id="补充，缩略图的获取方式"><a href="#补充，缩略图的获取方式" class="headerlink" title="补充，缩略图的获取方式"></a>补充，缩略图的获取方式</h4><ul><li><p>[可选] thumbnail（缩略图）：<code>?thumbnail=medium</code> - 返回图片缩略图；</p><p>可用的取值参见：<a href="https://docs.microsoft.com/en-us/onedrive/developer/rest-api/api/driveitem_list_thumbnails?view=odsp-graph-online#size-options">driveitem_list_thumbnails</a><br>某些缩略图选项在非个人版 OneDrive 无法使用：<a href="#%E5%A6%82%E6%9E%9C%E9%81%87%E5%88%B0%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%BC%A9%E7%95%A5%E5%9B%BE">图片无法显示缩略图</a></p><p>是的，这也就意味着你可以将这一项目用来搭建「图床」，或者用于搭建静态文件部署服务，比如下面的图片链接：</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#small 96px</span><br>https:<span class="hljs-regexp">//</span>disk.cuojue.org/***.jpg?proxied&amp;thumbnail=small<br><br><span class="hljs-comment">#medium 176px</span><br>https:<span class="hljs-regexp">//</span>disk.cuojue.org/***.jpg?proxied&amp;thumbnail=medium<br><br><span class="hljs-comment">#large 800px</span><br>https:<span class="hljs-regexp">//</span>disk.cuojue.org/***.jpg?proxied&amp;thumbnail=large<br></code></pre></td></tr></table></figure><p><img src="https://disk.cuojue.org/p/OneDrive/%E5%9B%BE%E7%89%87/%E5%A6%B9%E5%AD%90%E5%9B%BE/2017062317353_5796/%E5%86%99%E7%9C%9F-3/3%20(1).jpg?type=small"><br><img src="https://disk.cuojue.org/p/OneDrive/%E5%9B%BE%E7%89%87/%E5%A6%B9%E5%AD%90%E5%9B%BE/2017062317353_5796/%E5%86%99%E7%9C%9F-3/3%20(1).jpg?type=medium"><br><img src="https://disk.cuojue.org/p/OneDrive/%E5%9B%BE%E7%89%87/%E5%A6%B9%E5%AD%90%E5%9B%BE/2017062317353_5796/%E5%86%99%E7%9C%9F-3/3%20(1).jpg?type=large"></p><h2 id="部署指南"><a href="#部署指南" class="headerlink" title="部署指南"></a>部署指南</h2><p><em>又臭又长的中文版部署指南预警！</em></p><h3 id="生成-OneDrive-API-令牌"><a href="#生成-OneDrive-API-令牌" class="headerlink" title="生成 OneDrive API 令牌"></a>生成 OneDrive API 令牌</h3><ol><li><p>访问此 URL 创建新的 Blade app：<a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">Microsoft Azure App registrations</a>（普通版 OneDrive）或 <a href="https://portal.azure.cn/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">Microsoft Azure.cn App registrations</a>（OneDrive 世纪互联版本），<strong>建议将语言设置为「英语」以保证以下步骤中提到的模块和按钮的名称一致</strong>：</p><ol><li>使用你的 Microsoft 账户登录，选择 <code>New registration</code>；</li><li>在 <code>Name</code> 处设置 Blade app 的名称，比如 <code>my-onedrive-cf-index</code>；</li><li>将 <code>Supported account types</code> 设置为 <code>Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)</code>。OneDrive 世纪互联用户设置为：<code>任何组织目录（任何 Azure AD 目录 - 多租户）中的帐户</code>；</li><li>将 <code>Redirect URI (optional)</code> 设置为 <code>Web</code>（下拉选项框）以及 <code>https://localhost</code>（URL 地址）；</li><li>点击 <code>Register</code>.</li></ol><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/Cloudflare-Workers-OneDrive-1.png"></p></li><li><p>在 <code>Overview</code> 面板获取你的 Application (client) ID - <code>client_id</code>：</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/Cloudflare-Workers-OneDrive-2.png"></p></li><li><p>打开 <code>Certificates &amp; secrets</code> 面板，点击 <code>New client secret</code>，创建一个新的叫做 <code>client_secret</code> 的 Client secret，并将 <code>Expires</code> 设置为 <code>Never</code>。点击 <code>Add</code> 并复制 <code>client_secret</code> 的 <code>Value</code> 并保存下来 <strong>（仅有此一次机会）</strong>：</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/Cloudflare-Workers-OneDrive-3.png"></p></li><li><p>打开 <code>API permissions</code> 面板，选择 <code>Microsoft Graph</code>，选择 <code>Delegated permissions</code>，并搜索 <code>offline_access, Files.Read, Files.Read.All</code> 这三个权限，<strong>选择这三个权限，并点击 <code>Add permissions</code>：</strong></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/Cloudflare-Workers-OneDrive-4.png"></p><p>你应该成功开启这三个权限：</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/Cloudflare-Workers-OneDrive-5.png"></p></li><li><p>获取 <code>refresh_token</code></p><ul><li><em>本地获取</em> （需要 Node.js 和 npm 环境，安装和推荐配置请参考 <a href="#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">准备工作</a>）上面执行如下命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npx @beetcb/ms-graph-cli<br></code></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/Cloudflare-Workers-OneDrive-1.svg"><br>根据你自己的情况选择合适的选项，并输入我们上面获取到的一系列 token 令牌配置等，其中 <code>redirect_url</code> 可以直接设置为 <code>http://localhost</code>。有关命令行工具的具体使用方法请参考：<a href="https://github.com/beetcb/ms-graph-cli">beetcb&#x2F;ms-graph-cli</a>。</p><ul><li><em>在线获取</em></li></ul><p>访问：<a href="https://heymind.github.io/tools/microsoft-graph-api-auth">Microsoft Graph API Auth</a> 获取</p></li><li><p>最后，在我们的 OneDrive 中创建一个公共分享文件夹，比如 <code>/Public</code> 即可。<strong>建议不要直接分享根目录!</strong></p><p>最后，这么折腾完，我们应该成功拿到如下的几个凭证：</p><ul><li><code>refresh_token</code></li><li><code>client_id</code></li><li><code>client_secret</code></li><li><code>redirect_uri</code></li><li><code>base</code>：默认为 <code>/Public</code>。</li></ul><p><em>是，我知道很麻烦，但是这是微软，大家理解一下。🤷🏼‍♂️</em></p></li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>Fork 再 clone 或者直接 clone <a href="https://github.com/spencerwooo/onedrive-cf-index">onedrive-cf-index</a>，并安装依赖 Node.js、<code>npm</code> 以及 <code>wrangler</code>。</p><p><em>强烈建议大家使用 Node version manager 比如 <a href="https://github.com/tj/n">n</a> 或者 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装 Node.js 和 <code>npm</code>，这样我们全局安装的 <code>wrangler</code> 就可以在我们的用户目录下安装保存配置文件了，也就不会遇到奇奇怪怪的权限问题了。</em></p><blockquote><p>以下直接用 npm 安装可能失败，请看<a href="#%E6%9C%AC%E8%8A%82%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">本节可能遇到的问题</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 CloudFlare Workers 官方编译部署工具</span><br>npm i @cloudflare/wrangler -g<br><br><span class="hljs-comment"># 使用 npm 安装依赖</span><br>npm install<br><br><span class="hljs-comment"># 使用 wrangler 登录 CloudFlare 账户</span><br>wrangler login<br><br><span class="hljs-comment"># 使用这一命令检查自己的登录状态</span><br>wrangler <span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p>打开 <a href="https://dash.cloudflare.com/login">https://dash.cloudflare.com/login</a> 登录 CloudFlare，选择自己的域名，<strong>再向下滚动一点，我们就能看到右侧栏处我们的 <code>account_id</code> 以及 <code>zone_id</code> 了。</strong> 同时，在 <code>Workers</code> -&gt; <code>Manage Workers</code> -&gt; <code>Create a Worker</code> 处创建一个 <strong>DRAFT</strong> worker。</p><p>修改我们的 <a href="wrangler.toml"><code>wrangler.toml</code></a>：</p><ul><li><code>name</code>：就是我们刚刚创建的 draft worker 名称，我们的 Worker 默认会发布到这一域名下：<code>&lt;name&gt;.&lt;worker_subdomain&gt;.workers.dev</code>；</li><li><code>account_id</code>：我们的 Cloudflare Account ID；</li><li><code>zone_id</code>：我们的 Cloudflare Zone ID。</li></ul><p>创建叫做 <code>BUCKET</code> 的 Cloudflare Workers KV bucket：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建 KV bucket</span><br>wrangler kv:namespace create <span class="hljs-string">&quot;BUCKET&quot;</span><br><br><span class="hljs-comment"># ... 或者，创建包括预览功能的 KV bucket</span><br>wrangler kv:namespace create <span class="hljs-string">&quot;BUCKET&quot;</span> --preview<br></code></pre></td></tr></table></figure><p>修改 <a href="wrangler.toml"><code>wrangler.toml</code></a> 里面的 <code>kv_namespaces</code>：</p><ul><li><code>kv_namespaces</code>：我们的 Cloudflare KV namespace，仅需替换 <code>id</code> 和（或者）<code>preview_id</code> 即可。<em>如果不需要预览功能，那么移除 <code>preview_id</code> 即可。</em></li></ul><p>修改 <a href="src/config/default.js"><code>src/config/default.js</code></a>：</p><ul><li><code>client_id</code>：刚刚获取的 OneDrive <code>client_id</code>；</li><li><code>base</code>：之前创建的 <code>base</code> 目录；</li><li>如果你部署常规国际版 OneDrive，那么忽略以下步骤即可；</li><li>如果你部署的是由世纪互联运营的中国版 OneDrive：<ul><li>修改 <code>type</code> 下的 <code>accountType</code> 为 <code>1</code>；</li><li>保持 <code>driveType</code> 不变；</li></ul></li><li>如果你部署的是 SharePoint 服务：<ul><li>保持 <code>accountType</code> 不变；</li><li>修改 <code>driveType</code> 下的 <code>type</code> 为 <code>1</code>；</li><li>并根据你的 SharePoint 服务修改 <code>hostName</code> 和 <code>sitePath</code>。</li></ul></li></ul><p>使用 <code>wrangler</code> 添加 Cloudflare Workers 环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 添加我们的 refresh_token 和 client_secret</span><br>wrangler secret put REFRESH_TOKEN<br><span class="hljs-comment"># ... 并在这里粘贴我们的 refresh_token</span><br><br>wrangler secret put CLIENT_SECRET<br><span class="hljs-comment"># ... 并在这里粘贴我们的 client_secret</span><br></code></pre></td></tr></table></figure><h4 id="本节可能遇到的问题"><a href="#本节可能遇到的问题" class="headerlink" title="本节可能遇到的问题"></a>本节可能遇到的问题</h4><p>如果你是用本地获取<code>refresh_token</code>的需要修改<code>redirect_uri</code>为<code>http://localhost</code></p><p><code>npm i @cloudflare/wrangler -g</code> 出错 <code>Error: EACCES: permission denied, access &#39;/usr/lib/node_modules&#39;</code><br>安装<code>wrangler</code>的时候权限不足，即使<code>sudo npm i @cloudflare/wrangler -g</code>也会出错<br>这时候只能给它安装到当前项目了。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install @cloudflare/wrangler --save<br></code></pre></td></tr></table></figure><p><em>注意，即使使用 <code>sudo npm install -g @cloudflare/wrangler --unsafe-perm=true --allow-root</code> 后面也会不能正常使用</em></p><h3 id="编译与部署"><a href="#编译与部署" class="headerlink" title="编译与部署"></a>编译与部署</h3><p>我们可以使用 <code>wrangler</code> 预览部署：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wrangler preview<br></code></pre></td></tr></table></figure><p>如果一切顺利，我们即可使用如下命令发布 Cloudflare Worker：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wrangler publish<br></code></pre></td></tr></table></figure><h4 id="本节可能遇到的问题-1"><a href="#本节可能遇到的问题-1" class="headerlink" title="本节可能遇到的问题"></a>本节可能遇到的问题</h4><ul><li><p>错误内容<code>getAccessToken</code><br>如果你确定上面填写的内容都正常，那么可能是遇到了<code>refresh_token</code>过长<code>secret</code>保存失败……</p><p>解决方法：使用 KV 来保存<code>refresh_token</code></p><p>首先还是一样的操作，拿到 refresh_token 之后，在 Cloudflare Workers → KV 里面的 BUCKET namespace 中创建一个新的 entry 就叫做 refresh_token，然后把你拿到的 refresh_token 粘进去：<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/Cloudflare-Workers-OneDrive-6.png"><br>之后修改代码，在 <code>./src/auth/onedrive.js</code> 里面加一个获取 <code>refresh_token</code> 的代码：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAccessToken</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">timestamp</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() / <span class="hljs-number">1000</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> refresh_token = <span class="hljs-keyword">await</span> <span class="hljs-variable constant_">BUCKET</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;refresh_token&#x27;</span>)<br><br>  <span class="hljs-comment">// 之后所有的 config.refresh_token 都直接改为 refresh_token</span><br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>顺便还要把其他原有定义了 <code>REFRESH_TOKEN</code> 的地方删掉（比如 <code>./src/config/default.js</code> 里面的 <code>refresh_token: REFRESH_TOKEN,</code> 一行）。</p><h2 id="样式、内容的自定义"><a href="#样式、内容的自定义" class="headerlink" title="样式、内容的自定义"></a>样式、内容的自定义</h2><ul><li>我们 <strong>应该</strong> 更改默认「着落页面」，直接修改 <code>src/folderView.js</code>#L51-L55) 中 <code>intro</code> 的 HTML 即可；</li><li>我们也 <strong>应该</strong> 更改页面的 header，直接修改 <code>src/render/htmlWrapper.js</code>#L24 即可；</li><li>样式 CSS 文件位于 <code>themes/spencer.css</code>，可以根据自己需要自定义此文件，同时也需要更新 <code>src/render/htmlWrapper.js</code>#L3 文件中的 commit HASH；</li><li>我们还可以自定义 Markdown 渲染 CSS 样式、PrismJS 代码高亮样式，等等等。</li></ul><h2 id="如果遇到图片无法显示缩略图"><a href="#如果遇到图片无法显示缩略图" class="headerlink" title="如果遇到图片无法显示缩略图"></a>如果遇到图片无法显示缩略图</h2><blockquote><p>如果使用的不是个人版 OneDrive，下面带<code>Crop</code>的选项可能无法正常显示缩略图</p></blockquote><table><thead><tr><th align="left">Name</th><th align="left">Resolution</th><th align="left">Aspect Ratio</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>small</code></td><td align="left">96 longest</td><td align="left">Original</td><td align="left">Small, highly compressed thumbnail cropped to a square aspect ratio.</td></tr><tr><td align="left"><code>medium</code></td><td align="left">176 longest</td><td align="left">Original</td><td align="left">Cropped to the standard item size for the OneDrive web view.</td></tr><tr><td align="left"><code>large</code></td><td align="left">800 longest</td><td align="left">Original</td><td align="left">Thumbnail with the longest edge resized to 800 pixels.</td></tr><tr><td align="left"><del><code>smallSquare</code></del></td><td align="left">96x96</td><td align="left">Square Crop</td><td align="left"><strong>该选项不可用，会返回 itemNotFound 错误</strong></td></tr><tr><td align="left"><del><code>mediumSquare</code></del></td><td align="left">176x176</td><td align="left">Square Crop</td><td align="left"><strong>该选项不可用，会返回 itemNotFound 错误</strong></td></tr><tr><td align="left"><del><code>largeSquare</code></del></td><td align="left">800x800</td><td align="left">Square Crop</td><td align="left"><strong>该选项不可用，会返回 itemNotFound 错误</strong></td></tr></tbody></table><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">https://disk.cuojue.org/***.jpg?proxied&amp;thumbnail=c300x400  #正常<br>https://disk.cuojue.org/***.jpg?proxied&amp;thumbnail=c300x400_Crop  #不可用<br></code></pre></td></tr></table></figure><hr><p>最后，感谢作者 <a href="https://blog.spencerwoo.com/">Spencer Woo</a>. 为我们带来如此强大的程序！</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OneDrive</tag>
      
      <tag>Cloudflare</tag>
      
      <tag>Workers</tag>
      
      <tag>OneIndex-CF-Index</tag>
      
      <tag>OneIndex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次使用PWA(ServiceWorker)后懒加载失效解决</title>
    <link href="/read/fix-hexo-fluid-theme-comments-and-images.html"/>
    <url>/read/fix-hexo-fluid-theme-comments-and-images.html</url>
    
    <content type="html"><![CDATA[<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>2022-03-09<br>由于 文章时效性提示 会导致懒加载和其他插件异常（因为用了 innerHTML）。改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">posts[0].insertAdjacentHTML(&#x27;afterbegin&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-warning&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:0.9rem&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#x27; +<br>  &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h6&quot;</span>&gt;</span>文章时效性提示<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一篇发布于 &#x27; + days + &#x27; 天前的文章，部分信息可能已发生改变，请注意甄别。&#x27; +<br>  &#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;);<br></code></pre></td></tr></table></figure><p>后正常</p><h3 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h3><p><del>不知道是哪方的 BUG，首次加载和 http&#x2F;s 下加载都正常。</del></p><p><del>而在 ServiceWorker 下， IntersectionObserver.entries.isIntersecting 返回都是 false，导致评论框和 lazyload 图片不显示。</del></p><p>导致问题的原因是 PWA 加载太快，导致 DOM 还没渲染完成就执行了<code>io.observe(document.getElementById(targetId));</code><br>并且由于没有获取到元素信息(<code>entries[0].intersectionRect</code>为空)，所以就不会有元素可视的回调。<br>解决方案就是增加失败后 Rollback 到 <code>scroll</code> 模式判断是否可见。详见下面的代码。</p><h4 id="函数位置"><a href="#函数位置" class="headerlink" title="函数位置"></a>函数位置</h4><p><code>/source/js/utils.js</code><br><code>waitElementVisible</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> io = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">entries, ob</span>) &#123;<br>  <span class="hljs-keyword">if</span> (entries[<span class="hljs-number">0</span>].<span class="hljs-property">isIntersecting</span>) &#123; <span class="hljs-comment">//在service worker下,返回的都是false</span><br>    callback &amp;&amp; <span class="hljs-title function_">callback</span>();<br>    ob.<span class="hljs-title function_">disconnect</span>();<br>  &#125;<br>&#125;, &#123;<br>  threshold : [<span class="hljs-number">0</span>],<br>  <span class="hljs-attr">rootMargin</span>: (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>) + <span class="hljs-string">&#x27;px&#x27;</span><br>&#125;);<br>io.<span class="hljs-title function_">observe</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(targetId));<br></code></pre></td></tr></table></figure><hr><h3 id="解决方法-x2F-思路"><a href="#解决方法-x2F-思路" class="headerlink" title="解决方法&#x2F;思路"></a>解决方法&#x2F;思路</h3><h4 id="评论换成-js-判断加载"><a href="#评论换成-js-判断加载" class="headerlink" title="评论换成 js 判断加载"></a>评论换成 js 判断加载</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  <span class="hljs-keyword">if</span> (!isBot &amp;&amp; runningOnBrowser)&#123;<span class="hljs-comment">// &amp;&amp; supportsIntersectionObserver) &#123;</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;attachEvent&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&quot;scroll&quot;</span>, _callback);<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;addEventListener&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, _callback);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">_callback</span>(<span class="hljs-params"></span>) &#123;<br> <span class="hljs-keyword">const</span> _target = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(targetId);<br> <span class="hljs-comment">//滚动条高度+视窗高度 = 可见区域底部高度</span><br> <span class="hljs-keyword">let</span> visibleBottom = <span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>;<br> <span class="hljs-comment">//可见区域顶部高度</span><br> <span class="hljs-keyword">let</span> visibleTop = <span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span>;<br> <span class="hljs-keyword">let</span> centerY = _target.<span class="hljs-property">offsetTop</span> + (_target.<span class="hljs-property">offsetHeight</span> / <span class="hljs-number">2</span>);<br> <span class="hljs-keyword">if</span> (centerY &gt; visibleTop &amp;&amp; centerY &lt; visibleBottom) &#123;<br> <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;attachEvent&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, _callback);<br> <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;addEventListener&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, _callback);<br>callback &amp;&amp; <span class="hljs-title function_">callback</span>();<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="新的方法"><a href="#新的方法" class="headerlink" title="新的方法"></a>新的方法</h4><p>更新 2021 年 03 月 17 日 19 点 10 分</p><blockquote><p>直接重写整个<code>waitElementVisible</code>函数，正常的情况下使用<code>IntersectionObserver</code>，失败的情况下回退到使用<code>scroll</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">waitElementVisible</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">targetId, callback</span>) &#123;<br>  <span class="hljs-keyword">var</span> runningOnBrowser = <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>;<br>  <span class="hljs-keyword">var</span> isBot = (runningOnBrowser &amp;&amp; !(<span class="hljs-string">&#x27;onscroll&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)) || (<span class="hljs-keyword">typeof</span> navigator !== <span class="hljs-string">&#x27;undefined&#x27;</span><br>      &amp;&amp; <span class="hljs-regexp">/(gle|ing|ro|msn)bot|crawl|spider|yand|duckgo/i</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>));<br>  <span class="hljs-keyword">var</span> supportsIntersectionObserver = <span class="hljs-string">&#x27;IntersectionObserver&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>;<br>  <span class="hljs-keyword">var</span> attachEvent = <span class="hljs-string">&#x27;attachEvent&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>;<br>  <span class="hljs-keyword">var</span> addEventListener = <span class="hljs-string">&#x27;addEventListener&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>;<br>  <span class="hljs-keyword">if</span> (!isBot &amp;&amp; runningOnBrowser &amp;&amp; (attachEvent || addEventListener)) &#123;<br>    <span class="hljs-keyword">var</span> _scroll = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> _callback = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> _target = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(targetId);<br>        <span class="hljs-comment">//滚动条高度+视窗高度 = 可见区域底部高度</span><br>        <span class="hljs-keyword">var</span> visibleBottom = <span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>;<br>        <span class="hljs-comment">//可见区域顶部高度</span><br>        <span class="hljs-keyword">var</span> visibleTop = <span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span>;<br>        <span class="hljs-keyword">var</span> centerY = _target.<span class="hljs-property">offsetTop</span> + (_target.<span class="hljs-property">offsetHeight</span> / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (centerY &gt; visibleTop &amp;&amp; centerY &lt; visibleBottom) &#123;<br>          <span class="hljs-keyword">if</span> (attachEvent)<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, _callback);<br>          <span class="hljs-keyword">if</span> (addEventListener)<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, _callback);<br>          callback &amp;&amp; <span class="hljs-title function_">callback</span>();<br>        &#125;<br>      &#125;;<br>      <span class="hljs-keyword">if</span> (attachEvent)<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, _callback);<br>      <span class="hljs-keyword">if</span> (addEventListener)<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, _callback);<br>    &#125;;<br>    <span class="hljs-keyword">if</span> (supportsIntersectionObserver) &#123;<br>      <span class="hljs-keyword">var</span> io = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">entries, ob</span>) &#123;<br>        <span class="hljs-comment">//如果失败，回退到scroll方式</span><br>        <span class="hljs-keyword">if</span> (entries[<span class="hljs-number">0</span>].<span class="hljs-property">intersectionRect</span>.<span class="hljs-property">x</span> &lt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-title function_">_scroll</span>(); ob.<span class="hljs-title function_">disconnect</span>(); <span class="hljs-keyword">return</span>; &#125;<br>        <span class="hljs-keyword">if</span> (entries[<span class="hljs-number">0</span>].<span class="hljs-property">isIntersecting</span>) &#123;<br>          callback &amp;&amp; <span class="hljs-title function_">callback</span>();<br>          ob.<span class="hljs-title function_">disconnect</span>();<br>        &#125;<br>      &#125;, &#123;<br>        threshold : [<span class="hljs-number">0</span>],<br>        <span class="hljs-attr">rootMargin</span>: (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>) + <span class="hljs-string">&#x27;px&#x27;</span><br>      &#125;);<br>      io.<span class="hljs-title function_">observe</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(targetId));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">_scroll</span>();<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    callback &amp;&amp; <span class="hljs-title function_">callback</span>();<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="图片加载我直接换了一个库"><a href="#图片加载我直接换了一个库" class="headerlink" title="图片加载我直接换了一个库"></a>图片加载我直接换了一个库</h4><p>使用了<code>lazyloadjs.cn</code>的 js 加载</p><p><code>scripts/events/lib/lazyload.js</code>第 32-35 行改为</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span> (<span class="hljs-regexp">/data-src=/i</span>.test(str)) &#123;<br>  <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-keyword">return</span> str.<span class="hljs-built_in">replace</span>(p1, <span class="hljs-string">`<span class="hljs-subst">$&#123;loadingImage&#125;</span>&quot; class=&quot;lazyload&quot; data-src=&quot;<span class="hljs-subst">$&#123;p1&#125;</span>`</span>);<br><br></code></pre></td></tr></table></figure><p>如果开启了 progressbar，相应的<code>/source/js/plugins.js</code>内</p><p><code>var images = $(&#39;main img:not([srcset])&#39;);</code></p><p>也要修改为</p><p><code>var images = $(&#39;main img:not([data-src])&#39;);</code></p><hr><p>至此修改完成.<br>题外话。提交了 pr 到 fluid-dev,结果失败,出现了 50 多个错误,看了一下,竟然全都是语法错误,惭愧惭愧</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>hexo-theme</tag>
      
      <tag>theme</tag>
      
      <tag>Fluid</tag>
      
      <tag>PWA</tag>
      
      <tag>ServiceWorker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>把博客程序从 typecho 换成了 Hexo</title>
    <link href="/read/typecho-to-hexo.html"/>
    <url>/read/typecho-to-hexo.html</url>
    
    <content type="html"><![CDATA[<h3 id="为什么要换掉-typecho"><a href="#为什么要换掉-typecho" class="headerlink" title="为什么要换掉 typecho"></a>为什么要换掉 typecho</h3><hr><p>之前白嫖的学生机要到期了，是时候给博客换个归宿了。<br>博客原本的程序是 typecho 现在换到了 Hexo . 为什么呢？免费服务香啊！</p><blockquote><p>现在所有用到的服务，只有这个域名是花钱的。</p></blockquote><p>具体是那些呢</p><p>博客程序：<a href="https://hexo.io/">Hexo</a><br>评论程序：<a href="https://twikoo.js.org/">Twikoo</a><br>托管服务：Github + <a href="https://vercel.com/">Vercel</a> + <a href="https://www.netlify.com/">Netlify</a> + Cloudflare Pages(已经毙了,会自动去掉结尾 html,无法手动设置)<br>CDN：腾讯云 + 阿里云 + 又拍云</p><p>源码托管在 Github 的私有仓库，提交后由 Vercel 和 Netlify 自动编译出静态网站，腾讯云 CDN 源站设置 Vercel 和 Netlify 相互热备，然后 Github Action 自动刷新 CDN 缓存资源。</p><hr><h3 id="记录一下迁移过程"><a href="#记录一下迁移过程" class="headerlink" title="记录一下迁移过程"></a>记录一下迁移过程</h3><h4 id="备份-typecho-的文章数据"><a href="#备份-typecho-的文章数据" class="headerlink" title="备份 typecho 的文章数据"></a>备份 typecho 的文章数据</h4><p>这里用到的是 <a href="https://github.com/lizheming/typecho-export-hugo">Export2Hugo</a> 插件导出所有文章。<br>不过插件内写的都是 <code>exec</code> .一般用 PHP 都屏蔽了这种命令，只能小改一下啦。<br>打开<code>Action.php</code>改第 29 行的<code>$dir</code>直接改成一个当前能访问的绝对地址。<br>正常前台现在点击备份，会在这个目录生成所有的文章啦~</p><h4 id="备份-typecho-的评论数据"><a href="#备份-typecho-的评论数据" class="headerlink" title="备份 typecho 的评论数据"></a>备份 typecho 的评论数据</h4><p>评论用的 <a href="https://github.com/AyagawaSeirin/TypechoToHexo">TypechoToHexo</a> 插件导出。</p><blockquote><p>为什么文章不用这个呢？最开始用的也是这个插件，导出的有些问题……</p></blockquote><p>评论导出还挺好使的。</p><p>导出单页评论需要修改 <code>comments_page.php</code> 里的 <code>$url</code> 和 <code>$cid</code>,由多少个单页就需要导出几次</p><p>导出 json 的文件可以直接在 Twikoo 里导入，兼容 Valine 格式</p><h4 id="需要优化的地方"><a href="#需要优化的地方" class="headerlink" title="需要优化的地方"></a>需要优化的地方</h4><p>博客之前地址用的都是自定义 slug，所以需要修改 Hexo 的<code>permalink: read/:uri.html</code> (刚好 slug 是内置变量，无法自定义，只能改个命名用 uri)</p><p>所有之前主题使用的自定义内部链接要修改成通用链接……</p><p>导出的图片需要修改 URL</p><p>导出的评论内表情都是::QQ:Y:qq1::这种类型的，需要手动转成<code>&lt;img&gt;</code>标签的图片存储，不过之前和现在都是兼容 OwO 格式，转换起来还是很方便。<br>然后修改 OwO 的链接，又可以用上之前的表情啦~</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>好久没有管博客了。等有空<del>写几篇</del>(水几篇)文章分享如何搭建这些服务吧</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typecho</tag>
      
      <tag>Hexo</tag>
      
      <tag>Twikoo</tag>
      
      <tag>Vercel</tag>
      
      <tag>Netlify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo的外链转内链插件</title>
    <link href="/read/hexo-filter-links.html"/>
    <url>/read/hexo-filter-links.html</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-的外链转内链插件"><a href="#Hexo-的外链转内链插件" class="headerlink" title="Hexo 的外链转内链插件"></a>Hexo 的外链转内链插件</h2><p>这个插件的功能就是把所有的外部链接转换成类似<code>https://cuojue.org/go/#aHR0cDovL2N1b2p1ZS5vcmc=</code>的链接形式</p><blockquote><p>初衷是博客从 typecho 切换到了 Hexo，然后找了一圈都没有这种插件. ( 有一个竟然是用 js 在前端替换实现的，掩耳盗铃？<a href="https://github.com/hvnobug/hexo-external-link">hexo-external-link</a> ) .最后无奈只能自己写一个了……</p></blockquote><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><hr><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm i hexo-filter-links --save<br></code></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>去 <code>_config.yml</code> 添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">&quot;site&quot;</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;exclude1.com&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;exclude2.com&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*.exclude2.com&quot;</span> <span class="hljs-comment">#1.0.4及以上版本支持</span><br></code></pre></td></tr></table></figure><h5 id="配置项解释"><a href="#配置项解释" class="headerlink" title="配置项解释"></a>配置项解释</h5><ul><li><strong>enable</strong> - 开启或者关闭插件，默认是开 <code>true</code>.</li><li><strong>field</strong> - 设置生效插件范围，一共有两种选项 ‘site’ 和 ‘post’， 默认是全站 <code>site</code>.<ul><li>‘post’ - 仅在内容页启用</li><li>‘site’ - 在全站都启用</li></ul></li><li><strong>exclude</strong> - 排除不需要转换的域名，绝对匹配，带 <code>www</code> 和不带的是需要加两条.<ul><li>‘exclude1.com’ 不包括 <code>www.exclude1.com</code> 和 <code>en.exclude1.com</code>.</li><li>‘*.exclude2.com’ 包括 <code>www.exclude2.com</code> 和 <code>en.exclude2.com</code>.</li></ul></li></ul><hr><h4 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h4><ul><li>v1.0.4<ul><li>支持排除通配符域名</li></ul></li><li>v1.0.6<ul><li>修改<code>?</code>(search)为<code>#</code>(hash)避免某些 CDN 不缓存<code>go</code>页面</li></ul></li></ul><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>参考了官方插件 <code>hexo-filter-nofollow</code> 的实现并继承了它的功能。<br>也就是本插件也包含了 <code>nofollow</code> 功能。</p><p>参考实现：<a href="https://github.com/hexojs/hexo-filter-nofollow">hexo-filter-nofollow</a></p><p>源码地址：<a href="https://github.com/naicfeng/hexo-filter-links">GitHub</a></p><p>演示地址：上面两个链接就是啦~</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>hexo-filter-links</tag>
      
      <tag>plugins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>零成本搭建一个服务器/网站状态检测页</title>
    <link href="/read/create_server_status_website.html"/>
    <url>/read/create_server_status_website.html</url>
    
    <content type="html"><![CDATA[<p>演示地址：<a href="https://status.cuojue.org/">https://status.cuojue.org</a></p><h2 id="注册账户和添加检测项目"><a href="#注册账户和添加检测项目" class="headerlink" title="注册账户和添加检测项目"></a>注册账户和添加检测项目</h2><h3 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h3><ol><li><p>先要有一个 <a href="https://github.com/" title="GitHub">GitHub</a> 或 <a href="https://gitlab.com/" title="GitLab">GitLab</a> 或 <a href="https://bitbucket.org/" title="Bitbucket">Bitbucket</a> 账号</p></li><li><p>然后去 <a href="https://uptimerobot.com/">https://uptimerobot.com</a> 注册一个账户</p></li><li><p>登录 <a href="https://vercel.com/login">https://vercel.com/login</a> (用上面的账户直接登录)</p></li></ol><h3 id="添加需要检测的网站-x2F-服务器"><a href="#添加需要检测的网站-x2F-服务器" class="headerlink" title="添加需要检测的网站&#x2F;服务器"></a>添加需要检测的网站&#x2F;服务器</h3><blockquote><p>uptimerobot 免费支持 50 个网站&#x2F;服务器的检测，并且提供 API</p></blockquote><p>登录 uptimerobot 后点击“Add New Monitor”添加需要检测的服务</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/1532070197.jpg" alt="2.jpg"></p><p>添加完毕就可以使用自带的 Status pages ，不过地址被 she 会 zhu 义高 wall 挡了……（所以才有了这篇水文）</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/2288733366.jpg" alt="3.jpg"></p><h3 id="获取-API-密钥"><a href="#获取-API-密钥" class="headerlink" title="获取 API 密钥"></a>获取 API 密钥</h3><p>在 uptimerobot 网站点击头部 “My Settings”进入设置，拉到最下面“API Settings”点击“Show&#x2F;hide it.”<br>复制你的 API 备用</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/3242396119.jpg" alt="4.jpg"></p><h3 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站</h3><h3 id="在-vercel-创建项目"><a href="#在-vercel-创建项目" class="headerlink" title="在 vercel 创建项目"></a>在 vercel 创建项目</h3><p>以 GitHub 为例<br>Fork 这个项目 <a href="https://github.com/yb/uptime-status">https://github.com/yb/uptime-status</a><br>修改 public&#x2F;config.js 内的 ApiKeys 为刚才获取到的</p><p>在 vercel 选择“New Project”<br>然后在“Import Git Repository”选择刚才 Fork 的库<br>点击“Import”，后面都默认下一步，即可创建成功</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/3575079124.jpg" alt="5.jpg"></p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>创建完毕会自动转到“Overview”页<br>在当前页点击“View Domains”即可绑定自己的域名<br>绑定的域名可以用 Cname 或者 NS 方式接入<br>检测到域名指向成功后会自动申请 Let’s Encrypt 证书，支持 SSL 访问</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2021/03/1346083044.jpg" alt="6.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分享去日志记录版本的 LSPosed</title>
    <link href="/read/lsposed.html"/>
    <url>/read/lsposed.html</url>
    
    <content type="html"><![CDATA[<p>LSPosed 是一个利用 LSPlant Hook 提供与原版 Xposed 一致 API 的 Riru &#x2F; Zygisk 模块</p><blockquote><p>Xposed 框架是一款可以在不修改 APK 的情况下影响程序运行（修改系统）的框架服务，基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。</p></blockquote><span id="more"></span><h3 id="为什么要禁用日志"><a href="#为什么要禁用日志" class="headerlink" title="为什么要禁用日志"></a>为什么要禁用日志</h3><p>日志功能是为了开发者定位代码问题的手段，一般在 Debug 版本包含详细日志<br>模块质量参差不齐的今天，某些开发者滥用日志功能，日常使用记录不必要的日志会导致不必要的性能开销</p><blockquote><p>我们并不能保证模块作者不滥用日志功能！所以日常使用需要完全禁用日志！</p></blockquote><h3 id="最近更新时间"><a href="#最近更新时间" class="headerlink" title="最近更新时间"></a>最近更新时间</h3><p id="loaduptime">正在获取最近更新时间...</p><blockquote><p>已配置 <a href="https://github.com/naicfeng/LSPosed/actions/workflows/pull.yml">自动同步</a> 任务<br>如果没有代码冲突，将会每隔 8 小时自动同步<a href="https://github.com/LSPosed/LSPosed">官方</a>更新并自动编译发布新版到本页</p></blockquote><h3 id="支持的-Android-版本"><a href="#支持的-Android-版本" class="headerlink" title="支持的 Android 版本"></a>支持的 Android 版本</h3><p>Android 8.1 ~ 13</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>首先安装 <a href="https://github.com/topjohnwu/Magisk/releases">Magisk</a> v23+ (Riru) &#x2F; v24+ (Zygisk)</li><li>如果使用 Riru 模式，还需要先安装 <a href="https://github.com/RikkaApps/Riru/releases">Riru</a> v25 或以上版本</li><li><a href="#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80">下载</a> 并且在 Magisk 程序内安装 LSPosed</li><li>重启设备</li><li>按照提示将 LSPosed 图标添加到桌面<ul><li>某些系统不会提示，直接就会显示在桌面</li><li>如果没有提示也没有图标，可以在 <code>/data/adb/lspd/manager.apk</code> 手动找到管理器安装包安装</li><li>如果你不小心删掉了图标，可以重启恢复或者手动安装管理器</li><li>如果你不需要它显示图标，可以手动安装管理器后，在设置界面关掉这个选项</li><li>如果你的设备可以拨号，也可以在拨号盘输入 <code>*#*#5776733#*#*</code> (LSPosed 字母的九键)来启动管理器</li></ul></li><li>开始愉快的搞机</li></ol><h3 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h3><ol><li>修改了管理器图标</li><li><del>修改了管理器包名(org.lsposed.manager)</del> 官方已经改为同名</li><li>禁用了全部日志</li></ol><p>除禁用日志，其他部分保持与官方的同步</p><h3 id="界面预览"><a href="#界面预览" class="headerlink" title="界面预览"></a>界面预览</h3><!--![主页面](https://npm.elemecdn.com/nacdn@1.0.48/blog/static/files/2022/04/lsposed-1.jpg)![关于页](https://npm.elemecdn.com/nacdn@1.0.48/blog/static/files/2022/04/lsposed-2.jpg) --><p><img src="https://npm.elemecdn.com/nacdn@1.0.48/blog/static//files/2022/04/lsposed-3.jpg" alt="设置页"></p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>只接受日志还存在的反馈<br>如有 LSPosed 的其他问题请使用官方(Debug)版并 <strong>携带日志</strong> 向 <a href="https://github.com/LSPosed/LSPosed/issues" title="官方Issues">官方 Issues</a> 反馈</p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><span id="hidelink"><div class="note note-warning" style="font-size:0.9rem"><p></p><div class="h6">下载地址评论后可见</div><p></p><p>评论后请刷新本页面即可看到下载地址，评论无意义内容将被拉黑导致无法下载</p><p>最近更新时间：<span id="loaduptime2">正在获取...</span></p><p></p></div></span><script>eval(function(p,a,c,k,e,r){e=function(c){return c.toString(a)};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('5 1=6.7.8("9");a 0!==1&&b!==1&&c.d(1).e&&((2.3("4").f=""),2.3("4").g("h",i(j("k=="))));',21,21,'|email|document|getElementById|hidelink|var|window|localStorage|getItem|twikoo|void|null|JSON|parse|mail|innerHTML|insertAdjacentHTML|afterbegin|decodeURIComponent|atob|JTNDZGl2JTIwY2xhc3MlM0QlMjJub3RlJTIwbm90ZS1pbmZvJTIyJTNFJTNDZGl2JTIwY2xhc3MlM0QlMjJoNiUyMiUyMHN0eWxlJTNEJTIycGFkZGluZy10b3AlM0ElMjAxcmVtJTNCJTIyJTNFJUU0JUI4JThCJUU4JUJEJUJEJUU1JTlDJUIwJUU1JTlEJTgwJUVGJUJDJTlBJTNDJTJGZGl2JTNFJTBBJTNDZGl2JTIwaWQlM0QlMjJkb3dubG9hZC11cmwlMjIlMjBzdHlsZSUzRCUyMnBhZGRpbmctYm90dG9tJTNBJTIwMXJlbSUzQiUyMiUzRSVFNiVBRCVBMyVFNSU5QyVBOCVFOCU4RSVCNyVFNSU4RiU5Ni4uLiUzQyUyRmRpdiUzRSUwQSUzQyUyRmRpdiUzRQ'.split('|'),0,{}))eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('h.O("P",i(){$.Q({R:"S",j:"n://o.p.q/U/V/W",X:"Y/10;11=12-8",4:13.14({15:"/r/s/\\t\\6\\u",16:17("k"+h.v("k")[0].w)}),18:i(a){19($("#x-j").y){1a(1b b="",c=0;c<a.4.5.y;c++)b=b+"<a 1c=1d 1e=n://o.p.q/d/r/s/%z%1f%1g%z%1h%1i%1j%1k%1l/"+a.4.5[c].l+"?A="+a.4.5[c].A+">"+a.4.5[c].l+"</a><B />";$("#x-j").7(b)}b=a.4.5[0].l.1m("-");$("#C").7((e 9(+e 9(a.4.5[0].D)+E)).F().f(/T/g," ").f(/\\.[\\d]{3}Z/,""));$("#G").7("\\t\\6\\u\\1n\\H"+b[0]+"-"+b[1]+"-"+b[2]+"<B />\\m\\6\\1o\\1p\\H"+(e 9(+e 9(a.4.5[0].D)+E)).F().f(/T/g," ").f(/\\.[\\d]{3}Z/,""))},1q:i(a){$("#G").7("\\I\\J\\m\\6\\K\\L\\M\\N");$("#C").7("\\I\\J\\m\\6\\K\\L\\M\\N")}})});h.v("k")[1].w=9.1r();',62,90,'||||data|content|u65b0|html||Date|||||new|replace||document|function|url|time|name|u66f4|https|disk|cuojue|org|NetDisk|LSPosed|u6700|u7248|getElementsByTagName|dateTime|download|length|E6|sign|br|loaduptime2|modified|288E5|toISOString|loaduptime|uff1a|u83b7|u53d6|u65e5|u671f|u5931|u8d25|addEventListener|DOMContentLoaded|ajax|type|POST||api|fs|list|contentType|application||json|charset|utf|JSON|stringify|path|password|btoa|success|if|for|var|target|_blank|href|9C|80|96|B0|E7|89|88|split|u672c|u65f6|u95f4|error|now'.split('|'),0,{}))</script><p><strong>官方是从 5000 开始计编译版本号的，我是从 2000 开始计的。不要看编译版本号比较小以为是非常古老的版本，要看更新日期！</strong></p><p>源码地址：<a href="https://github.com/naicfeng/LSPosed">GitHub</a></p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LSPosed</tag>
      
      <tag>Xposed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho简单增加页面执行时间</title>
    <link href="/read/typecho-add-total.html"/>
    <url>/read/typecho-add-total.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>执行时间只能做个参考，并不是特别精确，因为输出了时间之后，还进行了运算。</p></blockquote><span id="more"></span><p>打开根目录 <code>index.php</code></p><p>在<code>/** 载入配置支持 */</code>上面加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 加载时间</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer_start</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$timestart</span>;<br><span class="hljs-variable">$mtime</span>     = <span class="hljs-title function_ invoke__">explode</span>( <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-title function_ invoke__">microtime</span>() );<br><span class="hljs-variable">$timestart</span> = <span class="hljs-variable">$mtime</span>[<span class="hljs-number">1</span>] + <span class="hljs-variable">$mtime</span>[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">timer_start</span>();<br></code></pre></td></tr></table></figure><p>打开<code>模板文件/footer.php</code></p><p>在合适位置加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Total <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">timer_stop</span>();<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在最后加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer_stop</span>(<span class="hljs-params"> <span class="hljs-variable">$display</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$precision</span> = <span class="hljs-number">3</span> </span>) </span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$timestart</span>, <span class="hljs-variable">$timeend</span>;<br><span class="hljs-variable">$mtime</span>     = <span class="hljs-title function_ invoke__">explode</span>( <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-title function_ invoke__">microtime</span>() );<br><span class="hljs-variable">$timeend</span>   = <span class="hljs-variable">$mtime</span>[<span class="hljs-number">1</span>] + <span class="hljs-variable">$mtime</span>[<span class="hljs-number">0</span>];<br><span class="hljs-variable">$timetotal</span> = <span class="hljs-title function_ invoke__">number_format</span>( <span class="hljs-variable">$timeend</span> - <span class="hljs-variable">$timestart</span>, <span class="hljs-variable">$precision</span> );<br><span class="hljs-variable">$r</span>         = <span class="hljs-variable">$timetotal</span> &lt; <span class="hljs-number">1</span> ? <span class="hljs-variable">$timetotal</span> * <span class="hljs-number">1000</span> . <span class="hljs-string">&quot; ms&quot;</span> : <span class="hljs-variable">$timetotal</span> . <span class="hljs-string">&quot; s&quot;</span>;<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$display</span> ) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$r</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$r</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>即可</p><p>代码网上搜的，具体出处已经无从考究，<a href="https://cuojue.org/read/typecho-fastcgi_cache.html/comment-page-1#comment-410" title="有评论需要">有评论需要</a>，分享出来吧~</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一篇快速上手Clash的简单教程</title>
    <link href="/read/clash.html"/>
    <url>/read/clash.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/Dreamacro/clash" title="Clash">Clash</a> 是一个基于规则的流量过滤网络调试程序。<br>可设置多个流量出口。<br>可根据 IP、域名规则指定流量出口。<br>入口支持 Socks5&#x2F;http(S)&#x2F;Redir 等协议<br>出口支持 SS(R)&#x2F;Vmess&#x2F;Socks5&#x2F;http&#x2F;snell 等协议<br>控制提供了 RESTful API</p><p>由于是基于规则分流的网络调试工具，所以使用比较方便！</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>推荐规则项目：<a href="https://github.com/ConnersHua/Profiles" title="神机规则">神机规则</a><br>配置自动转换项目：<a href="https://github.com/tindy2013/subconverter" title="自动转换配置">自动转换配置</a></p><p>本站公益转换：<strong><a href="https://sub.789.st/">https://sub.789.st</a></strong><br>可直接转换多种订阅链接为 Clash 配置</p><p><a href="https://github.com/Dreamacro/clash/blob/master/README.md" title="官方配置文件例">官方配置文件例</a></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>用法很简单，下载二进制文件<br>这里推荐本站编译的 <a href="https://github.com/naicfeng/clash/releases" title="ClashR">ClashR</a> 比官方多增加了对 R 协议的支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clash -d .<br></code></pre></td></tr></table></figure><p>参数 D 代表指定配置文件目录，注意后面的点，代表了当前目录<br>要成功的运行，除了配置文件，还需要一个<code>Country.mmdb</code>文件，这是一份 IP 地址库，根据这份地址库，Clash 可以区分 IP 归属，做出分流</p><p>虽然运行起来了，但是只有命令行，没有 GUI，无法配置，由于程序支持 RESTful API，所以可以直接用网页配置</p><p>可直接用本站提供的地址：<strong><a href="http://c.789.st/">http://c.789.st</a></strong></p><h4 id="Country-mmdb-下载"><a href="#Country-mmdb-下载" class="headerlink" title="Country.mmdb 下载"></a>Country.mmdb 下载</h4><p><a href="https://disk.cuojue.org/cloud/ClashR_Core/Country.mmdb.zip" title="本站网盘下载">本站网盘下载</a> 已失效</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p><strong>Clash 支持透明代理</strong><br>所以在路由器上可直接运行 clash 替换 SS，并使用 RESTful API 来管理<br>由于路由器种类繁多，这里暂时略过，可搜索参考路由器 SS 配置指南</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>另还有很多各平台的 GUI 客户端<br>如：windows &#x2F; Mac OS &#x2F; Android 等，发布地址在下方</p><p><a href="https://github.com/Fndroid/clash_for_windows_pkg" title="windows">windows</a><br><a href="https://github.com/yichengchen/clashX/releases" title="Mac OS">Mac OS</a><br><a href="https://github.com/naicfeng/ClashRForAndroid/releases" title="Android">Android</a></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><span id="hidelink"><div class="note note-warning" style="font-size:0.9rem"><p></p><div class="h6">下载地址评论后可见</div><p>评论后请刷新本页面即可看到下载地址，评论无意义内容将被拉黑导致无法下载</p><p></p></div></span><script>eval(function(p,a,c,k,e,r){e=function(c){return c.toString(a)};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('5 1=6.7.8("9");a 0!==1&&b!==1&&c.d(1).e&&(2.3("4").f="",2.3("4").g("h",i(j("k=="))));',21,21,'|email|document|getElementById|hidelink|var|window|localStorage|getItem|twikoo|void|null|JSON|parse|mail|innerHTML|insertAdjacentHTML|afterbegin|decodeURIComponent|atob|JTNDZGl2JTIwY2xhc3MlM0QlMjJub3RlJTIwbm90ZS1pbmZvJTIyJTIwc3R5bGUlM0QlMjJmb250LXNpemUlM0EwLjlyZW0lMjIlM0UlM0NwJTNFJTNDJTJGcCUzRSVFNCVCOCU4QiVFOCVCRCVCRCVFNSU5QyVCMCVFNSU5RCU4MCVFRiVCQyU5QSUzQ2ElMjB0YXJnZXQlM0QlMjJfYmxhbmslMjIlMjBocmVmJTNEJTIyaHR0cHMlM0ElMkYlMkZjdW9qdWUub3JnJTJGZ28lMkYlMjNhSFIwY0hNNkx5OWthWE5yTG1OMWIycDFaUzV2Y21jdmN5OXJXR1pZUDNCaGMzTjNiM0prUFdOMWIycDFaUSUzRCUzRCUyMiUyMHRpdGxlJTNEJTIyJUU0JUI4JThCJUU4JUJEJUJEJTIyJTNFJUU2JTlDJUFDJUU3JUFCJTk5JUU3JUJEJTkxJUU3JTlCJTk4JTNDJTJGYSUzRSUzQyUyRnAlM0UlM0NwJTNFJUU4JUFFJUJGJUU5JTk3JUFFJUU1JUFGJTg2JUU3JUEwJTgxJUVGJUJDJTlBY3VvanVlJTNDJTJGcCUzRSUzQyUyRmRpdiUzRQ'.split('|'),0,{}))</script><p><a href="https://github.com/naicfeng/clash/releases" title="ClashR">GitHub</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clash</tag>
      
      <tag>clashr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享全平台ClashR Core客户端下载</title>
    <link href="/read/ClashR_Core.html"/>
    <url>/read/ClashR_Core.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>官方已支持 ssr 协议，请使用官方版<br>建议弃用 ssr 协议</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>兼容<code>Clash</code>和<code>ClashR</code>配置文件</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>直接替换原二进制文件即可</p><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>直接替换原.exe 文件即可</p><p>如使用 GUI 客户端 <strong><a href="https://github.com/Fndroid/clash_for_windows_pkg" title="clash_for_windows_pkg">clash_for_windows_pkg</a></strong><br>可进入<code>Clash.for.Windows\resources\static\files</code><br>替换<code>clash-win64.exe</code>文件，支持订阅 ClashR 配置</p><h3 id="广告时间"><a href="#广告时间" class="headerlink" title="广告时间"></a>广告时间</h3><p>推荐一个<code>在各种订阅格式之间进行转换的实用程序</code>项目 <strong><a href="https://github.com/tindy2013/subconverter" title="SubConverter">SubConverter</a></strong><br>本站公益在线配置转换 <strong><a href="https://sub.789.st/">https://sub.789.st</a></strong></p><h2 id="支持的-R-算法"><a href="#支持的-R-算法" class="headerlink" title="支持的 R 算法"></a>支持的 R 算法</h2><p><strong>Encrypting algorithm</strong></p><ul><li>aes-128-cfb</li><li>aes-192-cfb</li><li>aes-256-cfb</li><li>aes-128-ctr</li><li>aes-192-ctr</li><li>aes-256-ctr</li><li>aes-128-ofb</li><li>aes-192-ofb</li><li>aes-256-ofb</li><li>des-cfb</li><li>bf-cfb</li><li>cast5-cfb</li><li>rc4-md5</li><li>chacha20</li><li>chacha20-ietf</li><li>salsa20</li><li>camellia-128-cfb</li><li>camellia-192-cfb</li><li>camellia-256-cfb</li><li>idea-cfb</li><li>rc2-cfb</li><li>seed-cfb</li></ul><p><strong>Obfs</strong></p><ul><li>plain</li><li>http_simple</li><li>http_post</li><li>random_head</li><li>tls1.2_ticket_auth</li></ul><p><strong>Protocol</strong></p><ul><li>origin</li><li>verify_sha1 aka. one time auth(OTA)</li><li>auth_sha1_v4</li><li>auth_aes128_md5</li><li>auth_aes128_sha1</li></ul><p><em>ps:条件有限，仅测试 auth_sha1_v4，auth_aes128_md5 通过</em></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><span id="hidelink"><div class="note note-warning" style="font-size:0.9rem"><p></p><div class="h6">下载地址评论后可见</div><p>评论后请刷新本页面即可看到下载地址，评论无意义内容将被拉黑导致无法下载</p><p></p></div></span><script>eval(function(p,a,c,k,e,r){e=function(c){return c.toString(a)};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('5 1=6.7.8("9");a 0!==1&&b!==1&&c.d(1).e&&((2.3("4").f=""),2.3("4").g("h",i(j("k"))));',21,21,'|email|document|getElementById|hidelink|var|window|localStorage|getItem|twikoo|void|null|JSON|parse|mail|innerHTML|insertAdjacentHTML|afterbegin|decodeURIComponent|atob|JTNDZGl2JTIwY2xhc3MlM0QlMjJub3RlJTIwbm90ZS1pbmZvJTIyJTIwc3R5bGUlM0QlMjJmb250LXNpemUlM0EwLjlyZW0lMjIlM0UlM0NwJTNFJTNDJTJGcCUzRSVFNCVCOCU4QiVFOCVCRCVCRCVFNSU5QyVCMCVFNSU5RCU4MCVFRiVCQyU5QSUzQ2ElMjB0YXJnZXQlM0QlMjJfYmxhbmslMjIlMjBocmVmJTNEJTIyaHR0cHMlM0ElMkYlMkZjdW9qdWUub3JnJTJGZ28lMkYlMjNhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMFJ5WldGdFlXTnlieTlqYkdGemFDOXlaV3hsWVhObGN3JTNEJTNEJTIyJTIwdGl0bGUlM0QlMjIlRTQlQjglOEIlRTglQkQlQkQlMjIlM0UlRTUlQUUlOTglRTYlOTYlQjklRTQlQjglOEIlRTglQkQlQkQlM0MlMkZhJTNFJTNDJTJGcCUzRSUzQ3AlM0UlRTUlQUUlOTglRTYlOTYlQjklRTUlQjclQjIlRTYlOTQlQUYlRTYlOEMlODElMjBzc3IlMjAlRTUlOEQlOEYlRTglQUUlQUUlRUYlQkMlOEMlRTglQUYlQjclRTQlQkQlQkYlRTclOTQlQTglRTUlQUUlOTglRTYlOTYlQjklRTclODklODglM0MlMkZwJTNFJTNDJTJGZGl2JTNF'.split('|'),0,{}))</script><p><a href="https://github.com/naicfeng/Clash/releases" title="GitHub">GitHub</a></p><h2 id="Android-版"><a href="#Android-版" class="headerlink" title="Android 版"></a>Android 版</h2><p>分享一个 ClashR for Android 客户端<br><a href="https://cuojue.org/read/ClashR_for_Android.html">https://cuojue.org/read/ClashR_for_Android.html</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clash</tag>
      
      <tag>clashr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享一个ClashR for Android客户端</title>
    <link href="/read/ClashR_for_Android.html"/>
    <url>/read/ClashR_for_Android.html</url>
    
    <content type="html"><![CDATA[<p>搜了一下，发现没有最新版的 ClashR Android 客户端 自己编译了一个，分享给有需要的朋友吧</p><span id="more"></span><p>fork 自 <a href="https://github.com/Kr328/ClashForAndroid" title="ClashForAndroid">ClashForAndroid</a></p><h3 id="【最近更新：2021-年-01-月-23-日】"><a href="#【最近更新：2021-年-01-月-23-日】" class="headerlink" title="【最近更新：2021 年 01 月 23 日】"></a>【最近更新：2021 年 01 月 23 日】</h3><p><strong>ps:一直有朋友们问我何时再更新，我想说已经没办法更新了，官方已经闭源了。</strong><br><strong><del>目前的版本现在还够用，即使下次更新也是更新兼容新配置文件格式</del></strong></p><details><summary>历史内容</summary><h2 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h2><p>同步 <a href="https://github.com/Kr328/ClashForAndroid" title="Clash for Android">Clash for Android</a> 1.1.10 代码<br>同步 <a href="https://github.com/Kr328/clash" title="clash Branch:android">clash Branch:android</a> c8ab24e 代码</p><p>修正了配置文件和一般托管的 clashr 命名不同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">Protocol      <span class="hljs-type">string</span> <span class="hljs-string">`proxy:&quot;protocol&quot;`</span><br>ProtocolParam <span class="hljs-type">string</span> <span class="hljs-string">`proxy:&quot;protocol-param&quot;`</span><br>Obfs          <span class="hljs-type">string</span> <span class="hljs-string">`proxy:&quot;obfs&quot;`</span><br>ObfsParam     <span class="hljs-type">string</span> <span class="hljs-string">`proxy:&quot;obfs-param&quot;`</span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">Protocol      <span class="hljs-type">string</span> <span class="hljs-string">`proxy:&quot;protocol&quot;`</span><br>ProtocolParam <span class="hljs-type">string</span> <span class="hljs-string">`proxy:&quot;protocolparam&quot;`</span><br>Obfs          <span class="hljs-type">string</span> <span class="hljs-string">`proxy:&quot;obfs&quot;`</span><br>ObfsParam     <span class="hljs-type">string</span> <span class="hljs-string">`proxy:&quot;obfsparam&quot;`</span><br></code></pre></td></tr></table></figure><p>修复了直接编译 SSR 无法连接的问题，替换为 dev 代码<br>see:<br><a href="https://github.com/sh4d0wfiend/clash/tree/dev" title="sh4d0wfiend/clash/tree/dev">sh4d0wfiend&#x2F;clash&#x2F;tree&#x2F;dev</a><br><a href="https://github.com/sh4d0wfiend/clash/tree/feat-ssr" title="sh4d0wfiend/clash/tree/feat-ssr">sh4d0wfiend&#x2F;clash&#x2F;tree&#x2F;feat-ssr</a></p><p>修复部分 R 协议无法连接</p></details><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h4 id="有一定的基础："><a href="#有一定的基础：" class="headerlink" title="有一定的基础："></a>有一定的基础：</h4><p>可直接在线转换订阅 <strong><a href="https://sub.789.st/">https://sub.789.st</a></strong><br>(注：已切换到新版配置格式，不支持 1.3.3 之前的版本)</p><h4 id="没有基础："><a href="#没有基础：" class="headerlink" title="没有基础："></a>没有基础：</h4><p><a href="https://cuojue.org/read/clash.html">一篇快速上手 Clash 的简单教程</a></p><h2 id="支持的-R-算法"><a href="#支持的-R-算法" class="headerlink" title="支持的 R 算法"></a>支持的 R 算法</h2><details><summary>支持的R算法</summary><p><em>Not support AEAD method yet.</em></p><p><strong>Encrypting algorithm</strong></p><ul><li>aes-128-cfb</li><li>aes-192-cfb</li><li>aes-256-cfb</li><li>aes-128-ctr</li><li>aes-192-ctr</li><li>aes-256-ctr</li><li>aes-128-ofb</li><li>aes-192-ofb</li><li>aes-256-ofb</li><li>des-cfb</li><li>bf-cfb</li><li>cast5-cfb</li><li>rc4-md5</li><li>chacha20</li><li>chacha20-ietf</li><li>salsa20</li><li>camellia-128-cfb</li><li>camellia-192-cfb</li><li>camellia-256-cfb</li><li>idea-cfb</li><li>rc2-cfb</li><li>seed-cfb</li><li>none</li></ul><p><strong>Obfs</strong></p><ul><li>plain</li><li>http_simple</li><li>http_post</li><li>random_head</li><li>tls1.2_ticket_auth</li></ul><p><strong>Protocol</strong></p><ul><li>origin</li><li>verify_sha1 aka. one time auth(OTA)</li><li>auth_sha1_v4</li><li>auth_aes128_md5</li><li>auth_aes128_sha1</li><li>auth_chain_a</li><li>auth_chain_b</li></ul></details><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p><strong>v1.1.10</strong><br>初始编译版本</p><p><strong>v1.1.10R</strong><br>修复部分算法连接失败(改用 mzz2017 版 r 算法,链接地址敏感词)</p><p><strong>v1.1.10R2</strong><br>更新<a href="https://github.com/Dreamacro/clash/releases/tag/v0.19.0" title="core(v0.19.0R)">core(v0.19.0R)</a><br>支持 Trojan 协议（实验性，无条件未测试）</p><p><strong>v1.1.10R3</strong><br>修复 R2 规则无效</p><p><strong>v1.2.13R</strong><br>同步官方更新</p><p><strong>v1.2.14R</strong><br>更新 Core</p><p><strong>v1.3.3R2</strong><br>更新同步到闭源前的最后一个版本 1.3.3<br>更新 core 支持最新的配置文件格式（支持 PROCESS-NAME 字段）</p><p><strong>v1.3.4R</strong><br>更新 ssr 依赖（b52844f）<br>更新内置 Country.mmdb<br>更新支持 SSR Cipher（none）<br>更新支持 SSR Protocol（auth_chain_a，auth_chain_b）<br>修复界面显示 ssr 协议为 unknown</p><blockquote><p><strong>ps:由于 SSR 协议过于陈旧且无人维护。<br>如无必要，不推荐使用 SSR 协议，请使用<a href="https://github.com/Kr328/ClashForAndroid/releases" title="官方版">官方版</a>+SS 协议</strong></p></blockquote><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><span id="hidelink"><div class="note note-warning" style="font-size:0.9rem"><p></p><div class="h6">下载地址评论后可见</div><p>评论后请刷新本页面即可看到下载地址，评论无意义内容将被拉黑导致无法下载</p><p></p></div></span><script>eval(function(p,a,c,k,e,r){e=function(c){return c.toString(a)};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('5 1=6.7.8("9");a 0!==1&&b!==1&&c.d(1).e&&((2.3("4").f=""),2.3("4").g("h",i(j("k="))));',21,21,'|email|document|getElementById|hidelink|var|window|localStorage|getItem|twikoo|void|null|JSON|parse|mail|innerHTML|insertAdjacentHTML|afterbegin|decodeURIComponent|atob|JTNDZGl2JTIwY2xhc3MlM0QlMjJub3RlJTIwbm90ZS1pbmZvJTIyJTIwc3R5bGUlM0QlMjJmb250LXNpemUlM0EwLjlyZW0lMjIlM0UlM0NwJTNFJTNDJTJGcCUzRSVFNCVCOCU4QiVFOCVCRCVCRCVFNSU5QyVCMCVFNSU5RCU4MCVFRiVCQyU5QSUzQ2ElMjB0YXJnZXQlM0QlMjJfYmxhbmslMjIlMjBocmVmJTNEJTIyaHR0cHMlM0ElMkYlMkZjdW9qdWUub3JnJTJGZ28lMkYlMjNhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMHR5TXpJNEwwTnNZWE5vUm05eVFXNWtjbTlwWkM5eVpXeGxZWE5sY3clM0QlM0QlMjIlMjB0aXRsZSUzRCUyMiVFNCVCOCU4QiVFOCVCRCVCRCUyMiUzRSVFNSVBRSU5OCVFNiU5NiVCOSVFNCVCOCU4QiVFOCVCRCVCRCUzQyUyRmElM0UlM0MlMkZwJTNFJTNDcCUzRSVFNSVBRSU5OCVFNiU5NiVCOSVFNSVCNyVCMiVFNiU5NCVBRiVFNiU4QyU4MSUyMHNzciUyMCVFNSU4RCU4RiVFOCVBRSVBRSVFRiVCQyU4QyVFOCVBRiVCNyVFNCVCRCVCRiVFNyU5NCVBOCVFNSVBRSU5OCVFNiU5NiVCOSVFNyU4OSU4OCUzQyUyRnAlM0UlM0MlMkZkaXYlM0U'.split('|'),0,{}))</script><p><a href="https://github.com/naicfeng/ClashRForAndroid/releases" title="GitHub">GitHub</a></p><h2 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h2><p>ClashRForAndroid：<br><a href="https://github.com/naicfeng/ClashRForAndroid">https://github.com/naicfeng/ClashRForAndroid</a><br><a href="https://github.com/goomadao/ClashForAndroid">https://github.com/goomadao/ClashForAndroid</a><br>ClashForAndroid：<br><a href="https://github.com/Kr328/ClashForAndroid">https://github.com/Kr328/ClashForAndroid</a></p><p>Clash：<br><a href="https://github.com/Dreamacro/clash">https://github.com/Dreamacro/clash</a><br>ClashR：<br><a href="https://github.com/goomadao/clash">https://github.com/goomadao/clash</a><br><a href="https://github.com/sh4d0wfiend/clash">https://github.com/sh4d0wfiend/clash</a></p><p>R 协议相关（因含有敏感词仅放作者主页）：<br><a href="https://github.com/mzz2017">https://github.com/mzz2017</a></p><h2 id="其他操作系统"><a href="#其他操作系统" class="headerlink" title="其他操作系统"></a>其他操作系统</h2><p>分享全平台 ClashR Core 客户端下载<br><a href="https://cuojue.org/read/ClashR_Core.html">https://cuojue.org/read/ClashR_Core.html</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clash</tag>
      
      <tag>clashr</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开启全站缓存后关于handsome主题的部分修改</title>
    <link href="/read/typecho-cache-handsome.html"/>
    <url>/read/typecho-cache-handsome.html</url>
    
    <content type="html"><![CDATA[<p>总体来说，由 php 实现的实时反馈，cookies 等渲染，需要替换成由 javascript 来本地渲染</p><h2 id="左侧边栏"><a href="#左侧边栏" class="headerlink" title="左侧边栏"></a>左侧边栏</h2><h3 id="时间问候"><a href="#时间问候" class="headerlink" title="时间问候"></a>时间问候</h3><p>左侧边栏只有头像右侧名称点击会出现上下午和晚上的问候，去掉即可</p><p><code>/usr/themes/handsome/component/aside.php</code><br>注释掉<code>&lt;!-- dropdown --&gt;</code>这一段</p><h2 id="右侧边栏"><a href="#右侧边栏" class="headerlink" title="右侧边栏"></a>右侧边栏</h2><h3 id="最后活动"><a href="#最后活动" class="headerlink" title="最后活动"></a>最后活动</h3><p>右侧边栏的最后活动会定格在缓存那一刻，修改为缓存时间，方便查看页面缓存了多久</p><p><code>/usr/themes/handsome/component/sidebar.php</code><br>修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;li <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">list</span>-<span class="hljs-title">group</span>-<span class="hljs-title">item</span> <span class="hljs-title">text</span>-<span class="hljs-title">second</span>&quot;&gt;&lt;<span class="hljs-title">span</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">blog</span>-<span class="hljs-title">info</span>-<span class="hljs-title">icons</span>&quot;&gt; &lt;<span class="hljs-title">i</span> <span class="hljs-title">data</span>-<span class="hljs-title">feather</span>=&quot;<span class="hljs-title">activity</span>&quot;&gt;&lt;/<span class="hljs-title">i</span>&gt;&lt;/<span class="hljs-title">span</span>&gt; &lt;<span class="hljs-title">span</span></span><br><span class="hljs-class">                       <span class="hljs-title">class</span>=&quot;<span class="hljs-title">badge</span></span><br><span class="hljs-class">           <span class="hljs-title">pull</span>-<span class="hljs-title">right</span>&quot;&gt;&lt;?<span class="hljs-title">php</span> //<span class="hljs-title">echo</span> <span class="hljs-title">Utils</span>::<span class="hljs-title">getLatestTime</span>($<span class="hljs-title">this</span>); ?&gt;&lt;/<span class="hljs-title">span</span>&gt;&lt;?<span class="hljs-title">php</span> <span class="hljs-title">_me</span>(&quot;最后活动&quot;) ?&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">      &lt;li <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">list</span>-<span class="hljs-title">group</span>-<span class="hljs-title">item</span> <span class="hljs-title">text</span>-<span class="hljs-title">second</span>&quot;&gt;&lt;<span class="hljs-title">span</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">blog</span>-<span class="hljs-title">info</span>-<span class="hljs-title">icons</span>&quot;&gt; &lt;<span class="hljs-title">i</span> <span class="hljs-title">data</span>-<span class="hljs-title">feather</span>=&quot;<span class="hljs-title">activity</span>&quot;&gt;&lt;/<span class="hljs-title">i</span>&gt;&lt;/<span class="hljs-title">span</span>&gt; &lt;<span class="hljs-title">span</span></span><br><span class="hljs-class">                  <span class="hljs-title">class</span>=&quot;<span class="hljs-title">badge</span></span><br><span class="hljs-class">      <span class="hljs-title">pull</span>-<span class="hljs-title">right</span>&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">cacheuptime</span>&quot;&gt;<span class="hljs-title">loading</span>&lt;/<span class="hljs-title">span</span>&gt;&lt;?<span class="hljs-title">php</span> <span class="hljs-title">_me</span>(&quot;缓存时间&quot;) ?&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">script</span>&gt;<span class="hljs-title">var</span> <span class="hljs-title">cacheuptime</span> = &#x27;&lt;?=<span class="hljs-title">time</span>()*1000?&gt;&#x27;;&lt;/<span class="hljs-title">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>合适位置加上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getDateDiff</span>(<span class="hljs-params">dateTimeStamp</span>)&#123;&lt;?php <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Typecho</span><span class="hljs-attr">_Widget</span>::<span class="hljs-title function_">widget</span>(<span class="hljs-string">&#x27;Widget_User&#x27;</span>)-&gt;<span class="hljs-title function_">hasLogin</span>()):?&gt;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ByPsaa&quot;</span>;&lt;?php endif;?&gt;<span class="hljs-keyword">var</span> minute=<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>;<span class="hljs-keyword">var</span> hour=minute*<span class="hljs-number">60</span>;<span class="hljs-keyword">var</span> day=hour*<span class="hljs-number">24</span>;<span class="hljs-keyword">var</span> halfamonth=day*<span class="hljs-number">15</span>;<span class="hljs-keyword">var</span> month=day*<span class="hljs-number">30</span>;<span class="hljs-keyword">var</span> now=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<span class="hljs-keyword">var</span> diffValue=now-dateTimeStamp;<span class="hljs-keyword">var</span> monthC=diffValue/month;<span class="hljs-keyword">var</span> weekC=diffValue/(<span class="hljs-number">7</span>*day);<span class="hljs-keyword">var</span> dayC=diffValue/day;<span class="hljs-keyword">var</span> hourC=diffValue/hour;<span class="hljs-keyword">var</span> minC=diffValue/minute;<span class="hljs-keyword">if</span>(hourC&gt;<span class="hljs-number">48</span>)&#123;result=<span class="hljs-string">&quot;前天&quot;</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(hourC&gt;<span class="hljs-number">24</span>)&#123;result=<span class="hljs-string">&quot;昨天&quot;</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(hourC&gt;=<span class="hljs-number">1</span>)&#123;result=<span class="hljs-built_in">parseInt</span>(hourC)+<span class="hljs-string">&quot;个小时前&quot;</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(minC&gt;=<span class="hljs-number">1</span>)&#123;result=<span class="hljs-built_in">parseInt</span>(minC)+<span class="hljs-string">&quot;分钟前&quot;</span>&#125;<span class="hljs-keyword">else</span> result=<span class="hljs-string">&quot;刚刚&quot;</span>;<span class="hljs-keyword">return</span> result&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ShowCachetime</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">if</span>(<span class="hljs-title function_">typeof</span>(cacheuptime)!==<span class="hljs-string">&#x27;undefined&#x27;</span>)&#123;<span class="hljs-keyword">if</span>(cacheuptime&gt;<span class="hljs-number">0</span>)&#123;$(<span class="hljs-string">&#x27;#cacheuptime&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-title function_">getDateDiff</span>(cacheuptime));&#125;cacheuptime=<span class="hljs-number">0</span>;&#125;&#125;<br><span class="hljs-title class_">ShowCachetime</span>();<br></code></pre></td></tr></table></figure><p>如果开启了 pjax 加载，还需要在 pjax 回调加入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ShowCachetime</span>();<br></code></pre></td></tr></table></figure><h2 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h2><p>页面浏览统计改为 javascript 方式</p><p><a href="https://cuojue.org/read/typecho-PostViews.html">Typecho 的页面浏览统计 js 版</a></p><h2 id="评论信息"><a href="#评论信息" class="headerlink" title="评论信息"></a>评论信息</h2><p>评论修改为 javascript 方式获取 cookies</p><p><a href="https://cuojue.org/read/typecho_comments_author_javascript.html">修改 typecho 保存评论用户信息为 javascript 模式</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用nginx_fastcgi_cache的时候关于Cookie的处理</title>
    <link href="/read/fastcgi_cache_fix_cookies.html"/>
    <url>/read/fastcgi_cache_fix_cookies.html</url>
    
    <content type="html"><![CDATA[<h2 id="产生问题"><a href="#产生问题" class="headerlink" title="产生问题"></a>产生问题</h2><p>本站使用了 fastcgi_cache 来缓存所有页面，导致了一个问题，那就是 set-cookie 也被缓存了，其他用户再次访问会导致被设置缓存的 cookie，最终需要实现的效果如下</p><p><strong>在缓存 miss&#x2F;bypass 的状态下，输出 set-cookie</strong><br><strong>在缓存 hit 的状态下，丢弃 set-cookie</strong><br>miss:首次访问，无缓存<br>bypass:条件不符，跳过缓存<br>hit:缓存命中</p><p>要达到这种效果，目前 nginx 的 fastcgi_cache 没有给出解决方案，要么就是直接丢弃所有的 cookie</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">fastcgi_hide_header <span class="hljs-string">&quot;Set-Cookie&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这样导致了所有 cookies 全部被丢弃，造成无法登陆等问题</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>查阅了一下，发现了解决方法，那就是使用 nginx_lua 模块实现</p><p>在 server 段外增加</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">fastcgi_ignore_headers</span> Cache-Control Expires Set-Cookie;<br><span class="hljs-attribute">map</span> <span class="hljs-variable">$upstream_bytes_received</span> <span class="hljs-variable">$hide_cookie</span> &#123;<span class="hljs-attribute">default</span> <span class="hljs-string">&#x27;&#x27;</span>;&#x27;&#x27; Set-Cookie;&#125;<br></code></pre></td></tr></table></figure><p>在 server 段内增加</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">header_filter_by_lua_block &#123;<br>   ngx.header[ngx.var.hide_cookie] <span class="hljs-operator">=</span> nil<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>完美实现<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2020/02/2818833632.png" alt="未命中缓存"><br>未命中缓存，输出 cookie</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2020/02/1784695453.png" alt="命中缓存"><br>命中缓存，丢弃 set-cookie 头</p><h2 id="广告时间"><a href="#广告时间" class="headerlink" title="广告时间"></a>广告时间</h2><p>推荐一下我的 Typecho 的 fastcgi_cache 缓存插件</p><p><a href="https://cuojue.org/read/typecho-fastcgi_cache.html">Typecho 的 fastcgi_cache 缓存插件</a></p><p>参考：<a href="https://serverfault.com/questions/680650/nginx-fastcgi-cache-hide-set-cookie-when-serving-from-cache" title="Nginx fastcgi_cache hide Set-Cookie when serving from cache - Server Fault">Nginx fastcgi_cache hide Set-Cookie when serving from cache - Server Fault</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>fastcgi_cache</tag>
      
      <tag>cookies</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho的页面浏览统计 js 版</title>
    <link href="/read/typecho-PostViews.html"/>
    <url>/read/typecho-PostViews.html</url>
    
    <content type="html"><![CDATA[<p>如上一篇文章所写，如果启用了 fastcgi_cache 缓存之后，所有“非 js 方式的访问统计插件会失效”，所以改造一下统计方法，改为 js 方式</p><span id="more"></span><p><a href="https://cuojue.org/read/typecho-fastcgi_cache.html">https://cuojue.org/read/typecho-fastcgi_cache.html</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先安装 PostViews 插件（本文末下载）</p><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>安装插件后，会自动统计浏览记录，但是页面无法显示，还需要修改文件，让它显示在页面上</p><p>具体模板要具体修改，这里给出一个本站模板<code>handsome</code>的例子</p><h3 id="修改-post-php"><a href="#修改-post-php" class="headerlink" title="修改 post.php"></a>修改 post.php</h3><p><code>/usr/themes/handsome/post.php</code><br>修改第 67 行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">get_post_view</span>(<span class="hljs-variable">$this</span>) <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;span id=<span class="hljs-string">&quot;post-views&quot;</span>&gt;loading&lt;/span&gt;<span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">//echo get_post_view($this) ?&gt;</span><br></code></pre></td></tr></table></figure><p>并且在下一行加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script&gt;<span class="hljs-keyword">var</span> cid = <span class="hljs-meta">&lt;?=</span><span class="hljs-variable language_">$this</span>-&gt;cid<span class="hljs-meta">?&gt;</span>;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如此便可统计文章浏览次数</p><h3 id="添加-PJAX-回调函数"><a href="#添加-PJAX-回调函数" class="headerlink" title="添加 PJAX 回调函数"></a>添加 PJAX 回调函数</h3><p>如果使用了 pjax 刷新，还需要在适当位置加上<br><code>PostViews();</code></p><p>如本站模板<code>handsome</code>则只需在后台模板设置 PJAX 回调函数填入即可</p><h2 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h2><p>链接：<a href="https://disk.cuojue.org/s/exFZ" title="PostViews.zip">PostViews.zip</a> 密码：ev65</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostViews</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho的fastcgi_cache缓存插件</title>
    <link href="/read/typecho-fastcgi_cache.html"/>
    <url>/read/typecho-fastcgi_cache.html</url>
    
    <content type="html"><![CDATA[<p>本插件需要 WEB 服务器为 Nginx 并且需要 ngx_cache_purge 模块支持</p><h2 id="插件特性"><a href="#插件特性" class="headerlink" title="插件特性"></a>插件特性</h2><p>直接在 nginx 层缓存，媲美静态页面速度<br>支持所有页面缓存<br>支持内容修改之后自动更新内容、分类、首页缓存<br>支持评论生效更新缓存<br>支持登录状态下不缓存<br>支持搜索等动态页面不缓存</p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>v1.0<br>初始版本<br>v1.1<br>修复评论分页刷新<br>增加 Tag 页面刷新<br>增加自定义刷新后缀</p><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><p>非 js 方式的访问统计插件会失效</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>需要修改 nginx 配置文件，添加</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#下面2行的中的wpcache路径请自行提前创建，否则可能会路径不存在而无法启动nginx，max_size请根据分区大小自行设置</span><br><span class="hljs-attribute">fastcgi_cache_path</span> /www/server/nginx/fastcgi_cache_dir levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=fcache:<span class="hljs-number">250m</span> inactive=<span class="hljs-number">1d</span> max_size=<span class="hljs-number">1G</span>;<br><span class="hljs-attribute">fastcgi_temp_path</span> /www/server/nginx/fastcgi_cache_dir/temp;<br><span class="hljs-attribute">fastcgi_cache_key</span> <span class="hljs-string">&quot;<span class="hljs-variable">$scheme</span><span class="hljs-variable">$request_method</span><span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>&quot;</span>;<br><span class="hljs-attribute">fastcgi_cache_use_stale</span> <span class="hljs-literal">error</span> timeout invalid_header http_500;<br><span class="hljs-comment">#忽略一切nocache申明，避免不缓存伪静态等</span><br><span class="hljs-attribute">fastcgi_ignore_headers</span> Cache-Control Expires Set-Cookie;<br><span class="hljs-comment">#Ps：如果是多个站点，以上内容不要重复添加，否则会冲突，可以考虑将以上内容添加到nginx.conf里面，避免加了多次。</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span><br>&#123;<br>***略***<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">#post访问不缓存</span><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = POST) &#123;<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">#动态查询不缓存</span><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> != <span class="hljs-string">&quot;&quot;</span>) &#123;<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">#pjax查询缓存</span><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$query_string</span> <span class="hljs-regexp">~ &quot;_pjax=(.*)&quot;)</span> &#123;<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">#后台等特定页面不缓存（其他需求请自行添加即可）</span><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~* &quot;/admin/|/action/|/search/|/feed/|baidu_sitemap.xml|sitemap.xml&quot;)</span> &#123;<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">#对登录的用户不展示缓存</span><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$http_cookie</span> <span class="hljs-regexp">~* &quot;typecho_authCode&quot;)</span> &#123;<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$skip_cache</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-section">location</span> <span class="hljs-regexp">~ [^/]\.php(/|$)</span><br>&#123;<br><span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> =<span class="hljs-number">404</span>;<br><span class="hljs-attribute">fastcgi_pass</span>  unix:/tmp/php-cgi-74.sock;<br><span class="hljs-attribute">fastcgi_index</span> index.php;<br><span class="hljs-attribute">include</span> fastcgi.conf;<br><span class="hljs-attribute">include</span> pathinfo.conf;<br><span class="hljs-comment">#新增的缓存规则</span><br><span class="hljs-attribute">fastcgi_cache_bypass</span> <span class="hljs-variable">$skip_cache</span>;<br><span class="hljs-attribute">fastcgi_no_cache</span> <span class="hljs-variable">$skip_cache</span>;<br><span class="hljs-attribute">add_header</span> X-Cuojue-Cache <span class="hljs-string">&quot;<span class="hljs-variable">$upstream_cache_status</span> From <span class="hljs-variable">$host</span>&quot;</span>;<br><span class="hljs-attribute">fastcgi_cache</span> fcache;<br><span class="hljs-attribute">fastcgi_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">1d</span>;<br>&#125;<br><br><span class="hljs-section">location</span> <span class="hljs-regexp">~* /</span>&#123;后台设置的token&#125;/_clean_cache(/.*) &#123;<br><span class="hljs-attribute">fastcgi_cache_purge</span> fcache <span class="hljs-string">&quot;<span class="hljs-variable">$scheme</span><span class="hljs-variable">$request_method</span><span class="hljs-variable">$host</span><span class="hljs-variable">$1</span><span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>&quot;</span>;<br>&#125;<br>***略***<br>&#125;<br></code></pre></td></tr></table></figure><p>以上的</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~* /</span>&#123;后台设置的token&#125;/_clean_cache(/.*) &#123;<br><span class="hljs-attribute">fastcgi_cache_purge</span> fcache <span class="hljs-string">&quot;<span class="hljs-variable">$scheme</span><span class="hljs-variable">$request_method</span><span class="hljs-variable">$host</span><span class="hljs-variable">$1</span><span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要和后台设置的 token 一致，例如后台设置<code>1150AE6A4F7938AE754D</code>则这里设置为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~* /1150AE6A4F7938AE754D/_clean_cache(/.*)</span> &#123;<br><span class="hljs-attribute">fastcgi_cache_purge</span> fcache <span class="hljs-string">&quot;<span class="hljs-variable">$scheme</span><span class="hljs-variable">$request_method</span><span class="hljs-variable">$host</span><span class="hljs-variable">$1</span><span class="hljs-variable">$is_args</span><span class="hljs-variable">$args</span>&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="缓存效果"><a href="#缓存效果" class="headerlink" title="缓存效果"></a>缓存效果</h3><p>替换新的配置，并且重载 Nginx 之后，访问前台页面，查看 header，会多出一个 X-Cuojue-Cache 标志。</p><p>X-Cuojue-Cache 一般会有 3 个状态：MISS、HIT、BYPASS。</p><ul><li><p><strong>MISS 表示未命中</strong><br>即这个页面还没被缓存，新发布或刚被删除的页面，首次访问将出现这个状态（图略）。</p></li><li><p><strong>HIT 表示缓存命中</strong><br>打开一个会缓存的页面，比如文章内容 html 页面，F5 刷新几次即可在 F12 开发者模式当中的 Header 头部信息中看到如图缓存命中状态：<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2020/02/2906163519.png" alt="HIT"></p></li><li><p><strong>BYPASS 表示缓存黑名单</strong><br>即页面路径在 Nginx 规则中被设置成不缓存（set $skip_cache 1;），比如 typecho 后台和搜索：<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2020/02/4256031367.png" alt="BYPASS"></p></li></ul><p><em>如果你发现想要缓存的页面却是这个状态，就可以去检查排除规则中是不是包含了这个路径！反之，如果你发现后台登录不了，或者各种登陆态丢失问题，则应该到排除规则中加上该页面路径的关键字。</em></p><h3 id="缓存刷新"><a href="#缓存刷新" class="headerlink" title="缓存刷新"></a>缓存刷新</h3><h4 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h4><p>后台配置完成后，涉及文章，评论等更新，会自动刷新对应缓存。默认缓存 24 小时后过期。<br>自动刷新缓存是访问对应的刷新地址实现的，所以以上的 nginx 配置和后台 token 一定要一致，如不一致，缓存是不会刷新的。</p><h3 id="手动刷新"><a href="#手动刷新" class="headerlink" title="手动刷新"></a>手动刷新</h3><p>手动刷新，可以拼合地址规则。<br>定义 token 为：<code>ABCD1234</code><br>定义页面为：<code>https://cuojue.org/read/typecho-fastcgi_cache.html</code><br>则刷新地址是：<code>https://cuojue.org/ABCD1234/_clean_cache/read/typecho-fastcgi_cache.html</code><br>访问这个地址就会刷新，插件内也是模拟访问这个地址，实现的刷新。<br>这个地址，在有缓存的时候，访问会返回<code>200</code>刷新成功，在不存在缓存的时候，会返回正常的<code>404</code>未找到页面错误。<br>所以如果没有配置正确，缓存是不会刷新的。<br>缓存 key 就是 url，如果 url 变化了，旧的缓存也不会刷新。</p><h3 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h3><h4 id="评论者信息被缓存修复"><a href="#评论者信息被缓存修复" class="headerlink" title="评论者信息被缓存修复"></a>评论者信息被缓存修复</h4><p>typecho 主题一般使用 php 的函数获取 cookies 来填充评论者信息，导致了如果用户评论了文章，就会缓存评论者的信息，如何修复参考下面的文章<br><a href="https://cuojue.org/read/typecho_comments_author_javascript.html">https://cuojue.org/read/typecho_comments_author_javascript.html</a></p><h4 id="Set-Cookie-头处理"><a href="#Set-Cookie-头处理" class="headerlink" title="Set-Cookie 头处理"></a>Set-Cookie 头处理</h4><p>使用了 fastcgi_cache 来缓存所有页面，导致了一个问题，那就是 set-cookie 也被缓存了，其他用户再次访问会导致被设置缓存的 cookie，解决方法见下文。<br><a href="https://cuojue.org/read/fastcgi_cache_fix_cookies.html">https://cuojue.org/read/fastcgi_cache_fix_cookies.html</a></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>链接：<a href="https://disk.cuojue.org/s/9kuA" title="Ncache.zip">Ncache.zip</a> 密码：ncache</p><p>参考：<br><a href="https://zhangge.net/5042.html" title="Nginx开启fastcgi_cache缓存加速，支持html伪静态页面 | 张戈博客">Nginx 开启 fastcgi_cache 缓存加速，支持 html 伪静态页面 | 张戈博客</a><br><a href="https://cuojue.org/read/typecho-cache-memcache.html" title="为typecho增加缓存功能,支持memcached缓存">为 typecho 增加缓存功能,支持 memcached 缓存</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>fastcgi_cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx/OpenLiteSpeed来实现QUIC和HTTP/3支持</title>
    <link href="/read/quic_http3.html"/>
    <url>/read/quic_http3.html</url>
    
    <content type="html"><![CDATA[<p>网上大部分是采用 caddy 来监听 UDP443 端口实现的 quic 支持，大多数版本太过于老旧。<br>今天采用 Docker 部署 OpenLiteSpeed 来实现 QUIC 和 HTTP&#x2F;3 支持。<br>目前支持的版本有：gQUIC(43,46),h3-Q050,h3-24,h3-25</p><p>我本机使用的 WebServer 是 nginx，所以配置 nginx 监听 TCP:443 配置 OpenLiteSpeed 监听 UDP:443 并且反向代理到本机 Nginx</p><p>首先机器环境安装 Docker 和 git，这就不说了</p><h2 id="Git-clone-OLStack"><a href="#Git-clone-OLStack" class="headerlink" title="Git clone OLStack"></a>Git clone OLStack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/LLStack/OLStack.git<br><span class="hljs-built_in">cd</span> OLStack<br></code></pre></td></tr></table></figure><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p>编辑 .env 和 docker-compose.yml 文件<br>这里只需要 litespeed 所以修改为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">litespeed:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./Dockerfile/build/$&#123;LITESPEED&#125;/$&#123;PHPVER&#125;/</span><br>      <span class="hljs-attr">args:</span><br>        <span class="hljs-attr">extensions:</span> <span class="hljs-string">vim</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">litespeed</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">llstack/olstack:$&#123;LITESPEED&#125;-$&#123;PHPVER&#125;</span><br>    <span class="hljs-attr">env_file:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">.env</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./Configfile/lsws/conf:/usr/local/lsws/conf</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./Configfile/lsws/admin-conf:/usr/local/lsws/admin/conf</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./bin/container:/usr/local/bin</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./sites:/var/www/vhosts/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./certs:/etc/letsencrypt/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/www/server/panel/vhost/cert:/etc/certs/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./logs/lsws/:/usr/local/lsws/logs/</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">443</span><span class="hljs-string">:443/udp</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">7080</span><span class="hljs-string">:7080</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=$&#123;TimeZone&#125;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><p>运行 <code>docker-compose up --build</code>和<code>docker-compose up -d</code>启动容器</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>进后台 <a href="https://0.0.0.0:7080/">https://0.0.0.0:7080</a> 默认用户名是<code>admin</code>密码是<code>123456</code></p><p>修改虚拟主机模板 centralConfigLog&#x2F;ssl<br>按图所示，修改 ssl 证书的路径和各项配置<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2020/02/3654111390.png" alt="修改ssl证书的路径和各项配置1"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2020/02/2847812440.png" alt="修改ssl证书的路径和各项配置2"></p><p>修改虚拟主机模板 centralConfigLog&#x2F;外部应用程序<br>按图所示，添加代理<br><strong>这里的地址是 Docker 访问本地的地址，请修改为你本机相对应的地址</strong><br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2020/02/3902866201.png" alt="添加代理"></p><p>修改虚拟主机模板 centralConfigLog&#x2F;资源集<br>按图所示，添加代理资源集定义<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2020/02/1793199179.png" alt="添加代理资源集定义"></p><p>接下来就可以在 SSH 添加主机了<br>进入 <strong>OLStack 目录</strong> 执行<br><code>bash bin/domain.sh -add &lt;your_domain.com&gt;</code></p><h2 id="Nginx-添加输出头"><a href="#Nginx-添加输出头" class="headerlink" title="Nginx 添加输出头"></a>Nginx 添加输出头</h2><p>添加好后还需要在 nginx 添加<br><code>add_header alt-svc &#39;quic=&quot;:443&quot;; ma=2592000; v=&quot;43,46&quot;, h3-Q043=&quot;:443&quot;; ma=2592000, h3-Q046=&quot;:443&quot;; ma=2592000, h3-Q050=&quot;:443&quot;; ma=2592000, h3-24=&quot;:443&quot;; ma=2592000, h3-25=&quot;:443&quot;; ma=2592000&#39;;</code></p><h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2020/02/170113123.png" alt="http3测试"></p><p>测试地址：<a href="https://http3check.net/">https://http3check.net</a></p><p>参考：<a href="https://www.llstack.com/ols/">https://www.llstack.com/ols/</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>OpenLiteSpeed</tag>
      
      <tag>QUIC</tag>
      
      <tag>HTTP/3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>零成本搭建自有公私兼备云盘(Cloudreve)</title>
    <link href="/read/cuojue_netdisk.html"/>
    <url>/read/cuojue_netdisk.html</url>
    
    <content type="html"><![CDATA[<p>首先放几个栗子：<br><a href="https://disk.cuojue.org/" title="CuoJue NetDisk">CuoJue NetDisk</a><br><a href="https://disk.cuojue.org/s/liej2ccz" title="移动云主机储存的文件分享">OneNET 对象储存的文件分享</a><br><a href="https://disk.cuojue.org/s/whw549l5" title="移动云主机储存的文件分享">OneNET 云主机远程储存的文件分享</a></p><blockquote><p>下载的时候可通过提供方域名分辨储存区域<br>标题写的零成本只是云盘储存空间零成本，云盘系统还是需要自行搭建</p></blockquote><h2 id="搭建-Cloudreve"><a href="#搭建-Cloudreve" class="headerlink" title="搭建 Cloudreve"></a>搭建 Cloudreve</h2><p>搭建这个玩意，直接看官方文档吧 <a href="https://cloudreve.github.io/docs/#/install" title="安装 - Cloudreve文档">安装 - Cloudreve 文档</a></p><p>需要 PHP+MYSQL 环境，需要注意的是，不支持 PHP7.4（ThinkPHP 框架不兼容），目前在 PHP7.2 下运行良好</p><h2 id="增加上传策略"><a href="#增加上传策略" class="headerlink" title="增加上传策略"></a>增加上传策略</h2><h3 id="增加移动-OneNET-对象储存"><a href="#增加移动-OneNET-对象储存" class="headerlink" title="增加移动 OneNET 对象储存"></a>增加移动 OneNET 对象储存</h3><blockquote><p>本篇文章的核心部分第一节<br>截止目前 2020-1-2 本服务还是免费的（免费空间 10GB+流量费全免）</p></blockquote><ol><li><p>注册地址：<a href="https://open.iot.10086.cn/cloud/console/object-storage/index">https://open.iot.10086.cn/cloud/console/object-storage/index</a><br>注册后可免费领取对象储存和云服务器等资源，这里先开通对象储存</p></li><li><p>创建一个对象储存容器和 AccessKey</p></li><li><p>在 Cloudreve 后台配置</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>上传策略名称</td><td>自己取名字</td></tr><tr><td>AWSAccessKeyId</td><td>填写获取到的 AccessKeyId</td></tr><tr><td>AWSSecretKey</td><td>填写获取到的 SecretKey</td></tr><tr><td>存储桶名称</td><td>填写容器名称</td></tr><tr><td>下载根 URL</td><td>https:&#x2F;&#x2F;容器名称.oos-cn-wuxi.heclouds.com&#x2F;</td></tr><tr><td>上传服务器 URL</td><td>https:&#x2F;&#x2F;容器名称.oos-cn-wuxi.heclouds.com&#x2F;</td></tr><tr><td>储存区域</td><td>oos-cn-wuxi</td></tr><tr><td>EndPoint</td><td><a href="https://oos-cn-wuxi.heclouds.com/">https://oos-cn-wuxi.heclouds.com/</a></td></tr></tbody></table></li><li><p>配置完毕后修改用户组上传策略然后测试一下上传</p></li></ol><h3 id="增加移动-OneNET-云主机储存"><a href="#增加移动-OneNET-云主机储存" class="headerlink" title="增加移动 OneNET 云主机储存"></a>增加移动 OneNET 云主机储存</h3><blockquote><p>本篇文章的核心部分第二节<br>截止目前 2020-1-2 本服务还是免费的（免费云主机最大 4 核 8G&#x2F;免费云盘最大容量 2TB&#x2F;免费文件储存无限容量）</p></blockquote><ol><li><p>服务器配置好环境</p><ul><li>可选择<a href="https://www.bt.cn/?invite_code=MV90ZGtxcGQ=" title="宝塔面板">宝塔面板</a>一键安装</li><li>可选择<a href="https://lnmp.org/" title="LNMP一键安装包">LNMP 一键安装包</a></li><li>可选择<a href="https://oneinstack.com/" title="OneinStack一键安装工具">OneinStack 一键安装工具</a></li></ul></li><li><p>环境配置好后安装 cloudreve 远程存储服务端<br>直接下载源码 <a href="https://github.com/cloudreve/remote-server">https://github.com/cloudreve/remote-server</a> 部署到服务器，只需要 PHP 环境，不需要数据库<br>详细看官方文档：<a href="https://github.com/cloudreve/Cloudreve/wiki/%E8%BF%9C%E7%A8%8B%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA">https://github.com/cloudreve/Cloudreve/wiki/%E8%BF%9C%E7%A8%8B%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA</a><br>需要注意：1、主机封了 80 和 443 端口，需要用其他端口访问。2、如果源站配置了 HTTPS 访问，则远程上传也必须配置 HTTPS</p></li><li><p>修改上传大小配置<br>在<code>upload.php</code>文件第 69 行有检测上传文件大小，这里需要修改成和后台填写的一致，如果不一致并且超过了这里的限制会提示上传文件过大。<br><code>if($chunk &amp;&amp; $this-&gt;fileSize &gt; 4194350)</code><br>我改成了 300M<br><code>if($chunk &amp;&amp; $this-&gt;fileSize &gt; 314572800)</code><br>下面的分片文件大小也需要修改（可能是个 BUG，分片大小 4M，实际上传分片大小 10M，导致拼合的文件错误）</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">combineChunk</span>(<span class="hljs-params"><span class="hljs-variable">$chunkList</span></span>)</span>&#123;<br><span class="hljs-variable">$fileName</span> = <span class="hljs-string">&quot;file_&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">uniqid</span>());<br><span class="hljs-variable">$fileObj</span>=<span class="hljs-title function_ invoke__">fopen</span> (<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$fileName</span>,<span class="hljs-string">&quot;a+&quot;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$chunkList</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$chunkObj</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$value</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fileObj</span> || !<span class="hljs-variable">$chunkObj</span>)&#123;<br><span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-string">&quot;文件创建失败&quot;</span>);<br>&#125;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$chunkObj</span>, <span class="hljs-number">4195304</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fileObj</span>, <span class="hljs-variable">$content</span>, <span class="hljs-number">4195304</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$content</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$chunkObj</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fileObj</span>);<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">generateFile</span>(<span class="hljs-variable">$fileName</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>改成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">combineChunk</span>(<span class="hljs-params"><span class="hljs-variable">$chunkList</span></span>)</span>&#123;<br><span class="hljs-variable">$fileName</span> = <span class="hljs-string">&quot;file_&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">uniqid</span>());<br><span class="hljs-variable">$fileObj</span>=<span class="hljs-title function_ invoke__">fopen</span> (<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$fileName</span>,<span class="hljs-string">&quot;a+&quot;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$chunkList</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$chunkObj</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$value</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fileObj</span> || !<span class="hljs-variable">$chunkObj</span>)&#123;<br><span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">setError</span>(<span class="hljs-string">&quot;文件创建失败&quot;</span>);<br>&#125;<br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$chunkObj</span>, <span class="hljs-number">10485760</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fileObj</span>, <span class="hljs-variable">$content</span>, <span class="hljs-number">10485760</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$content</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$chunkObj</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fileObj</span>);<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">generateFile</span>(<span class="hljs-variable">$fileName</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>配置 CORS 跨域访问<br>nginx 配置如下</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">set</span> <span class="hljs-variable">$origin</span> <span class="hljs-string">&#x27;*&#x27;</span>;<span class="hljs-comment">#写入需要跨域的请求地址</span><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-variable">$origin</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="hljs-number">1728000</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Type&#x27;</span> <span class="hljs-string">&#x27;text/plain charset=UTF-8&#x27;</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Length&#x27;</span> <span class="hljs-number">0</span>;<br><span class="hljs-attribute">return</span> <span class="hljs-number">204</span>;<br>      &#125;<br><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-variable">$origin</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="hljs-string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;<br>      &#125;<br><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-variable">$origin</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="hljs-string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>远程下载配置 X-Sendfile 减轻服务器压力<br>这里需要下载我修改好的 file.php 替换到远程服务端根目录下 <a href="https://disk.cuojue.org/s/0jrnbp4z" title="点击这里下载">点击这里下载</a><br>开启 Sendfile 功能后还可以配置 Web Server 权限禁止外部直接访问 uploads 目录<br>例如 nginx</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">~ ^/(thumbs</span>|uploads)<br>&#123;<br>    internal;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="增加微软-OneDrive-储存"><a href="#增加微软-OneDrive-储存" class="headerlink" title="增加微软 OneDrive 储存"></a>增加微软 OneDrive 储存</h3><p>以上两个上传策略毕竟是羊毛，不知道哪天就收费了，所以还可以增加其他储存一起使用<br>　　在编辑页面获取到应用 ID 和机密后，填入对应选项，然后保存的时候会要求登录获取权限</p><p>而且 Onedrive 是异步上传，需要先传到服务器，然后中转上传到 OneDrive，“这对虚拟主机一点也不友好，毕竟需要运行一个二进制客户端”</p><p>异步客户端配置直接看官方文档 <a href="https://github.com/cloudreve/Cloudreve/wiki/Onedrive%E5%AF%B9%E6%8E%A5%E8%AF%B4%E6%98%8E">https://github.com/cloudreve/Cloudreve/wiki/Onedrive%E5%AF%B9%E6%8E%A5%E8%AF%B4%E6%98%8E</a></p><h3 id="增加七牛云、阿里云、又拍云"><a href="#增加七牛云、阿里云、又拍云" class="headerlink" title="增加七牛云、阿里云、又拍云"></a>增加七牛云、阿里云、又拍云</h3><p>这些配置相对简单，省略……</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cloudreve</tag>
      
      <tag>disk</tag>
      
      <tag>OneDrive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>边困扰着，边前进</title>
    <link href="/read/108.html"/>
    <url>/read/108.html</url>
    
    <content type="html"><![CDATA[<p>有时候，你会不会希望</p><p>有人能告诉你，怎么做才是正确的</p><p>体面的工作</p><p>可靠的对象</p><p>美好的未来</p><span id="more"></span><p>好像人生有一个标准答案</p><p>我们都想得到更高的分数</p><p>可是人生这回事，哪有什么老手</p><p>我们都是第一次上场</p><p>不过就是边困扰着，边前进吧</p><blockquote><p>“你知道人类最大的武器是什么吗？” “是豁出去的决心。”</p></blockquote><blockquote><p>假设我抽到了黑桃 10，那么到底该就此停手，还是继续抽呢，如果是你，相信也会很困惑吧？10 这个数字，说大不大说小不小的，下一张说不定会抽到更好的牌。如果抽到 A，或是 4，就不会这么烦恼了。</p></blockquote><blockquote><p>——《金色梦乡》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cnBeta.COM 2019年新年献词</title>
    <link href="/read/107.html"/>
    <url>/read/107.html</url>
    
    <content type="html"><![CDATA[<blockquote><h3 id="各位亲爱的访客朋友：新年好！"><a href="#各位亲爱的访客朋友：新年好！" class="headerlink" title="各位亲爱的访客朋友：新年好！"></a>各位亲爱的访客朋友：新年好！</h3></blockquote><blockquote><p>我们从 2006 年开始连续 12 年，以一篇献词作为新一年的起点，今年也不例外。但今年因为众所周知的原因，继续写一篇行礼如仪的文章，不仅大家不见得会赏识，连我自己也都意兴阑珊。所以，以下的文字，与其说是总结过去展望未来，不如说是一份在困难年代的生存指南，同时也写给我自己，并与大家共勉。</p></blockquote><span id="more"></span><h2 id="过去的好时光"><a href="#过去的好时光" class="headerlink" title="过去的好时光"></a>过去的好时光</h2><p>“世界正面临百年未有之大变局”。虽然从权威人士讲“L 形”至今已经有几年时间，我相信大多数人还没有做好过苦日子的准备，因为这和我们生长起来的环境非常不同。</p><p>如果你和我一样是 80-90-00 后，你一定不陌生一些公众号爆款文章的论调：我们的父母辈成长于极度匮乏中，因此他们自私，喜欢囤积东西，对家族内外双重标准，遵循传统礼教桎梏，而这造就了许多家庭悲剧。作为后辈，我们可不能像他们那样，云云。</p><p>不管你是否赞同这种论调，但我们成长于一个基本上还算富足的社会，<strong>我们有能力去思考除了吃饱肚子之外更“高层次”的话题，这可能是很多人都认同的。</strong></p><p>在漫长的人类历史上，绝大部分时间，人类都活在可悲的战乱、贫穷和不自由中；像近几十年这样，全球总体上迎来较长期的和平、繁荣与开放，是极其罕见的。</p><p>几乎连续的三次科技革命支撑了这段难得的增长时光，以至于福山可以在 80 年代末提出“历史的终结”论（他现在已经开始反思这个论点）。现今社会的主力生于 1980 年代或往后，基本没有什么关于苦难的童年记忆。</p><p>“仓廪实而知礼节”。在全球化基础上，一些无关自身温饱，并超越了本地社区的，纯粹利他和国际主义的思潮得以兴起。社会分层从粗粝到细腻，性别、种族、性取向等原本“小众”的问题得到更多关照，一些看似牢不可破的“祖宗之法”也摇摇欲坠起来。</p><p>婚姻家庭观在变化。纯粹基于家庭条件的“门当户对”以及相亲都不再时兴，甚至有人呼唤传统婚姻关系的解体。“养儿防老”也不行了，孩子是独立的个体，家长不能再要求养育要“收回成本”。</p><p>沉溺于虚拟互动，加上顾影自怜式的“爱无能”，让新生代的我们产生了更多独自生活和消费的需求。一个人吃饭，看电影，唱 K……要交友，也是上网找完全合心意的“同温层”，或是干脆找起了“爱豆”和“纸片人”。耗费能量，相互妥协地和真人互动，建立长久联系，似乎变得越来越不必要。</p><p><strong>其它一些为防不时之需所做的“冗余备份”也是说扔就扔。</strong>2008 年的大部分中国人依然有极高的储蓄率，连老师上课都是这么讲的。10 年之后一回头，猛然发现，别说储蓄了，连“六个钱包”都悉数掏空，献给了房子。</p><p>环顾四周，很多年轻人背负着沉重的房贷，已经毫不稀奇。所有还没有还完所有债务的人，他们的日常生活都相当紧绷，容不得财务上出现半点闪失，一旦长期失业，没有收入，原本规划好的幸福生活都会毁于一旦。</p><p>至于早几年的“大众创业”潮，我们已经连续多年说过，此刻也无需再提。但是，青年和中年若是误入 P2P 贷款深坑，老年人若是深陷传销骗局，则造成的损失更大更惨，更难以挽回。2018 这一年，无数正直、善良、老实的普通人和背后整个家庭因此沦陷，令人无比痛心。</p><p>仅仅是“生于安乐”，足以让我们整整一代人，把自己浮光掠影的生活，建立在一个深深依赖经济持续增长，收入持续改善的基础上。这样的基础，是何等的脆弱。</p><hr><h2 id="根本性的改变"><a href="#根本性的改变" class="headerlink" title="根本性的改变"></a>根本性的改变</h2><p>现在，我们终于要做好防冲击姿势，准备迎接也许是生命中第一个真正的逆境，去想过去不愿想，觉得不可能发生的事。</p><p>宏观层面，我们不多讨论。然而，具体到每个人的切身利益，<strong>“裁员”两字成为绕不过去的一个坎儿。</strong></p><p>《华夏时报》的报道称，从 2018 年 10 月开始，北京每天登报注销的公司有 2000 家左右，此前每天最多也不超过 500 家。据不完全统计，上海、广州、深圳等一线城市公司注销数量，和北京基本持平。</p><p>工作岗位数量持续下降，意味着我们维持在以往的生活水平和社会层级上越来越难，甚至竞争烈度加剧了，却连饭碗都保不住。</p><p>创新乏力带来的增长衰退，让原本的互利多赢变为零和游戏，这意味着人与人，国与国，社会各参与者之间纷纷<strong>收起了原本温情的面孔，摩擦增多，戾气横行。</strong></p><p>社会主流思潮将更倾向闭关自守，放弃那些细腻的分层，对小众人群的关照，因为再也负担不起。像法国“黄背心”一样，越来越多来自底层的反抗，只是为了解决最基本的吃饭问题。世界从全球化的高空中砰然坠地。</p><p>对每个人而言，衰退意味着<strong>所有人都只为自己，收起善意，持续利他的动机不复存在。</strong>当自保都成问题的时候，谁都没有多余的爱心匀给别人，本来就是怀疑论的人会得意于“及时止损”，而更多人则陷入加速撤退和互相踩踏。</p><p>过去一年，是什么刺痛了我们的神经，伤及了我们最为珍视的安全感？答案也许有很多，但重庆那辆从大桥坠入长江的公交车，相信肯定是其中之一。</p><p>事故一经发生，大量现场信息被广泛传播，以致人心惶惶。然而出于人类的自保机制，我们会很快忘记大多数事件的冲击，只有事件受害者和家属们，承受永无止境的失去和悲伤。尽管你有机会上热搜，但最终承担一切的还是你自己。</p><p>虽然我们还能看到有些群体，比如在校学生，可能依然沉浸在简单温馨的日常生活里，也可以因为更宏大的议题而兴奋；但这恐怕源于他们仍然衣食无忧，还没有经受社会的严峻考验。那种考验的降临，将可能让他们一夜之间完全、彻底地改变想法。</p><p>早一点产生危机感，是好事。</p><hr><h2 id="无望的“自我提升”"><a href="#无望的“自我提升”" class="headerlink" title="无望的“自我提升”"></a>无望的“自我提升”</h2><p>1930 年代“大萧条”期间，大部分美国人陷入困窘，不是因为他们能力不足，而是因为他们赖以生存的大环境，和基于此建构出来的生存经验，发生了根本改变。</p><p>这些被改变的生存经验里，其中就有这么一条——</p><p><strong>寄希望于自我提升，知识积累，充其量只能陶冶性情，对改善境遇其实没多大帮助。</strong>有学龄孩子的家长，如果想让孩子遵循考好大学——找好工作的路线，也将越来越玩不转。</p><p>原本只要你掌握更多技能，比别人会的更多，就能保证有更好的工作，更高的收入。如果运气不好的话，未来可能不管你怎样努力，最后的结局跟那些曾经看不起的“社会底层”也差不太多。</p><p>当年，在美国大街上有西装革履的求职者挂牌写道：“我懂三门手艺，会三门语言，失业三个月，只想找一份工作。”</p><p>而大多数曾从事光鲜体面活计的人，唯一能做的就是模仿上班一样，每天准点穿着套装出门，哪怕只是出去闲逛，或是到没人认识自己的地方，脱下套装讨饭吃。</p><p>萧条意味着传说中的“人人平等”，就是会以这样一种残酷的方式实现。</p><p>今天，越来越多的人报名报班，充实自己，希望掌握一些新手艺，新技能，让自己变成所谓“U 盘化生存”。不管新东家是谁，都能把自己成功“卖出去”。</p><p>一些老生常谈特别“丧”的公众号文章写到最后，实在没法收尾了，基本上都是以“充实自我”“行动”“打卡”强行结束。</p><p>但是，<strong>这也许只能让各路“知识付费”的布道师获益</strong>——“U 盘”口号的提出者罗振宇，也照例会在今年的跨年夜直播自己的讲座。</p><p>这种用知识填补焦虑的情景与当年也非常类似，只是当年好歹还没有这么多贩卖知识的人。1933 年，美国图书馆协会估计，自 1929 年以来新增的借书人大约在 200-300 万之间，而总的图书流通增长了将近 50%。</p><p>直白的说，这就好像一群女孩树立了一个价值观（不论正不正确），就是要早早的把自己打扮好，让自己“卖相好”然后能“嫁个好人家”。</p><p>她们开始前赴后继练出马甲线和翘臀，燃烧卡路里，并启动了残酷的内部竞争。然而，她们这么拼，最终能取悦谁呢？“好男人”的坑都没几个好占了，练再多也没有用。</p><p>现在觉得自己工作不够好，或者刚刚被裁，总想着通过“改变自己，自我提升”来改善境遇的人，与上面这个比喻何其相似！</p><p>就算你再怎么自我努力，超常规发挥，不也只是在一大批同等实力的同龄人当中自相残杀，披荆斩棘，只为了保住自己原来的相对地位吗？</p><p>通过提升大家的加班标准到 996，再到 10106，一点一点逼迫所有人付出本不应该付出的代价，保住一个也许是极其普通的职位，<strong>这就是职场竞争的“内卷化”</strong>。</p><p>一大批才情相似，能力高超的人，在一个顺遂的时代里，本应该过得舒舒服服，应该获得与自己能力相称的回报，却无奈需要在内卷的自相残杀中，白白耗费生命和才干。</p><p>威廉·曼彻斯特的《光荣与梦想》一书中写道：“中产阶级跌落迅速得令人心痛。在加利福利亚水库干粗活的工人中，有好多是农场主、牧师、工程师，还有一位是中学校长和一个密苏里州某银行的前任行长。”</p><p>我想，今后如果出现幼儿园老师都要求博士后学历，或者一个看大门的也得本科 211-985，或与之类似的情况，也许一点都不奇怪。</p><hr><h2 id="与真实生活中的人交朋友"><a href="#与真实生活中的人交朋友" class="headerlink" title="与真实生活中的人交朋友"></a>与真实生活中的人交朋友</h2><p>先别急着问“那我们就活该找不到工作受穷吗？”这样的问题。</p><p>为什么我们现在不太能忍受突然之间节省太多开支，突然“变穷”的生活呢？其中一个原因，我相信是<strong>我们有太多生活上的便利和安慰，过去是通过花钱购买的方式获取的。</strong></p><p>物质和精神食粮的丰富，购买力的相对提升，也让我们越发孤独。</p><p>著名的“邓巴数”规定了我们只能和最多 150 人维持紧密的人际关系，也就是指我们“知道对方是谁”并且了解自己和对方之间的关系。</p><p>然而，我们把这 150 人配额中的一大部分拿出来，贡献给了或真实、或虚拟、或明星、或草根的远程偶像。<strong>追星吃瓜刷抖音，挤占了现实生活中的人际关系。</strong></p><p>由美国全国科学基金会资助，杜克大学实施的跟踪调查显示，1985 年时美国人平均说自己有 3 个亲密朋友。这一数字在新千年伊始降到 2，到 2014 年已经是 0 。</p><p><strong>产生于网络上，暂时没有走到“奔现”这一步的关系，多数是“蜻蜓点水”</strong>，一旦就某个议题产生重大分歧，冷处理一阵，发现对方与你就这么断了联系。</p><p><strong>而至于远离地面的实体或虚拟偶像，则更是一种花钱砸出来的幻梦</strong>，他&#x2F;她无法针对你个人的困惑，给出具体的，真切可感的关怀。</p><p>如果你可以成功“自我催眠”将偶像言行强行解读为给自己说的话，也许还好；但你最好祈祷这位真人偶像千万别“糊”了，或者你追的动画&#x2F;漫画没完结没“过气”。不然，还是逃脱不了信仰崩塌。</p><p>陌生的人与人之间的关系在降温，社会变得不再友善。所以，你必须从对不固定他人的友好，对宏大叙事的关怀中退出，退回到自己和身边最亲密的人形成的圈子里。</p><p>——这个最亲密的人，当然不必须是你的父母亲属，如果暂时没有另一半也不用急着找。只是，个人要尽量<strong>少与人交恶，多交现实中的朋友，或者一对一的，有线下交流潜力的网友</strong>，少将精力放在单方面的情感付出，和漫无边际的浏览上。</p><p>不与人争吵，对有利害关系的人，比如上下级，可以避免过快透支“社交货币”，给自己未来埋下隐忧；对素不相识的人，可以尽量减少你遇到一个反社会人格的疯子，或刺激他爆发出来的几率。</p><p>而那些真实可触的友谊和情感，也将更经得起时间的考验。</p><p>来自网络的友善可能无远弗届，但如果你采信了这种友善，它一旦转化为网络暴力，伤害也将更甚。</p><p>你不可能只选择相信网上赞同你的那部分声音。如果你选择对网络批评和暴力不屑一顾，那网友们对你赞美的效力也会衰减。</p><p>信任是保持人际关系长久的基石，但信任能够建立的前提，是你要知道你们未来会有重复的互动。只有个人与个人之间进行的双向互动，才能避免不信任的加剧扩散。</p><p><strong>身边人最重要，是支撑自己走下去的最大动力</strong>。越是在艰难的时刻，他们越能让你抱团取暖，争取活下来，看到未来的曙光。</p><p>最后，“穷则独善其身，达则兼济天下”。如果你还有那么一份对远大志向和美好前程的期待，在你尚不能实现它的时候，请将其埋藏于心底，并<strong>千万不要忘记你的初心</strong>。</p><p>祝大家在新的一年里，依然平安喜乐。</p><p>LJ 执笔</p><p>cnBeta.COM 全体成员</p><p>转载自：<a href="https://www.cnbeta.com/articles/tech/803761.htm" title="cnBeta 2019新年贺词">cnBeta 2019 新年贺词</a> 【原文已删】</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>共享一波妹子图</title>
    <link href="/read/106.html"/>
    <url>/read/106.html</url>
    
    <content type="html"><![CDATA[<p>没什么写的</p><p>前两天在 V2 看到一个大佬用爬虫爬了 30+G 的妹子图<br>避免资源失效，我也 copy 了一份，哈哈哈<br>现特共享出来，有缘看到的大佬欢迎自取</p><span id="more"></span><p>来源：<a href="https://www.v2ex.com/t/515687">https://www.v2ex.com/t/515687</a></p><p>我打包下载到网盘了，可以在线浏览缩略图，遇到喜欢的也可以单张下载~</p><blockquote><p>据科学研究表明，多看美女可以延年益寿，哈哈*(:з」∠)*</p></blockquote><p>先随便放几张凑数</p><p><img src="https://disk.cuojue.org/p/OneDrive/%E5%9B%BE%E7%89%87/%E5%A6%B9%E5%AD%90%E5%9B%BE/2084_721/%E5%8E%9A%E5%8E%9A%E7%9A%84%E6%AF%9B%E8%A1%A3/%E5%8E%9A%E5%8E%9A%E7%9A%84%E6%AF%9B%E8%A1%A3%20%281%29.jpg?type=large"></p><p><img src="https://disk.cuojue.org/p/OneDrive/%E5%9B%BE%E7%89%87/%E5%A6%B9%E5%AD%90%E5%9B%BE/2158_441/%E5%81%A5%E8%BA%AB%E6%88%BF%E7%9A%84%E7%BE%8E%E5%B0%91%E5%A5%B3/%E5%81%A5%E8%BA%AB%E6%88%BF%E7%9A%84%E7%BE%8E%E5%B0%91%E5%A5%B3%20%282%29.JPG?type=large"></p><p><img src="https://disk.cuojue.org/p/OneDrive/%E5%9B%BE%E7%89%87/%E5%A6%B9%E5%AD%90%E5%9B%BE/20180310144844_3571/%E6%B5%B4%E7%BC%B8%E9%87%8C%E7%9A%84%E7%99%BD%E4%B8%9D/%E6%B5%B4%E7%BC%B8%E9%87%8C%E7%9A%84%E7%99%BD%E4%B8%9D%20%282%29.JPG?type=large"></p><p><font size=5>网盘地址：<a href="https://disk.cuojue.org/OneDrive/%E5%9B%BE%E7%89%87/">Link</a></font></p><p>ps：网盘左上角按钮可切换到看图模式</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么现在很少有男生追女生了？</title>
    <link href="/read/105.html"/>
    <url>/read/105.html</url>
    
    <content type="html"><![CDATA[<p>我发了一个请求,</p><p>请求方式、参数、路径写的很清楚了，并且请求了很多次！</p><p>她并没有响应数据，所以我不知道怎么显示数据，继续又发了请求，她响应了个 404，我觉得我的路径有问题。</p><p>经她闺蜜指点，我应该先和她成为好朋友。</p><span id="more"></span><p>这次我换了个参数：情人节那天发了个 520，这次给我响应了，登上主页面了，星巴克咖啡厅，当面了解了下，回家我对我各种状况进行了增删查改。</p><p>隔了几天又发了请求，这次她显示权限不足，我又在自身找 bug。</p><p>不经意间发现有好几个人同时再给她发请求，且都得到回应了!</p><p>最后我知道我这样的初级程序猿无法直视这样的高并发的问题，不能保证线程安全!</p><p>转载自：<br><a href="http://www.coaadmin.cn/life/why-are-few-boys-chasing-girls-now.html" title="为什么现在很少有男生追女生了？">为什么现在很少有男生追女生了？</a><br><a href="http://www.789dl.cn/70.html" title="为什么现在很少有男生追女生了？">为什么现在很少有男生追女生了？</a></p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>插件更新：Typecho的Google Authenticator两步验证</title>
    <link href="/read/Typecho_Google_Authenticator_02.html"/>
    <url>/read/Typecho_Google_Authenticator_02.html</url>
    
    <content type="html"><![CDATA[<p>0.0.1 版可查看之前的博文<br><a href="https://cuojue.org/read/Typecho_Google_Authenticator.html">https://cuojue.org/read/Typecho_Google_Authenticator.html</a></p><h2 id="本版特点"><a href="#本版特点" class="headerlink" title="本版特点"></a>本版特点</h2><p>相对于 0.0.1 版，0.0.2 版的验证逻辑<strong>全部更新</strong>，推荐升级！<br>支持验证态保持，一次登录后，在 session 或 cookie 有效期内无需再次验证<br>废弃 0.0.1 使用的登录接口，采用插件内注册的 Route 来处理 otp，无需等待 tp 返回的 2s 后验证<br>废弃 0.0.1 使用的插入点<code>header</code>，直接采用<code>common</code>插入</p><span id="more"></span><h4 id="兼容所有符合-RFC6238-规范的-AuthOTP-软件"><a href="#兼容所有符合-RFC6238-规范的-AuthOTP-软件" class="headerlink" title="兼容所有符合 RFC6238 规范的 AuthOTP 软件"></a>兼容所有符合 <a href="https://tools.ietf.org/html/rfc6238" title="rfc6238">RFC6238</a> 规范的 AuthOTP 软件</h4><ul><li>Microsoft Authenticator</li><li>Google Authenticator</li><li>1Password</li><li>Authy</li><li>KeePass</li><li>LastPass</li><li>…</li></ul><h4 id="后台截图"><a href="#后台截图" class="headerlink" title="后台截图"></a>后台截图</h4><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/11/2777331120.png" alt="后台截图.png"></p><h4 id="验证界面截图"><a href="#验证界面截图" class="headerlink" title="验证界面截图"></a>验证界面截图</h4><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/11/86736268.png" alt="验证界面截图.png"></p><h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><h4 id="0-0-6"><a href="#0-0-6" class="headerlink" title="0.0.6"></a>0.0.6</h4><ul><li>[change] 使用 <code>jquery-qrcode</code> 插件在浏览器端生成二维码(不再使用外站的 API 来生成二维码,保证 Key 的安全性).</li></ul><h4 id="0-0-5"><a href="#0-0-5" class="headerlink" title="0.0.5"></a>0.0.5</h4><ul><li>[fix] 修复启用插件 500 错误，改为使用 jQuery 获取 SecretKey 显示二维码</li></ul><h4 id="0-0-4"><a href="#0-0-4" class="headerlink" title="0.0.4"></a>0.0.4</h4><ul><li>[add] 支持后台直接显示二维码</li><li>[fix] 修改为使用联图 API 显示二维码</li><li>[fix] 修复博客名称为中文时扫描二维码提示错误</li><li>[fix] 修复卸载的时候没有删除路由</li><li>[fix] 登录成功后主动访问路由地址会显示一条 msg 验证失败</li></ul><h4 id="0-0-3"><a href="#0-0-3" class="headerlink" title="0.0.3"></a>0.0.3</h4><ul><li>[add] 更新支持记住本机</li></ul><h4 id="0-0-2"><a href="#0-0-2" class="headerlink" title="0.0.2"></a>0.0.2</h4><ul><li>支持 typecho 最新版</li><li>流程优化,符合大多数网站逻辑</li><li>先验证登录信息</li><li>然后再验证 otp</li><li>修复插入 header 导致的新版 css 错乱</li><li>支持密码管理软件自动填充 (1password 等)</li></ul><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>下载插件，修改文件名为<code>GAuthenticator</code>放到<code>/usr/plugins</code>目录，然后到后台启用</p><p>插件默认关闭，首次开启需要<strong>扫描二维码绑定</strong>之后<strong>填写手机上显示的代码</strong>，验证成功之后才可以启用</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><strong>下载地址：<a href="https://github.com/weicno/typecho-Authenticator/releases" title="GitHub typecho Authenticator">GitHub</a></strong></p><h3 id="请注意：从-0-0-1-升级到-0-0-2-版本需要卸载重新安装！"><a href="#请注意：从-0-0-1-升级到-0-0-2-版本需要卸载重新安装！" class="headerlink" title="请注意：从 0.0.1 升级到 0.0.2+版本需要卸载重新安装！"></a>请注意：从 0.0.1 升级到 0.0.2+版本需要卸载重新安装！</h3><hr><p>有什么问题可以在本页面回复</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>适用于Typecho的Google Analytics加速插件</title>
    <link href="/read/typecho_plugin_ga.html"/>
    <url>/read/typecho_plugin_ga.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>昨天在腾讯云的无服务器函数上试了一下 Google Analytics 加速，发现腾讯云的无服务器函数在长时间不允许的情况下会回收资源，再次调用要重新加载，速度特别慢 (&gt; 2s)，对于博客这样的小站来说，一天都没几个人访问，结果一般情况下比直接加载 GA 还慢（？？？我是为了加速才用你的好吗？你却更慢了！:roll:）</p></blockquote><span id="more"></span><p><a href="https://cuojue.org/read/scf_for_ga.html">利用腾讯云无服务器函数加速 Google Analytics</a><br>想了解可以点击看看</p><hr><p>下面正题，由于以上项目过于坑爹。重新写了一个在 Typecho 下直接使用的 GA 代理插件，异步返回（如果你的服务器支持的话）</p><p>下载后复制<code>GoogleAnalytics</code>文件夹到<code>plugins</code><br>在后台安装后，填入你的 跟踪 ID 即可</p><p>如果你使用了 Pjax 加载，在 Pjax 回调填入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">ga</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>, navigator, location);<br></code></pre></td></tr></table></figure><p>即可统计全站</p><p>下载地址：<a href="https://github.com/weicno/Typecho-GoogleAnalytics-Plugin" title="GitHub">GitHub</a></p><p>参考链接：<br><a href="https://www.bfdz.ink/2018/10/23/109/">https://www.bfdz.ink/2018/10/23/109/</a><br><a href="https://stneng.com/google-analytics-%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%EF%BC%89/">https://stneng.com/google-analytics-%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%EF%BC%89/</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>利用腾讯云无服务器函数加速Google Analytics</title>
    <link href="/read/scf_for_ga.html"/>
    <url>/read/scf_for_ga.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近重新开始打理博客后，看到自己的 ga 统计都被自己浏览器插件过滤了:?:重新给处理一下吧</p></blockquote><p>首先是看了的 BFDZ 大佬的 <a href="https://www.bfdz.ink/2018/10/23/109/" title="Google Analytics 加载优化">Google Analytics 加载优化</a> 然后用了两天，觉得还不错，准备自己建一个，<del>但是又不想大张旗鼓的部署在服务器上面</del> <em>主要是因为穷，没钱</em></p><span id="more"></span><p>然后看到腾讯云的无服务器函数正在测试，然后据说以后还是有免费额度的，蹭一蹭</p><blockquote><p>无服务器云函数（Serverless Cloud Function，SCF）是腾讯云为企业和开发者们提供的无服务器执行环境，帮助您在无需购买和管理服务器的情况下运行代码。您只需使用平台支持的语言编写核心代码并设置代码运行的条件，即可在腾讯云基础设施上弹性、安全地运行代码。SCF 是实时文件处理和数据处理等场景下理想的计算平台。</p></blockquote><hr><p>##先创建一个 PHP 的函数<br>（为什么？因为 PHP 是世界上最好的语言）</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/11/1356262822.png" alt="1.png"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/11/789965526.png" alt="2.png"></p><p>##直接在线编辑函数代码</p><p>修改执行方法为<code>index.ga</code><br>然后在代码框填入以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ga</span>(<span class="hljs-params"><span class="hljs-variable">$event</span>, <span class="hljs-variable">$context</span></span>)</span>&#123;<br><br>    <span class="hljs-comment">//拦截参数不完整</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;headers-&gt;referer) ||<br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;headers-&gt;&#123;<span class="hljs-string">&#x27;user-agent&#x27;</span>&#125;) ||<br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;ga) ||<br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;dt) ||<br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;dr) ||<br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;ul) ||<br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;sd) ||<br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;sr) ||<br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;vp) ||<br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;z))<br>    &#123;<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;statusCode&#x27;</span>=&gt;<span class="hljs-number">403</span>,<br>            <span class="hljs-string">&#x27;headers&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;content-type&quot;</span>=&gt;<span class="hljs-string">&quot;text/html&quot;</span>),<br>            <span class="hljs-string">&#x27;body&#x27;</span>=&gt;<span class="hljs-string">&#x27;403&#x27;</span>,<br>            <span class="hljs-string">&#x27;isBase64&#x27;</span>=&gt;<span class="hljs-literal">false</span><br>            );<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//处理cookies</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;headers-&gt;cookie))&#123;<br>        <span class="hljs-variable">$cookies</span> = <span class="hljs-variable">$event</span>-&gt;headers-&gt;cookie;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$cookies</span>,<span class="hljs-string">&#x27;;&#x27;</span>)===<span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-comment">//本域名下cookie应该只存在uuid一个值</span><br>            <span class="hljs-variable">$array_uuid</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-variable">$cookies</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$array_uuid</span>)==<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-variable">$array_uuid</span>[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;uuid&#x27;</span>)<span class="hljs-variable">$uuid</span> = <span class="hljs-variable">$array_uuid</span>[<span class="hljs-number">1</span>];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//cookie被提交了多个值,分割值</span><br>            <span class="hljs-variable">$array_cookie</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;;&#x27;</span>,<span class="hljs-variable">$cookies</span>);<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$array_cookie</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<br>                <span class="hljs-variable">$array_uuid</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-variable">$value</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$array_uuid</span>)==<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-variable">$array_uuid</span>[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;uuid&#x27;</span>)&#123;<br>                    <span class="hljs-variable">$uuid</span> = <span class="hljs-variable">$array_uuid</span>[<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//取第一个uuid</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$uuid</span>)) &#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">uniqid</span>(<span class="hljs-title function_ invoke__">mt_rand</span>(), <span class="hljs-literal">true</span>));<br>        <span class="hljs-variable">$uuid</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>) . <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-variable">$uuid</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>) . <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-variable">$uuid</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>) . <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-variable">$uuid</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">16</span>,<span class="hljs-number">4</span>) . <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-variable">$uuid</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">20</span>,<span class="hljs-number">12</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$url</span>=<span class="hljs-string">&#x27;v=1&amp;t=pageview&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;tid=&#x27;</span>.<span class="hljs-variable">$event</span>-&gt;queryString-&gt;ga.<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;cid=&#x27;</span>.<span class="hljs-variable">$uuid</span>.<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;dl=&#x27;</span>.<span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">rawurldecode</span>(<span class="hljs-variable">$event</span>-&gt;headers-&gt;referer)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;uip=&#x27;</span>.<span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">rawurldecode</span>(<span class="hljs-variable">$event</span>-&gt;requestContext-&gt;sourceIp)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;ua=&#x27;</span>.<span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">rawurldecode</span>(<span class="hljs-variable">$event</span>-&gt;headers-&gt;&#123;<span class="hljs-string">&#x27;user-agent&#x27;</span>&#125;)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;dt=&#x27;</span>.<span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">rawurldecode</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;dt)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;dr=&#x27;</span>.<span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">rawurldecode</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;dr)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;ul=&#x27;</span>.<span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">rawurldecode</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;ul)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;sd=&#x27;</span>.<span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">rawurldecode</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;sd)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;sr=&#x27;</span>.<span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">rawurldecode</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;sr)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;vp=&#x27;</span>.<span class="hljs-title function_ invoke__">rawurlencode</span>(<span class="hljs-title function_ invoke__">rawurldecode</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;vp)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;z=&#x27;</span>.<span class="hljs-variable">$event</span>-&gt;queryString-&gt;z;<br>    <span class="hljs-variable">$url</span>=<span class="hljs-string">&#x27;https://www.google-analytics.com/collect?&#x27;</span>.<span class="hljs-variable">$url</span>;<br>    <span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>();<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>    <span class="hljs-variable">$extime</span> = <span class="hljs-title function_ invoke__">date</span>(DATE_COOKIE,<span class="hljs-title function_ invoke__">time</span>()+<span class="hljs-number">368400000</span>);<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;statusCode&#x27;</span>=&gt;<span class="hljs-number">204</span>,<br>        <span class="hljs-string">&#x27;headers&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&quot;content-type&quot;</span>=&gt;<span class="hljs-string">&quot;image/jpg&quot;</span>,<br>            <span class="hljs-string">&quot;set-cookie&quot;</span>=&gt;<span class="hljs-string">&quot;uuid=<span class="hljs-subst">&#123;$uuid&#125;</span>; expires=<span class="hljs-subst">&#123;$extime&#125;</span>; path=/; HttpOnly&quot;</span><br>            ),<br>        <span class="hljs-string">&#x27;body&#x27;</span>=&gt;<span class="hljs-string">&#x27;is work&#x27;</span>,<br>        <span class="hljs-string">&#x27;isBase64&#x27;</span>=&gt;<span class="hljs-literal">false</span><br>        );<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以保存测试一下，应该会输出 403，因为没有附带参数被拦截了</p><h2 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h2><p>添加一个触发方式，选择 API 网关触发<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/11/1964014910.png" alt="3.png"></p><h2 id="启用响应集成"><a href="#启用响应集成" class="headerlink" title="启用响应集成"></a>启用响应集成</h2><p>默认添加 API 网关后已经可以访问了，但是会输出 json，为了<del>世界的和平</del>，我们要自定义响应头为 204 加快一下浏览器的处理速度<br>进入 API 网关编辑一下刚才新建的网关<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/11/1765206485.png" alt="4.png"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/11/2293716392.png" alt="5.png"></p><p>除了后端这里打钩，其他都默认不用改（貌似进这个页面默认是打钩的），然后提交</p><h4 id="提交后记得要发布"><a href="#提交后记得要发布" class="headerlink" title="提交后记得要发布"></a>提交后记得要发布</h4><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/11/1079453171.png" alt="6.png"></p><h2 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h2><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/11/3670626061.png" alt="7.png"></p><p>可以绑定自定义域名并且支持 SSL，当然备案是必须的~</p><h2 id="前端应用"><a href="#前端应用" class="headerlink" title="前端应用"></a>前端应用</h2><p>在合适的地方插入以下 JS 代码即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ga</span>(<span class="hljs-params">a, b, c, d, e</span>) &#123;<br><span class="hljs-keyword">var</span> f = c.<span class="hljs-property">screen</span>,<br>g = <span class="hljs-built_in">encodeURIComponent</span>,<br>h = [<span class="hljs-string">&quot;ga=&quot;</span> + a, <span class="hljs-string">&quot;dt=&quot;</span> + <span class="hljs-title function_">g</span>(d.<span class="hljs-property">title</span>), <span class="hljs-string">&quot;dr=&quot;</span> + <span class="hljs-title function_">g</span>(d.<span class="hljs-property">referrer</span>), <span class="hljs-string">&quot;ul=&quot;</span> + (e.<span class="hljs-property">language</span> || e.<span class="hljs-property">browserLanguage</span> || e.<span class="hljs-property">userLanguage</span>), <span class="hljs-string">&quot;sd=&quot;</span> + f.<span class="hljs-property">colorDepth</span> + <span class="hljs-string">&quot;-bit&quot;</span>, <span class="hljs-string">&quot;sr=&quot;</span> + f.<span class="hljs-property">width</span> + <span class="hljs-string">&quot;x&quot;</span> + f.<span class="hljs-property">height</span>, <span class="hljs-string">&quot;vp=&quot;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(d.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span>, c.<span class="hljs-property">innerWidth</span> || <span class="hljs-number">0</span>) + <span class="hljs-string">&quot;x&quot;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(d.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>, c.<span class="hljs-property">innerHeight</span> || <span class="hljs-number">0</span>), <span class="hljs-string">&quot;z=&quot;</span> + +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>];<br>c.<span class="hljs-property">__ga_img</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>, c.<span class="hljs-property">__ga_img</span>.<span class="hljs-property">src</span> = b + <span class="hljs-string">&quot;?&quot;</span> + h.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&amp;&quot;</span>)<br>&#125;<br><span class="hljs-title function_">ga</span>(<span class="hljs-string">&quot;UA-XXXXXX-1&quot;</span>, <span class="hljs-string">&quot;https://ga.cuojue.org/ga/ga/&quot;</span>, <span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>, navigator, location);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>为什么我要把函数封装以下独立出来呢，因为现在博客用的模板是 pjax 加载的，所以要在 pjax 加载完毕后回调一下这个函数，让每个页面都统计到</p><h2 id="继续改进"><a href="#继续改进" class="headerlink" title="继续改进"></a>继续改进</h2><p>现在函数是同步返回的，有空看下改成异步执行加快一下速度~</p><hr><p>参考内容：<br><a href="https://www.bfdz.ink/2018/10/23/109/">https://www.bfdz.ink/2018/10/23/109/</a></p><p><a href="https://stneng.com/google-analytics-%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%EF%BC%89/">https://stneng.com/google-analytics-%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%EF%BC%89/</a></p><p><a href="https://imququ.com/post/summary-of-my-blog-optimization.html#toc-2">https://imququ.com/post/summary-of-my-blog-optimization.html#toc-2</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>整合Typecho评论邮件提醒加上微信推送</title>
    <link href="/read/90.html"/>
    <url>/read/90.html</url>
    
    <content type="html"><![CDATA[<p>整理博客的时候发现邮件不会发送了，检查了一下是启用了<a href="https://yian.me/blog/php/typecho-plugin--comment2wechat.html" title="Comment2Wechat">Comment2Wechat</a> 微信推送插件之后出现的，然后这个插件还有一个缺点就是自己评论的也会推送，so 整合一下把两个插件合二为一</p><span id="more"></span><p>首先修改配置接口</p><p><code>/plugins/CommentToMail/Plugin.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$form</span>-&gt;<span class="hljs-title function_ invoke__">addInput</span>(<span class="hljs-variable">$titleForGuest</span>-&gt;<span class="hljs-title function_ invoke__">addRule</span>(<span class="hljs-string">&#x27;required&#x27;</span>, <span class="hljs-title function_ invoke__">_t</span>(<span class="hljs-string">&#x27;访客接收邮件标题 不能为空&#x27;</span>)));<br></code></pre></td></tr></table></figure><p>下面加入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$key</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Typecho_Widget_Helper_Form_Element_Text</span>(<span class="hljs-string">&#x27;sckey&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-title function_ invoke__">_t</span>(<span class="hljs-string">&#x27;SCKEY&#x27;</span>), <span class="hljs-title function_ invoke__">_t</span>(<span class="hljs-string">&#x27;SCKEY 需要在 &lt;a href=&quot;http://sc.ftqq.com/&quot;&gt;Server酱&lt;/a&gt; 注册&lt;br /&gt;</span><br><span class="hljs-string">同时，注册后需要在 &lt;a href=&quot;http://sc.ftqq.com/&quot;&gt;Server酱&lt;/a&gt; 绑定你的微信号才能收到推送&#x27;</span>));<br><span class="hljs-variable">$form</span>-&gt;<span class="hljs-title function_ invoke__">addInput</span>(<span class="hljs-variable">$key</span>);<br></code></pre></td></tr></table></figure><p>然后在<br><code>/plugins/CommentToMail/Action.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">authorMail</span>()-&gt;<span class="hljs-title function_ invoke__">sendMail</span>();<br></code></pre></td></tr></table></figure><p>上一行插入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//向博主发推送</span><br><span class="hljs-variable">$sckey</span> = <span class="hljs-variable language_">$this</span>-&gt;_cfg-&gt;sckey;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$sckey</span>))&#123;<br>    <span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;有人在您的博客发表了评论&quot;</span>;<br>    <span class="hljs-variable">$desp</span> = <span class="hljs-string">&quot;**&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;_email-&gt;author.<span class="hljs-string">&quot;** 在 [「&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;_email-&gt;title.<span class="hljs-string">&quot;」](&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;_email-&gt;permalink.<span class="hljs-string">&quot; \&quot;&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;_email-&gt;title.<span class="hljs-string">&quot;\&quot;) 中说到: \n\n &gt; &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;_email-&gt;text;<br>    <span class="hljs-variable">$postdata</span> = <span class="hljs-title function_ invoke__">http_build_query</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;text&#x27;</span> =&gt; <span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;desp&#x27;</span> =&gt; <span class="hljs-variable">$desp</span>));<br>    <span class="hljs-variable">$opts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;http&#x27;</span> =&gt;<br>        <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;method&#x27;</span>  =&gt; <span class="hljs-string">&#x27;POST&#x27;</span>,<br>            <span class="hljs-string">&#x27;header&#x27;</span>  =&gt; <span class="hljs-string">&#x27;Content-type: application/x-www-form-urlencoded&#x27;</span>,<br>            <span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$postdata</span><br>            )<br>        );<br>    <span class="hljs-variable">$context</span>  = <span class="hljs-title function_ invoke__">stream_context_create</span>(<span class="hljs-variable">$opts</span>);<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;http://sc.ftqq.com/&#x27;</span>.<span class="hljs-variable">$sckey</span>.<span class="hljs-string">&#x27;.send&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-variable">$context</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>搞定</p><p>博主目前使用的邮件发送插件版本为<br>CommentToMail 2.0.0 by <a href="http://www.byends.com/" title="Byends Upd">Byends Upd</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>记录一下我对新主题handsome的小修改</title>
    <link href="/read/88.html"/>
    <url>/read/88.html</url>
    
    <content type="html"><![CDATA[<h2 id="微信内分享打开进首页"><a href="#微信内分享打开进首页" class="headerlink" title="微信内分享打开进首页"></a>微信内分享打开进首页</h2><p>因为微信内不支持 pushState 导致文章分享出去也是首页地址，看不到具体文章</p><span id="more"></span><p>动刀内容</p><p><code>/themes/handsome/libs/functions.php(64)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">@<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;PJAX_ENABLED&quot;</span>, <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-string">&#x27;isPjax&#x27;</span>, <span class="hljs-variable">$options</span>-&gt;featuresetup));<br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//修改判断在微信环境强行禁用PJAX</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="hljs-string">&#x27;MicroMessenger&#x27;</span>)!==<span class="hljs-literal">false</span>) &#123;<br>    @<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;PJAX_ENABLED&quot;</span>, <span class="hljs-literal">false</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    @<span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;PJAX_ENABLED&quot;</span>, <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-string">&#x27;isPjax&#x27;</span>, <span class="hljs-variable">$options</span>-&gt;featuresetup));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="正文标题右边的分享和截图"><a href="#正文标题右边的分享和截图" class="headerlink" title="正文标题右边的分享和截图"></a>正文标题右边的分享和截图</h2><p>因为我不用空间微博之类的，然后截图提示跨站（又拍云上设置允许跨站请求又无效？？没看到头部有内容输出），索性眼不见心不烦</p><p><code>/themes/handsome/libs/Content.php (122)</code><br>简单的加个<code>display: none;</code>风格 :shock:</p><h2 id="又拍云联盟的-LOGO"><a href="#又拍云联盟的-LOGO" class="headerlink" title="又拍云联盟的 LOGO"></a>又拍云联盟的 LOGO</h2><p>之前还特地发邮件给我说要换成新 logo 不能使用文字链接</p><p><code>/themes/handsome/component/sidebar.php (103)</code></p><p>加几句，不想占用主题提供的广告框，广告两个字碍眼</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!--输出又拍云--&gt;<br>&lt;section id=<span class="hljs-string">&quot;tag_cloud-2&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">widget</span> <span class="hljs-title">widget_tag_cloud</span> <span class="hljs-title">wrapper</span>-<span class="hljs-title">md</span> <span class="hljs-title">clear</span>&quot;&gt;</span><br><span class="hljs-class"> &lt;<span class="hljs-title">h3</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">widget</span>-<span class="hljs-title">title</span> <span class="hljs-title">m</span>-<span class="hljs-title">t</span>-<span class="hljs-title">none</span> <span class="hljs-title">text</span>-<span class="hljs-title">md</span>&quot;&gt;&lt;?<span class="hljs-title">php</span> <span class="hljs-title">_me</span>(&quot;<span class="hljs-title">CDN</span>赞助&quot;) ?&gt;&lt;/<span class="hljs-title">h3</span>&gt;</span><br><span class="hljs-class"> &lt;<span class="hljs-title">a</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">social</span>&quot; <span class="hljs-title">href</span>=&quot;<span class="hljs-title">https</span>://<span class="hljs-title">www</span>.<span class="hljs-title">upyun</span>.<span class="hljs-title">com</span>&quot; <span class="hljs-title">target</span>=&quot;<span class="hljs-title">_blank</span>&quot; <span class="hljs-title">title</span>=&quot;又拍云提供全网<span class="hljs-title">CDN</span>支持&quot;&gt;&lt;<span class="hljs-title">img</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">https</span>://<span class="hljs-title">static</span>.<span class="hljs-title">cuojue</span>.<span class="hljs-title">org</span>/<span class="hljs-title">res</span>/<span class="hljs-title">images</span>/<span class="hljs-title">upyun_logo8</span>.<span class="hljs-title">svg</span>?<span class="hljs-title">h400</span>&quot; <span class="hljs-title">alt</span>=&quot;又拍云&quot;&gt;&lt;/<span class="hljs-title">a</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">section</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="图片文件名引发的-404"><a href="#图片文件名引发的-404" class="headerlink" title="图片文件名引发的 404"></a>图片文件名引发的 404</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-keyword">/themes/</span>handsome<span class="hljs-keyword">/usr/</span>img/sj<br><span class="hljs-keyword">/themes/</span>handsome<span class="hljs-keyword">/usr/</span>img/sj2<br></code></pre></td></tr></table></figure><p>这两个目录是作者提供的头部图片，BUG 是文件默认寻找的下标是 0，然而不存在 0.jpg 这样的文件，所以会产生 404，解决方法是把数字最大的文件名改成 0.jpg</p><h2 id="文章和评论中的表情被解析了"><a href="#文章和评论中的表情被解析了" class="headerlink" title="文章和评论中的表情被解析了"></a>文章和评论中的表情被解析了</h2><p>文章和评论中的表情贴图被解析为了 fancybox 相册:?:<br>解决方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/themes/</span>handsome<span class="hljs-regexp">/libs/</span>Content.php (<span class="hljs-number">1287</span>)<br><span class="hljs-regexp">/themes/</span>handsome<span class="hljs-regexp">/libs/</span>Content.php (<span class="hljs-number">1389</span>)<br></code></pre></td></tr></table></figure><p>在 <code>&lt;img</code> 标签后面添加</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nogallery</span><br></code></pre></td></tr></table></figure><h2 id="表情被解析到了头图"><a href="#表情被解析到了头图" class="headerlink" title="表情被解析到了头图"></a>表情被解析到了头图</h2><p>修改<br><code>/themes/handsome/libs/Content.php(542)</code><br>屏蔽文章内直接获取 img 标签提取成头图<br>也就是直接屏蔽第一个 if</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$thumbUrl</span>))<br></code></pre></td></tr></table></figure><h2 id="统计和-Google-Analytics"><a href="#统计和-Google-Analytics" class="headerlink" title="统计和 Google Analytics"></a>统计和 Google Analytics</h2><p>由于全站用了 pjax 加载，在浏览的时候默认只有入口页会统计到，pjax 加载出来的内容没有重复加载统计，重写一下统计的 js 独立一个函数出来，在主题配置的 pjax 回调调用这个函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">ga(<span class="hljs-string">&quot;UA-77075137-1&quot;</span>, <span class="hljs-string">&quot;https://ga.giuem.com&quot;</span>, <span class="hljs-built_in">window</span>, <span class="hljs-built_in">document</span>, navigator, location);<br></code></pre></td></tr></table></figure><p>2018-11-19 更新：<br><del>已经改用自建 GA 代理</del><br>已改用插件</p><p><a href="https://cuojue.org/read/typecho_plugin_ga.html">适用于 Typecho 的 Google Analytics 加速插件</a></p><p>这里顺便感谢一下 BFDZ 大佬提供的 GA 代理 <a href="https://www.bfdz.ink/2018/10/23/109/" title="Google Analytics 加载优化">Google Analytics 加载优化</a></p><hr><p>总的来说，这个主题真的不错，感谢作者 <a href="https://www.ihewro.com/" title="友人C">友人 C</a> 为我们提供如此精致的主题模板.</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Http Task Queue 异步列队服务搭建记录</title>
    <link href="/read/87.html"/>
    <url>/read/87.html</url>
    
    <content type="html"><![CDATA[<p>最近在开发一套 CRM 系统，需要用到列队服务做推送，然后看到了有前辈已经造好了轮子 <a href="http://blog.star7th.com/2016/09/2114.html" title="开源的任务队列服务HTQ">开源的任务队列服务 HTQ</a> 直接部署一下试试</p><p>首先我的服务器用的 Centos7 并没有装 nodejs<br>下载源码编译一下 ps:编译时间好 tm 长</p><span id="more"></span><h2 id="开始编译安装-nodejs"><a href="#开始编译安装-nodejs" class="headerlink" title="开始编译安装 nodejs"></a>开始编译安装 nodejs</h2><pre><code class="hljs">wget https://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gztar zxvf node-v10.13.0.tar.gzcd node-v10.13.0./configuremakemake install</code></pre><p>安装完毕后测试一下</p><pre><code class="hljs">[root@Centos htq]# node -vv10.13.0[root@Centos htq]# npm -v6.4.1</code></pre><p>ok</p><h2 id="开始安装-HTQ"><a href="#开始安装-HTQ" class="headerlink" title="开始安装 HTQ"></a>开始安装 HTQ</h2><p>执行命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>安装完毕后，首先修改一下<code>config.json</code>里面的 token</p><p>然后执行以下命令启动：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">htq</span>.js<br></code></pre></td></tr></table></figure><p>上面这种启动方式是临时运行的，关闭命令行窗口就会停止了。如果想一直在后台运行，则可：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">nohup <span class="hljs-keyword">node</span> <span class="hljs-title">htq</span>.js &gt; ~/htq.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p>如果想关闭退出，可运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">killall -<span class="hljs-number">9</span> <span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p>下面就是在业务里面使用了，直接 HTTP 投递任务</p><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p><strong>采用 PM2 来守护进程和开机自启</strong></p><p>安装 PM2</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> pm2 -g<br></code></pre></td></tr></table></figure><p>从 PM2 启动 HTQ 服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pm2 start <span class="hljs-regexp">/home/</span>htq/htq.js --name=<span class="hljs-string">&quot;HTQServer&quot;</span><br></code></pre></td></tr></table></figure><p>设置开机自启</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> startup<br></code></pre></td></tr></table></figure><h1 id="HTQ-的使用文档"><a href="#HTQ-的使用文档" class="headerlink" title="HTQ 的使用文档"></a>HTQ 的使用文档</h1><h2 id="添加队列"><a href="#添加队列" class="headerlink" title="添加队列"></a>添加队列</h2><p><strong>请求 URL：</strong></p><ul><li><code>http://server:5999/api/addQueue</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST</li></ul><p><strong>参数：</strong></p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">queue_name</td><td align="left">是</td><td align="left">string</td><td>队列名，英文+数字，不要出现中文</td></tr><tr><td align="left">type</td><td align="left">是</td><td align="left">string</td><td>类型。可以是”real_time”、”timing”、”variable” ，分别对应实时队列、定时队列、可变队列。如果是可变队列，则会对执行任务的返回结果有要求。请参考添加任务接口的备注说明部分</td></tr><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>请填写 config.json 里的 app_key 以供认证。初次安装 HTQ 可更改默认的值以提高安全性。更改后需要重启 HTQ 以生效</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>请填写 config.json 里的 app_token 以供认证。初次安装 HTQ 可更改默认的值以提高安全性。更改后需要重启 HTQ 以生效</td></tr><tr><td align="left">stepping_time</td><td align="left">否</td><td align="left">int</td><td>步进时间，单位是秒。当队列类型是可变队列的时候请传此参数。可变队列的执行机制请参考下文的备注部分。了解执行机制能让你更清晰地知道该如何设置此值</td></tr><tr><td align="left">max_time_interval</td><td align="left">否</td><td align="left">int</td><td>最大时间间隔，当队列类型是可变队列的时候请传此参数。可变队列的执行机制请参考下文的备注部分 。了解执行机制能让你更清晰地知道该如何设置此值</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>     <span class="hljs-string">&quot;error_code&quot;</span> : 0,<br>     <span class="hljs-string">&quot;message&quot;</span> : &quot;添加成功&quot;<br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>失败返回示例</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>     <span class="hljs-string">&quot;error_code&quot;</span> : 1000,<br>     <span class="hljs-string">&quot;message&quot;</span> : &quot;认证失败&quot;<br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>可变队列的执行机制</strong></p><p>可变队列的某个任务进入队列后，其 url 会被触发访问。URL 执行的页面若返回字符串“reset”【 即直接在 url 的页面打印“reset”，如命令 print(“reset”)】，则任务的执行时间间隔会重置。若返回字符串”done”，则结束并删除当前任务.其他情况，URl 都会被延迟下一次执行。延迟的时间计算公式是：执行次数 X 步进时间(stepping_time) 。其中，延迟时间最大值为 max_time_interval。</p><p>所以，当 URl 没有被重置或者结束的时候，它会慢慢地增大下次执行时间，变得越来越慢，最后达到最大间隔时间 max_time_interval 后将一直保持这个执行时间间隔。直至得到重置命令或者结束命令.</p><h2 id="添加任务到队列"><a href="#添加任务到队列" class="headerlink" title="添加任务到队列"></a>添加任务到队列</h2><p><strong>请求 URL：</strong></p><ul><li><code>http://server:5999/api/addTask</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST</li></ul><p><strong>参数：</strong></p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">queue_name</td><td align="left">是</td><td align="left">string</td><td>无</td></tr><tr><td align="left">url</td><td align="left">是</td><td align="left">string</td><td>如 <code>https://cuojue.org/test?test=123&amp;ff=22</code></td></tr><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>请填写 config.json 里的 app_key 以供认证。初次安装 HTQ 可更改默认的值以提高安全性。更改后需要重启 HTQ 以生效</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>请填写 config.json 里的 app_token 以供认证。初次安装 HTQ 可更改默认的值以提高安全性。更改后需要重启 HTQ 以生效</td></tr><tr><td align="left">execute_time</td><td align="left">否</td><td align="left">string</td><td>执行时间（可选），如”2016-08-21 10:21:12” 。当队列类型为定时队列的时候请传此参数。</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>     <span class="hljs-string">&quot;error_code&quot;</span> : 0,<br>     <span class="hljs-string">&quot;message&quot;</span> : &quot;添加成功&quot;<br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>失败返回示例</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>     <span class="hljs-string">&quot;error_code&quot;</span> : 1000,<br>     <span class="hljs-string">&quot;message&quot;</span> : &quot;认证失败&quot;<br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>备注说明</strong></p><p>当队列是可变队列时(type &#x3D;’variable’ )，URL 执行的页面若返回字符串”reset”，则任务的执行时间间隔会重置。若返回字符串”done”，则结束并删除当前任务.</p><h2 id="获取所有队列"><a href="#获取所有队列" class="headerlink" title="获取所有队列"></a>获取所有队列</h2><p><strong>请求 URL：</strong></p><ul><li><code>http://server:5999/api/allQueue</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST</li></ul><p><strong>参数：</strong></p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>请填写 config.json 里的 app_key 以供认证。初次安装 HTQ 可更改默认的值以提高安全性。更改后需要重启 HTQ 以生效</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>请填写 config.json 里的 app_token 以供认证</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<br>    &#123;<br>        <span class="hljs-string">&quot;queue_name&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>        <span class="hljs-string">&quot;attribute&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;real_time&quot;</span>,<br>            <span class="hljs-string">&quot;stepping_time&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>            <span class="hljs-string">&quot;max_time_interval&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&quot;queue_name&quot;</span>: <span class="hljs-string">&quot;test2&quot;</span>,<br>        <span class="hljs-string">&quot;attribute&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;real_time&quot;</span>,<br>            <span class="hljs-string">&quot;stepping_time&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>            <span class="hljs-string">&quot;max_time_interval&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>        &#125;<br>    &#125;<br>]<br><br></code></pre></td></tr></table></figure><h2 id="获取某个队列的任务数"><a href="#获取某个队列的任务数" class="headerlink" title="获取某个队列的任务数"></a>获取某个队列的任务数</h2><p><strong>请求 URL：</strong></p><ul><li><code>http://server:5999/api/countQueue</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST</li></ul><p><strong>参数：</strong></p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">queue_name</td><td align="left">是</td><td align="left">string</td><td>无</td></tr><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>无</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>无</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;error_code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="删除队列"><a href="#删除队列" class="headerlink" title="删除队列"></a>删除队列</h2><p><strong>请求 URL：</strong></p><ul><li><code>http://server:5999/api/deleteQueue</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST</li></ul><p><strong>参数：</strong></p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">queue_name</td><td align="left">是</td><td align="left">string</td><td>无</td></tr><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>请填写 config.json 里的 app_key 以供认证</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>请填写 config.json 里的 app_token 以供认证</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>     <span class="hljs-string">&quot;error_code&quot;</span> : 0,<br>     <span class="hljs-string">&quot;message&quot;</span> : &quot;删除成功&quot;<br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>失败返回示例</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;<br>     <span class="hljs-string">&quot;error_code&quot;</span> : 1004,<br>     <span class="hljs-string">&quot;message&quot;</span> : &quot;删除失败&quot;<br> &#125;<br><br></code></pre></td></tr></table></figure><h2 id="实现伪代码-PHP-codeigniter"><a href="#实现伪代码-PHP-codeigniter" class="headerlink" title="实现伪代码 PHP codeigniter"></a>实现伪代码 PHP codeigniter</h2><p><strong>修改一下官方提供的 SDK 放到 libraries</strong><br><code>Htq.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">defined</span>(<span class="hljs-string">&#x27;BASEPATH&#x27;</span>) OR <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;No direct script access allowed&#x27;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Htq</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$htq_addr</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$app_key</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$app_token</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Connect</span>(<span class="hljs-params"><span class="hljs-variable">$app_key</span> , <span class="hljs-variable">$app_token</span> ,<span class="hljs-variable">$htq_addr</span> = <span class="hljs-string">&#x27;http://127.0.0.1:5999&#x27;</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;htq_addr = <span class="hljs-variable">$htq_addr</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;app_key = <span class="hljs-variable">$app_key</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;app_token = <span class="hljs-variable">$app_token</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addQueue</span>(<span class="hljs-params"><span class="hljs-variable">$queue_name</span>,<span class="hljs-variable">$type</span>,<span class="hljs-variable">$stepping_time</span> = <span class="hljs-number">0</span> , <span class="hljs-variable">$max_time_interval</span> = <span class="hljs-number">0</span> </span>)</span>&#123;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_token,<br><span class="hljs-string">&quot;queue_name&quot;</span>=&gt;<span class="hljs-variable">$queue_name</span>,<br><span class="hljs-string">&quot;type&quot;</span>=&gt;<span class="hljs-variable">$type</span>,<br><span class="hljs-string">&quot;stepping_time&quot;</span>=&gt;<span class="hljs-variable">$stepping_time</span>,<br><span class="hljs-string">&quot;max_time_interval&quot;</span>=&gt;<span class="hljs-variable">$max_time_interval</span>,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-variable language_">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/addQueue&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">_post</span>(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteQueue</span>(<span class="hljs-params"><span class="hljs-variable">$queue_name</span></span>)</span>&#123;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_token,<br><span class="hljs-string">&quot;queue_name&quot;</span>=&gt;<span class="hljs-variable">$queue_name</span>,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-variable language_">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/deleteQueue&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">_post</span>(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">allQueue</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_token,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-variable language_">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/allQueue&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">_post</span>(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countQueue</span>(<span class="hljs-params"><span class="hljs-variable">$queue_name</span></span>)</span>&#123;<br><span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_token,<br><span class="hljs-string">&quot;queue_name&quot;</span>=&gt;<span class="hljs-variable">$queue_name</span>,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-variable language_">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/countQueue&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">_post</span>(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTask</span>(<span class="hljs-params"><span class="hljs-variable">$queue_name</span> , <span class="hljs-variable">$url</span> , <span class="hljs-variable">$execute_time</span> = <span class="hljs-number">0</span> </span>)</span>&#123;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-variable language_">$this</span>-&gt;app_token,<br><span class="hljs-string">&quot;queue_name&quot;</span>=&gt;<span class="hljs-variable">$queue_name</span>,<br><span class="hljs-string">&quot;url&quot;</span>=&gt;<span class="hljs-variable">$url</span>,<br><span class="hljs-string">&quot;execute_time&quot;</span>=&gt;<span class="hljs-variable">$execute_time</span>,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-variable language_">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/addTask&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">_post</span>(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);<br>&#125;<br><br><br><span class="hljs-comment">//post数据</span><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_post</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span></span>)</span>&#123;<br><span class="hljs-variable">$query_data</span> = <span class="hljs-title function_ invoke__">http_build_query</span>(<span class="hljs-variable">$post_data</span>);<br><span class="hljs-variable">$curl</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_POST, <span class="hljs-number">1</span> );<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_POSTFIELDS, <span class="hljs-variable">$query_data</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);<br><span class="hljs-variable">$response</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curl</span>);<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$response</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$error</span> = <span class="hljs-title function_ invoke__">curl_error</span>(<span class="hljs-variable">$curl</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$error</span> ? <span class="hljs-variable">$error</span> : <span class="hljs-variable">$result</span>;<br>&#125;<br><br><span class="hljs-comment">//GET</span><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>,<span class="hljs-variable">$query_data</span></span>)</span>&#123;<br><span class="hljs-variable">$query_data</span> = <span class="hljs-title function_ invoke__">http_build_query</span>(<span class="hljs-variable">$query_data</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span> = <span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;?&quot;</span>.<span class="hljs-variable">$query_data</span> ;<br>    <span class="hljs-variable">$curlObj</span> = <span class="hljs-title function_ invoke__">curl_init</span>();    <span class="hljs-comment">//初始化curl，</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlObj</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);   <span class="hljs-comment">//设置网址</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlObj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);  <span class="hljs-comment">//将curl_exec的结果返回</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlObj</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlObj</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlObj</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);         <span class="hljs-comment">//是否输出返回头信息</span><br>    <span class="hljs-variable">$response</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlObj</span>);   <span class="hljs-comment">//执行</span><br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlObj</span>);          <span class="hljs-comment">//关闭会话</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$response</span>,<span class="hljs-literal">true</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>业务 model</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//插入数据库通知</span><br><span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;title&#x27;</span>] = <span class="hljs-variable">$title</span>;<br><span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;body&#x27;</span>] = <span class="hljs-variable">$body</span>;<br><span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;type&#x27;</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;time&#x27;</span>] = <span class="hljs-title function_ invoke__">time</span>();<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&#x27;push_msg&#x27;</span>, <span class="hljs-variable">$msg</span>);<br><span class="hljs-variable">$msgid</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">insert_id</span>();<br><span class="hljs-comment">//加入列队</span><br><span class="hljs-variable language_">$this</span>-&gt;load-&gt;<span class="hljs-title function_ invoke__">library</span>(<span class="hljs-string">&#x27;htq&#x27;</span>);<br><span class="hljs-variable language_">$this</span>-&gt;load-&gt;<span class="hljs-title function_ invoke__">helper</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-variable language_">$this</span>-&gt;htq-&gt;<span class="hljs-title function_ invoke__">Connect</span>(<span class="hljs-variable">$this</span>-&gt;system-&gt;system_cache[<span class="hljs-string">&#x27;htq_config&#x27;</span>][<span class="hljs-string">&#x27;app_key&#x27;</span>],<span class="hljs-variable">$this</span>-&gt;system-&gt;system_cache[<span class="hljs-string">&#x27;htq_config&#x27;</span>][<span class="hljs-string">&#x27;app_token&#x27;</span>],<span class="hljs-variable">$this</span>-&gt;system-&gt;system_cache[<span class="hljs-string">&#x27;htq_config&#x27;</span>][<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-variable language_">$this</span>-&gt;htq-&gt;<span class="hljs-title function_ invoke__">addQueue</span>(<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;real_time&quot;</span>);<br><span class="hljs-comment">//查询所有推送人员信息</span><br><span class="hljs-variable">$_list</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-string">&#x27;push_channel,push_key&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;lock&#x27;</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;role&lt;=&#x27;</span>=&gt;<span class="hljs-number">2</span>))-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;admins&#x27;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$admin</span> = <span class="hljs-variable">$_list</span>-&gt;<span class="hljs-title function_ invoke__">unbuffered_row</span>(<span class="hljs-string">&#x27;array&#x27;</span>))<br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;push_channel&#x27;</span>],<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;bark&#x27;</span>,<span class="hljs-string">&#x27;ftqq&#x27;</span>)))&#123;<br>        <span class="hljs-comment">//存在推送频道则加入推送列队</span><br>        <span class="hljs-variable">$push_channel</span> = <span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;push_channel&#x27;</span>];<br>        <span class="hljs-variable">$push_key</span> = <span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;push_key&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;htq-&gt;<span class="hljs-title function_ invoke__">addTask</span>(<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-title function_ invoke__">site_url</span>(<span class="hljs-string">&quot;api/task/push/<span class="hljs-subst">&#123;$push_channel&#125;</span>/<span class="hljs-subst">&#123;$push_key&#125;</span>/<span class="hljs-subst">&#123;$msgid&#125;</span>&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行器</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task</span>(<span class="hljs-params"><span class="hljs-variable">$type</span>,<span class="hljs-variable">$channel</span>,<span class="hljs-variable">$key</span>,<span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>       <span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$id</span>);<br>       <span class="hljs-comment">//列队任务执行</span><br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$type</span>==<span class="hljs-string">&#x27;push&#x27;</span>)&#123;<br>           <span class="hljs-comment">//根据ID取出要推送的内容</span><br>           <span class="hljs-variable">$msg</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-string">&#x27;title,body&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-variable">$id</span>)-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;push_msg&#x27;</span>,<span class="hljs-number">1</span>)-&gt;<span class="hljs-title function_ invoke__">row_array</span>();<br>           <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>)&#123;<br>               <span class="hljs-comment">//发送推送通知</span><br>               <span class="hljs-variable language_">$this</span>-&gt;load-&gt;<span class="hljs-title function_ invoke__">model</span>(<span class="hljs-string">&#x27;push_model&#x27;</span>);<br>               <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;push_model-&gt;<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-variable">$channel</span>,<span class="hljs-variable">$key</span>,<span class="hljs-string">&#x27;CRM 通知：&#x27;</span>.<span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;title&#x27;</span>],<span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;body&#x27;</span>]);<br>               <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">echo</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;code&#x27;</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;push_msg&#x27;</span>=&gt;<span class="hljs-variable">$ret</span>));<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>参考内容：<br><a href="http://blog.star7th.com/2016/09/2114.html">http://blog.star7th.com/2016/09/2114.html</a><br><a href="https://github.com/star7th/htq">https://github.com/star7th/htq</a><br><a href="https://www.showdoc.cc/htq?page_id=38897">https://www.showdoc.cc/htq?page_id=38897</a><br><a href="https://www.jianshu.com/p/7d3f3fa056e8">https://www.jianshu.com/p/7d3f3fa056e8</a><br><a href="https://blog.csdn.net/m0_37792354/article/details/80906113">https://blog.csdn.net/m0_37792354/article/details/80906113</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如果你还是“程序员”，我劝你别创业！</title>
    <link href="/read/86.html"/>
    <url>/read/86.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>很多程序员一看就知道不会创业</p></blockquote><h2 id="“程序员思维”会害死你！"><a href="#“程序员思维”会害死你！" class="headerlink" title="“程序员思维”会害死你！"></a>“程序员思维”会害死你！</h2><p>在 IT 这一行做得久了，会接触到无数让人哭笑不得的外行话。</p><p>「我们就差一个写代码的了」是其中典型的一种，之所以黑它，不是因为程序员有多自大，认为自己被轻视所以愤怒。而是因为说这句话的人里有 90%以上绝对不仅仅差一个写代码的，而是一整套技术体系。</p><p>那么，程序员在创业公司之中真的这么重要吗？？？</p><span id="more"></span><p>并不是！</p><h4 id="中国的程序员大部分是盲目的：动不动就自称“CSDN-专家”、”知乎大-V”、”XX-软件之父”。"><a href="#中国的程序员大部分是盲目的：动不动就自称“CSDN-专家”、”知乎大-V”、”XX-软件之父”。" class="headerlink" title="中国的程序员大部分是盲目的：动不动就自称“CSDN 专家”、”知乎大 V”、”XX 软件之父”。"></a>中国的程序员大部分是盲目的：动不动就自称“CSDN 专家”、”知乎大 V”、”XX 软件之父”。</h4><p>就一个写代码的白领，在创业公司之中的贡献，并没有自己想象中的大！</p><p>业界上真正写过十年代码，创业成功的有几个？？？</p><p>零！！！</p><p>很多程序员（包括我）的至高理想：写一个牛逼的 APP，一年挣个几百万。最好像当年张小龙写 Foxmail 一样，用户遍布全球，还未自己进入腾讯做微信打下基础。</p><p>如果你真正的了解张小龙这个人，你会发现：Foxmail 在商业推广策略上的牛逼，远大于他个人在代码上的贡献。</p><h2 id="迷恋程序！肯定没戏！"><a href="#迷恋程序！肯定没戏！" class="headerlink" title="迷恋程序！肯定没戏！"></a>迷恋程序！肯定没戏！</h2><p>程序员，特别是中国的程序员，非常缺乏合作心态。</p><p>会一些简单算法&#x2F;架构就觉得可以 Control Everything。</p><p>恃才傲物！Stupid！</p><h5 id="程序员的自信在编程上是非常需要的，但不是适合一切场合。创业仅仅具备了和机器打交道这一种能力是绝对不够的，他还需要和合作伙伴、竞争对手、投资人、员工甚至整个社会环境打交道。"><a href="#程序员的自信在编程上是非常需要的，但不是适合一切场合。创业仅仅具备了和机器打交道这一种能力是绝对不够的，他还需要和合作伙伴、竞争对手、投资人、员工甚至整个社会环境打交道。" class="headerlink" title="程序员的自信在编程上是非常需要的，但不是适合一切场合。创业仅仅具备了和机器打交道这一种能力是绝对不够的，他还需要和合作伙伴、竞争对手、投资人、员工甚至整个社会环境打交道。"></a>程序员的自信在编程上是非常需要的，但不是适合一切场合。创业仅仅具备了和机器打交道这一种能力是绝对不够的，他还需要和合作伙伴、竞争对手、投资人、员工甚至整个社会环境打交道。</h5><p>很多程序员因为已经习惯了和机器打交道，不善于也不愿意其它的工作。很多程序员会内心认为“营销不是很简单嘛，市场很简单啊，管理也很简单啊，”这种心态是非常害人的。</p><p>我的很多朋友在总结自己创业失败的时候，往往会说：</p><p>“我当年在 BAT 中，如此叱咤风云！就连现在公司开发的 APP 也是如此一流！为什么就不能成功呢？”</p><p>我想说，脱离了“BAT”的光环你啥也不是！！！</p><p>不要让代码的成功，给自己带来的虚假优秀的自负，这种自负不要说创业，可能在在公司中工作也会遇到问题。</p><p>所以，我甚至认为程序员在创业方面遇到的困难比其它类型的人员更大。如果程序员希望主导一个创业，可能首先就要逼自己不是一个程序员。</p><h2 id="你并不牛逼！重视每一个方向！"><a href="#你并不牛逼！重视每一个方向！" class="headerlink" title="你并不牛逼！重视每一个方向！"></a>你并不牛逼！重视每一个方向！</h2><p>学会和别人合作！！！</p><p>这点看似很简单</p><p>“我会合作啊！ 你看 Java 后台、Android、iOS 他们配合得多好！”</p><p>但这种合作是片面的，所谓的合作不是程序员和程序员之间的合作，而是包括了程序员和其它各种角色之间的合作。</p><ul><li>程序的上线周期 Delay，有没有相应的商务推广配合？</li><li>地推团队还没到，是否就该在第一个版本设计这么复杂的功能？</li><li>公司前期预算不够，一定要做原生的 APP 吗？</li><li>分布式架构这么好，为什么要用 All In One 架构？</li><li>也许你能够写出完美的 APP，但是这不意味着公司的成功！</li></ul><p>如果剖开一些故事的外表，你会发现国外很多成功的程序员，背后一定有一个很强大的商业感觉的人或者一个团队。</p><p>如果熟读 Facebook 的历史，你会发现，扎克伯格在创业时期，如果没有，曾在浏览器大战中惜败微软的 Netscape 公司创始人马克·安德森，帮助组件商业团队，小扎自己现在估计还是一名码农。</p><p>甚至直到 Facebook 上市，小扎也离不开他身后的强大的各环节的团队。其中，Facebook 有位明星 COO——雪莉·桑德伯格，她比扎克伯格大 15 岁，哈佛 MBA 硕士，是一位极富经验的精英女企业家。Facebook 能有今天的成就，多半要归功于桑德伯格这样的“成年人”从旁辅佐。</p><p>程序员的商业感觉其实并不是很好。即便有商业感觉，其实这只是一个灵感，一个创意，但要要做成、做大还需要一系列的管理、市场、运营，这些对于程序员是不可想象的。</p><p>程序员要明白，在自己不擅长的领域，找到一个可以弥补自己缺陷的合作团队才是出路。加入一个创业团队，可能个人占 10%，但因为更容易成功，而且团队可以做 100 分的事情。而如果只是一个人做，很可能就失败了。</p><p>这方面，国外的程序员对自己的长短比较清楚。在硅谷，很多程序员技术上都很牛，但他们都非常知道自己只是在技术这个领域水平比较高，出了这个领域，自己什么都不是。正因为有了这种心态，他们特别懂得与人合作。我认为国外的程序员已经普遍意识到了这点，他们很愿意成为创业团队中的一员而并非自己创业。</p><h2 id="技术都做不好，别提创业！"><a href="#技术都做不好，别提创业！" class="headerlink" title="技术都做不好，别提创业！"></a>技术都做不好，别提创业！</h2><p>干了 5 年多的程序员，不得不承认一个现实：</p><h4 id="程序员生存状态并不是很好"><a href="#程序员生存状态并不是很好" class="headerlink" title="程序员生存状态并不是很好"></a>程序员生存状态并不是很好</h4><h5 id="但程序员很多报怨其实是一种不切实际的期望值和自身的缺陷产生的反差。"><a href="#但程序员很多报怨其实是一种不切实际的期望值和自身的缺陷产生的反差。" class="headerlink" title="但程序员很多报怨其实是一种不切实际的期望值和自身的缺陷产生的反差。"></a>但程序员很多报怨其实是一种不切实际的期望值和自身的缺陷产生的反差。</h5><p>产品没有大小，只有市场的大小。很多人总是觉得这也小，那也看不上。认为公司做的产品很无聊，要做就要像某些人宣扬的那样：做游戏一定要做 3D 引擎，好像只有这样才够牛。</p><p>不尊重现有自己所开发的产品，就是一种浮躁。公司的商业自然有其战略意义上的一部，程序员能够做的就是让他稳定顺畅的运行。</p><p>但，很多程序员写的东西总是很多 Bug、技术知识也不牢固、没参加过几个大项目、最基本的 HTTP 协议都搞不清楚、代码量甚至量 10 万行也没有。这个时候，你跟我说你想改变世界。有意义吗？有价值吗？我敢让你做吗？</p><p>这个时候，你还挺愤青，骂公司、骂产品、骂老板的工资少，但你有没有想过自己给公司增加了多少 Bug，自己让公司的整个商业计划 Delay 了两周。让自己周边的同事工作气氛都不好了，整个团队乌烟瘴气。</p><p>有些程序员就的要求就特别苛刻，觉得这不行，那也不行，PM 必须把完美的逻辑路径给我、设计必须给我切每一个尺寸的图片、为什么测试不能把握的 Bug 测出来？</p><p>严格要求是好事，但严格要求是要求自己，并不是要求别人。程序员不要做评论家，中国不缺评论家，最缺的是实干家。</p><p>长期接触程序容易活在自我的世界中，就不可能真正了解世界是什么。程序员要学会慢慢站在别人立场上看问题。</p><h5 id="因为：牛逼的程序员，必须出自牛逼的公司。"><a href="#因为：牛逼的程序员，必须出自牛逼的公司。" class="headerlink" title="因为：牛逼的程序员，必须出自牛逼的公司。"></a>因为：牛逼的程序员，必须出自牛逼的公司。</h5><p>说到这里，你是否也怀疑自己自己的判断：“貌似 PM 在一个企业里面还是有一定的价值的！”</p><p>这里，给大家几个创业这些年我的心得：</p><p>需要调整心态，不要把自己当作精英人物，要承认自己在编程方面是优秀的，但永远有人比自己更优秀，对于其它的领域，很可能自己很无知。要知道，其实程序员的选择其实是最少的，因此抱有开放的心态是最重要的。</p><ul><li>大量的实践，要慢慢培养对产品，对商业的感觉。</li><li>调整心态，接受不同方向人员的心声，了解他们的诉求。</li><li>资源配置的收益，远大于亲手去写每一个行代码</li></ul><hr><p>作者：北漂周<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/yzzst/article/details/68941791">https://blog.csdn.net/yzzst/article/details/68941791</a></p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>群辉挂载NFS方法</title>
    <link href="/read/83.html"/>
    <url>/read/83.html</url>
    
    <content type="html"><![CDATA[<p>自留保存一下，以免忘记</p><span id="more"></span><p>参考链接<br><a href="https://post.smzdm.com/p/632220/">https://post.smzdm.com/p/632220/</a><br><a href="https://blog.bbzhh.com/index.php/archives/110.html">https://blog.bbzhh.com/index.php/archives/110.html</a></p><p>群晖 5.2 版本下的 busybox 只支持 NFS3.0 协议，所以我们首先要下载新版的 busybox 来支持 NFS4.1。官网适合于群晖 5.2 版本的文件名是 busybox-x86_64。<a href="https://busybox.net/downloads/binaries/1.26.2-defconfig-multiarch/busybox-x86_64" title="官网busybox-x86_64下载地址">官网 busybox-x86_64 下载地址</a></p><p>开机自启路径<br><code>/usr/syno/etc.defaults/rc.d/S99mount.sh</code></p><p>挂载参数</p><pre><code class="hljs">/bin/busybox-x86_64 mount -t nfs -o hard,vers=4.1 10.1.2.3:/files /volume1/共享/files/bin/busybox-x86_64 mount -t nfs -o hard,vers=4.1 10.1.2.3:/photo /volume1/photo/bin/busybox-x86_64 mount -t nfs -o hard,vers=4.1 10.1.2.3:/video /volume1/video</code></pre>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>电信家庭云上行提速 20M</title>
    <link href="/read/82.html"/>
    <url>/read/82.html</url>
    
    <content type="html"><![CDATA[<p>电信家庭云 APP 可以在 APP 内上传文件的时候临时提升上传带宽为 20M，网上已经有大神搞到路由器上了，由于我没有相关的路由器，也对 base 不熟悉，但是我有一台 ESXI :wink: 所以用易语言写了个加速器，虚拟了一个 XP 来运行，能加速成功，不知道后续，我没有付费，稳定运行了几十分钟了。</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/01/1790431306.jpg"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2018/01/3548461026.png"></p><p>漏洞分析：由于电信服务器没有验证 Signature 和当前时间对应，获取到一次 Signature 之后可以反复使用。</p><p>更新（2018-1-15）：用了一天之后，失效了，不返回提速 SN，花了 15 买了一个月才可以继续运行……</p><p>ps:秒和分钟写错了，请无视。</p><p>参考：<a href="http://rt.cn2k.net/?p=389">http://rt.cn2k.net/?p=389</a></p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>交叉编译ARM版(R7000路由器)SSR-libev客户端/服务器端</title>
    <link href="/read/build_ssr_for_arm.html"/>
    <url>/read/build_ssr_for_arm.html</url>
    
    <content type="html"><![CDATA[<h3 id="1-搭建编译环境"><a href="#1-搭建编译环境" class="headerlink" title="1.搭建编译环境"></a>1.搭建编译环境</h3><p>我的编译系统是 centos7<br>首先下载工具链<br><a href="ftp://downloads.netgear.com/files/GPL/R6250-V1.0.0.62_with_toolchain_source.zip" title="R6250-V1.0.0.62_with_toolchain_source.zip">R6250-V1.0.0.62_with_toolchain_source.zip</a><br>只需要里面的<code>hndtools-arm-linux-2.6.36-uclibc-4.5.3.tar.bz2</code>工具链包,R7000 通用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/R7000<br>tar jxvf hndtools-arm-linux-2.6.36-uclibc-4.5.3.tar.bz2<br>sudo <span class="hljs-built_in">ln</span> -s /home/R7000/hndtools-arm-linux-2.6.36-uclibc-4.5.3 /opt/brcm-arm<br><br>yum install libelf.so.1 libz.so.1 asciidoc xmlto<br></code></pre></td></tr></table></figure><h3 id="2-下载源码包"><a href="#2-下载源码包" class="headerlink" title="2.下载源码包"></a>2.下载源码包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://tls.mbed.org/download/mbedtls-2.4.0-apache.tgz<br>tar zxvf mbedtls-2.4.0-apache.tgz<br><span class="hljs-built_in">mkdir</span> mbedtls<br><br>wget https://downloads.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz<br>tar zxvf zlib-1.2.11.tar.gz<br><span class="hljs-built_in">mkdir</span> zlib<br><br>wget https://downloads.sourceforge.net/projects/pcre/files/pcre/8.39/pcre-8.39.tar.gz<br>tar zxvf pcre-8.39.tar.gz<br><span class="hljs-built_in">mkdir</span> pcre<br><br>git <span class="hljs-built_in">clone</span> https://github.com/shadowsocksr/shadowsocksr-libev.git<br><span class="hljs-built_in">mkdir</span> ss<br></code></pre></td></tr></table></figure><h3 id="3-添加环境变量"><a href="#3-添加环境变量" class="headerlink" title="3.添加环境变量"></a>3.添加环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/opt/brcm-arm/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$&#123;LD_LIBRARY_PATH&#125;</span>:/opt/brcm-arm/lib:/usr/local/lib:/usr/lib<br><span class="hljs-built_in">export</span> CC=arm-uclibc-linux-2.6.36-gcc<br><span class="hljs-built_in">export</span> CXX=arm-uclibc-linux-2.6.36-g++<br><span class="hljs-built_in">export</span> AR=arm-uclibc-linux-2.6.36-ar<br><span class="hljs-built_in">export</span> RANLIB=arm-uclibc-linux-2.6.36-ranlib<br></code></pre></td></tr></table></figure><h3 id="4-开始编译"><a href="#4-开始编译" class="headerlink" title="4.开始编译"></a>4.开始编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> mbedtls-2.4.0-apache<br>vi Makefile<span class="hljs-comment">#修改第二行为DESTDIR=/home/R7000/mbedtls</span><br>make &amp;&amp; make install<br><br><span class="hljs-built_in">cd</span> ../<br><span class="hljs-built_in">cd</span> zlib-1.2.11<br>./configure --prefix=/home/R7000/zlib<br>make &amp;&amp; make install<br><br><span class="hljs-built_in">cd</span> ../<br><span class="hljs-built_in">cd</span> pcre-8.39<br>./configure --prefix=/home/R7000/pcre --host=arm-uclibc-linux<br><br><br><span class="hljs-built_in">cd</span> shadowsocksr-libev<br>./configure --prefix=/home/R7000/ss --with-mbedtls=/home/R7000/mbedtls --with-zlib=/home/R7000/zlib --with-pcre=/home/R7000/pcre --host=arm-uclibc-linux --with-crypto-library=mbedtls --disable-ssp<br>make &amp;&amp; make install<br><br><span class="hljs-built_in">cd</span> /home/R7000/ss/bin<br>arm-uclibc-strip ss-local ss-manager ss-redir ss-server ss-tunnel<br></code></pre></td></tr></table></figure><h3 id="5-开始测试"><a href="#5-开始测试" class="headerlink" title="5.开始测试"></a>5.开始测试</h3><p>copy 到&#x2F;jffs&#x2F;shadowsocks</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@R7000:/jffs/ssserver<span class="hljs-comment"># /jffs/shadowsocks/ss-redir -v</span><br><br>shadowsocks-libev 2.5.6 with mbed TLS 2.4.0<br><br>  maintained by Max Lv &lt;max.c.lv@gmail.com&gt; and Linus Yang &lt;laokongzi@gmail.com&gt;<br><br>  usage:<br><br>    ss-redir<br><br>       -s &lt;server_host&gt;           Host name or IP address of your remote server.<br>       -p &lt;server_port&gt;           Port number of your remote server.<br>       -l &lt;local_port&gt;            Port number of your <span class="hljs-built_in">local</span> server.<br>       -k &lt;password&gt;              Password of your remote server.<br>       -m &lt;encrypt_method&gt;        Encrypt method: table, rc4, rc4-md5,<br>                                  aes-128-cfb, aes-192-cfb, aes-256-cfb,<br>                                  aes-128-ctr, aes-192-ctr, aes-256-ctr,<br>                                  bf-cfb, camellia-128-cfb, camellia-192-cfb,<br>                                  camellia-256-cfb, cast5-cfb, des-cfb,<br>                                  idea-cfb, rc2-cfb, seed-cfb, salsa20,<br>                                  chacha20 and chacha20-ietf.<br>                                  The default cipher is rc4-md5.<br><br>       [-a &lt;user&gt;]                Run as another user.<br>       [-f &lt;pid_file&gt;]            The file path to store pid.<br>       [-t &lt;<span class="hljs-built_in">timeout</span>&gt;]             Socket <span class="hljs-built_in">timeout</span> <span class="hljs-keyword">in</span> seconds.<br>       [-c &lt;config_file&gt;]         The path to config file.<br>       [-n &lt;number&gt;]              Max number of open files.<br>       [-b &lt;local_address&gt;]       Local address to <span class="hljs-built_in">bind</span>.<br><br>       [-u]                       Enable UDP relay.<br>                                  TPROXY is required <span class="hljs-keyword">in</span> redir mode.<br>       [-U]                       Enable UDP relay and <span class="hljs-built_in">disable</span> TCP relay.<br>       [-A]                       Enable onetime authentication.<br><br>       [--mtu &lt;MTU&gt;]              MTU of your network interface.<br>       [--mptcp]                  Enable Multipath TCP on MPTCP Kernel.<br><br>       [-v]                       Verbose mode.<br>       [-h, --<span class="hljs-built_in">help</span>]               Print this message.<br></code></pre></td></tr></table></figure><p>收工,交叉编译第一次练手</p><p>参考资料:<br><a href="http://www.jianshu.com/p/b1a8443dbe5f">http://www.jianshu.com/p/b1a8443dbe5f</a><br><a href="http://blog.csdn.net/bunny27/article/details/50589452">http://blog.csdn.net/bunny27/article/details/50589452</a> (原文已删)<br><a href="http://ahui.us/post/netgear-r6300v2-ngrep.html">http://ahui.us/post/netgear-r6300v2-ngrep.html</a><br><a href="http://www.cnblogs.com/jackyshan/p/5985590.html">http://www.cnblogs.com/jackyshan/p/5985590.html</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ESXi加UPS断电自动关机脚本</title>
    <link href="/read/esxi_apc_ups.html"/>
    <url>/read/esxi_apc_ups.html</url>
    
    <content type="html"><![CDATA[<p>被电力局搞怕了,随时都可以停电,并且没有通知!今年已经好几次了!<br>怀疑我的硬盘就是这样坏的.<br>随后败了一台 UPS,APC 的 BX550CI-CN,就这个样子<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2017/01/3542904706.jpg"><br>没有 USB 接口,服务器不能知晓是否 UPS 在供电(就算有,ESXi 也用不上,尴尬)</p><p>写了一个小脚本,让 ESXi 来 ping 网关(路由器,插市电),如果网关 3 分钟都是失联状态,就判断停电了,自动执行关机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-keyword">while</span><br>ping -c 1 10.1.1.1 &gt; /dev/null<br>[ $? -eq 0 ];<br><span class="hljs-keyword">do</span><br><span class="hljs-comment">#echo &#x27; AC Power OK ! &#x27; &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;date &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log</span><br><span class="hljs-built_in">sleep</span> 180<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27; AC Power maybe off, checking again after 3 minutes ! &#x27;</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;<span class="hljs-built_in">date</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log<br><span class="hljs-built_in">sleep</span> 60<br>ping -c 1 10.1.1.1 &gt; /dev/null<br><span class="hljs-keyword">if</span> [ $? -eq 0 ]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27; Checkagain, AC Power OK ! &#x27;</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;<span class="hljs-built_in">date</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27; AC Power is already off, shut down NAS Now! &#x27;</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;<span class="hljs-built_in">date</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log<br>/bin/shutdown.sh<br>halt<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>以上代码保存成<code>apc.sh</code>放到<code>/vmfs/volumes/磁盘名/ups/</code>目录下,目录下同时创建<code>ups.log</code>空白日志文件</p><p>然后再写一个守护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><br><span class="hljs-comment">#    用ps获取ups进程数量</span><br>NUM=`ps -c | grep apc.sh | grep -v grep |<span class="hljs-built_in">wc</span> -l`<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;NUM&#125;</span><br><span class="hljs-comment">#    少于1，重启进程</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;NUM&#125;</span>&quot;</span> -lt <span class="hljs-string">&quot;1&quot;</span> ];<span class="hljs-keyword">then</span><br>/vmfs/volumes/磁盘名/ups/apc.sh &amp;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27; UPS shouhu start&#x27;</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;<span class="hljs-built_in">date</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>守护脚本保存成<code>ups_shouhu.sh</code>也放到<code>/vmfs/volumes/磁盘名/ups/</code>目录下</p><p>然后添加一个计划任务,每三分钟执行守护脚本<br>由于 ESXi 重启会重置计划任务的内容,所以添加到启动</p><p>在<code>/etc/rc.local.d/local.sh</code>文件里添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/kill $(<span class="hljs-built_in">cat</span> /var/run/crond.pid)<br>/bin/echo <span class="hljs-string">&#x27;*/3    *    *   *   *   /vmfs/volumes/磁盘名/ups/ups_shouhu.sh&#x27;</span> &gt;&gt; /var/spool/cron/crontabs/root<br>/bin/crond<br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>然后就有了一台会自动关机的 GEN8 了,麻麻再也不用担心异常停电了~</p><p>—————华丽的分割线—————<br>下面记录一下自动开机,如果路由器发现服务器不在线,就执行 wol 唤醒服务器</p><p>路由器创建一个计划任务,每三分钟执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Power for Gen8</span><br>ping -c 10 -w 10.1.1.2 &gt; /dev/null<br>ret=$?<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$ret</span> -ne 0 ]<br><span class="hljs-keyword">then</span><br>ether-wake XX:XX:XX:XX:XX:XX<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>自动关机,自动开机,都搞定:smile:</p><p>参考了不少大神的代码,我都忘记来源了,没办法一一列上,见谅</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>西数红盘的质量与HPE的服务</title>
    <link href="/read/wd_disk_hpe_services.html"/>
    <url>/read/wd_disk_hpe_services.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>黑东 618 买的两块特价 4T 红盘,当时就有一块回家了,现在另外一块还是没撑住,又挂了:roll:<br>黑东服务还是不错的,这次退回去,二话没说,直接换新,第三天就给送来了.</p></blockquote><h5 id="谈谈-HPE-的服务"><a href="#谈谈-HPE-的服务" class="headerlink" title="谈谈 HPE 的服务"></a>谈谈 HPE 的服务</h5><blockquote><p>上半年败了一台 GEN8 的小服务器,在 HPE 的官网注册了,留了信息,需要一个公司名字,就随便写了一个(随便起的公司名字,之前用过的网名)</p></blockquote><p>某晚上 22 点多,接到一个陌生电话,问我是不是某某某公司的某工,我愣了一下,第一感觉是不是骗子电话,就说不是啊,然后对方啪挂了电话,我也就没放在心上.<br>然后过了一会出房喝水,发现客厅 GEN8 在闪黄灯,我曹,出现故障了?立马上 ilo 看下情况,玛德硬盘挂了一块.</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2017/01/1546672625.jpg"></p><p>回过神来,原来刚才的电话是 HPE 打来的,不过这服务也太不专业了,问题都没讲,要是先说我服务器出现故障了,那我可能就明白了嘛.:?:</p><p>还好两块 4T 做了 RAID1,大姐姐们都没丢:wink:</p><p>第二天 HPE 又来一个电话,这次对面帅哥就很懂了,开口就问您是否有一台 GEN8 的服务器,出现了硬盘故障,巴拉巴拉的~~~</p><p>直接申请京东售后,第二天就很果断的发回了一块新盘</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2017/01/1216318268.png"></p><p>RAID 重建几个小时后,黄灯闪烁变蓝灯常亮,ilo 故障消除,但是硬盘读写灯持续亮了一天左右</p><p>本次换硬盘是系统层无感知的,拔掉硬盘的时候服务器继续运行,RAID 同步的时候服务器也是继续运行的.终于体验到了 RAID 的便捷</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ESXI重新挂载磁盘</title>
    <link href="/read/esxi_disk.html"/>
    <url>/read/esxi_disk.html</url>
    
    <content type="html"><![CDATA[<p>京东 618 活动,在京东买了两块 999-30 的西数红盘 4T 塞到 HP Gen8 里面去了,结果竟然有一块是坏的,掉盘,在 ESXI 复制文件的过程中直接磁盘丢失,刷新不出来,在 ILO 里面也是严重错误…:mad:</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/06/50272890.png"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/06/4023885437.jpg"></p><p>遇到这情况,当然是找京东换一块啦.当我拆掉硬盘的之后,进 ESXI,什么情况,所有磁盘都丢失了…一块都没了,设备里面也没了.:neutral:</p><p>进 RAID 界面看到一条错误,说是磁盘丢失,然后所有磁盘都从 RAID0 状态(我是用的 RAID 模式,单块 RAID0 的)变成未初始化了.:wink:嗯,这简单,重新初始化一遍咯,资料是不会丢的.</p><p>(此处忘记截图)</p><p>初始化完毕后进 ESXI,嗯?怎么数据储存还是没有内容呢?:cry:切换到设备看了一下,硬盘都认到了呀,不对,怎么编号变化了…</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/06/898692177.jpg"></p><p>没事,我们重新添加一下磁盘:shock:,结果,你 TM 在逗我?重新添加要删掉重新格式化!!!</p><p>那我们只能进 SSH 看能否手动挂载了</p><p>打开主机 SSH,进 SSH,输入</p><pre><code class="hljs">  esxcfg-volume -l</code></pre><p>会显示当前磁盘信息,记住 UUID 下面用的都是 UUID.</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/06/2370386291.jpg"></p><p>先小试一下没有重要内容的磁盘</p><p><del>esxcfg-volume -m xxxxxxxxxxxxxxxxxxxx #uuid 或者 lable 都可以</del><br>[更新(2016-06-17 21:27:49):<br><code>-m</code>参数是临时挂载,重启后会丢失,应该使用<code>-r</code>参数注册,注册成功后会随机命名成<code>snap-xxx-原盘符</code>这样的盘符名称,自行修改即可]</p><pre><code class="hljs">esxcfg-volume -r xxxxxxxxxxxxxxxxxxxx #uuid或者lable都可以~~</code></pre><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/06/406757724.jpg"></p><p>嗯,内容都在,下面都添加上去把</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/06/1996069733.jpg"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/06/4051117479.jpg"></p><p>就这样,大姐姐的集体宿舍又回来了~</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自行搭建高大上的手机终端OpenVxN免x流</title>
    <link href="/read/OpenVPN_Free_Traffic.html"/>
    <url>/read/OpenVPN_Free_Traffic.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c2a393888792a741249bd32fb4d7a2b0e39cda20d3755f26e7034f9f2a23a83e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenVPN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为Typecho启用Google Authenticator两步验证</title>
    <link href="/read/Typecho_Google_Authenticator.html"/>
    <url>/read/Typecho_Google_Authenticator.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>看到好多网站都支持 Google Authenticator 的两步验证，所以写了这个小插件，参考了很多前辈写的插件。</p></blockquote><p>Google Authenticator 的 PHP 实现来自：<a href="http://www.phpgangsta.de/">http://www.phpgangsta.de</a></p><hr><p>2018-11-21 更新<br><strong>最新版 0.0.2 已发布。请前往查看</strong><br><a href="https://cuojue.org/read/Typecho_Google_Authenticator_02.html">https://cuojue.org/read/Typecho_Google_Authenticator_02.html</a></p><hr><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><p><code>Widget_Login-&gt;loginFail</code><br><code>Widget_Login-&gt;loginSucceed</code><br>并没有用更高级的<br><code>Widget_User-&gt;login</code><br>其实按道理来说后者使用更好，但是函数内判断了如果被插件<del>插</del>(注册)了，就直接返回插件返回的结果……</p><h4 id="插件原理说明"><a href="#插件原理说明" class="headerlink" title="插件原理说明"></a>插件原理说明</h4><p>插入了<code>(&#39;admin/header.php&#39;)-&gt;header</code>来重新处理整个后台页面，实现自定义登录页面，隐藏了用户名输入，固定为<code>_Authenticator</code>，修改密码输入为两步验证的代码输入。</p><p>用 cookies 来判断验证是否成功，显示系统的登录页面，因为未登录状态 typecho 并没有开启 PHP SESSION 支持，(为了系统性能)</p><p>调用<code>loginFail</code>接口，也就是登录失败的接口，实现了用系统登录接口验证两步验证的代码。</p><p>调用<code>loginSucceed</code>来清理保存验证的 cookies</p><h4 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h4><p>后台没法显示图片，或者是我不知道如何显示，反正就是没显示二维码，只给了一个二维码的网址，自己打开吧</p><p>如果手机丢了，没法找回的哟，但是 SecretKey 保存在数据库<code>typecho_options/plugin:GAuthenticator</code>里，可以手动查询再次绑定</p><h4 id="插件发布"><a href="#插件发布" class="headerlink" title="插件发布"></a>插件发布</h4><p><a href="https://github.com/weicno/typecho-Authenticator">GitHub</a></p><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><p>下载插件，修改文件名为<code>GAuthenticator</code>放到<code>/usr/plugins</code>目录，然后到后台启用</p><p>插件默认关闭，首次开启需要扫描二维码绑定之后填写手机上显示的代码，验证成功之后才可以启用</p><p>有什么问题可以在本页面回复</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typecho</tag>
      
      <tag>Authenticator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改typecho保存评论用户信息为javascript模式</title>
    <link href="/read/typecho_comments_author_javascript.html"/>
    <url>/read/typecho_comments_author_javascript.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>修改这个是因为<a href="https://cuojue.org/read/typecho-cache-memcache.html">上一篇文章</a>有同学评论说会缓存评论人的信息<br>当然，我没注意到这个是因为我们的<a href="https://www.linpx.com/">Chakhsu</a>同学在<a href="https://blog.phpgao.com/tpcache_for_typecho.html">老高的技术博客</a>也提到这个问题<br>而我用的模板也是来自于 Chakhsu 的，所以他在模板里面已经修改过这个问题，直接不读取 cookies 来回填用户信息<br>我就小小的修改了一下，采用 js 来读取并回填，登录状态还无所谓，没登陆的用户确实造成了小小的不便（当然，对我这种常年只有我一个人访问的博客没什么影响……）</p></blockquote><h4 id="首先分析了一下-typecho-的函数"><a href="#首先分析了一下-typecho-的函数" class="headerlink" title="首先分析了一下 typecho 的函数"></a>首先分析了一下 typecho 的函数</h4><p>模板文件<code>comments.php</code>里获取的函数是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">remember</span>(<span class="hljs-string">&#x27;author&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">remember</span>(<span class="hljs-string">&#x27;mail&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">remember</span>(<span class="hljs-string">&#x27;url&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>跟随函数到了<code>\var\Widget\Archive.php</code></p><p>函数原型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出cookie记忆别名</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@access</span> public</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $cookieName 已经记忆的cookie名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> boolean $return 是否返回</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">remember</span>(<span class="hljs-params"><span class="hljs-variable">$cookieName</span>, <span class="hljs-variable">$return</span> = <span class="hljs-literal">false</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$cookieName</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$cookieName</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$cookieName</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>))) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$value</span> = <span class="hljs-title class_">Typecho_Cookie</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;__typecho_remember_&#x27;</span> . <span class="hljs-variable">$cookieName</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$return</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$value</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续跟随<code>Typecho_Cookie::get</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPrefix</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_prefix</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$url</span>);<br>        <span class="hljs-variable">$parsed</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><br>        <span class="hljs-comment">/** 在路径后面强制加上斜杠 */</span><br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_path</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$parsed</span>[<span class="hljs-string">&#x27;path&#x27;</span>]) ? <span class="hljs-string">&#x27;/&#x27;</span> : <span class="hljs-title class_">Typecho_Common</span>::<span class="hljs-title function_ invoke__">url</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-variable">$parsed</span>[<span class="hljs-string">&#x27;path&#x27;</span>]);<br>    &#125;<br>******中间省略******<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取指定的COOKIE值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@access</span> public</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $key 指定的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $default 默认的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$default</span> = <span class="hljs-literal">NULL</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$key</span> = <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_prefix</span> . <span class="hljs-variable">$key</span>;<br>        <span class="hljs-variable">$value</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-variable">$key</span>]) ? <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-variable">$key</span>] : (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$key</span>]) ? <span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$key</span>] : <span class="hljs-variable">$default</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$value</span>) ? <span class="hljs-variable">$default</span> : <span class="hljs-variable">$value</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>发现原来前缀不是随机的，而是当前 url 的 md5 哈希</p><h4 id="然后当然直接读取填写啦"><a href="#然后当然直接读取填写啦" class="headerlink" title="然后当然直接读取填写啦"></a>然后当然直接读取填写啦</h4><p>在<code>comments.php</code>里删除</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">remember</span>(<span class="hljs-string">&#x27;author&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">remember</span>(<span class="hljs-string">&#x27;mail&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">remember</span>(<span class="hljs-string">&#x27;url&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>三句</p><p>然后在合适的位置添加（当然是在<code>&lt;/script&gt;</code>里面啦）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;?php <span class="hljs-keyword">if</span>(!$this-&gt;user-&gt;<span class="hljs-title function_">hasLogin</span>())&#123; ?&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCookie</span>(<span class="hljs-params">name</span>)&#123;<br><span class="hljs-keyword">var</span> arr,reg=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(^| )&quot;</span>+name+<span class="hljs-string">&quot;=([^;]*)(;|$)&quot;</span>);<br><span class="hljs-keyword">if</span>(arr=<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">match</span>(reg))<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">decodeURI</span>(arr[<span class="hljs-number">2</span>]));<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">adduser</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;author&#x27;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&#x27;&lt;?php echo md5($this-&gt;request-&gt;getUrlPrefix()); ?&gt;__typecho_remember_author&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;mail&#x27;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&#x27;&lt;?php echo md5($this-&gt;request-&gt;getUrlPrefix()); ?&gt;__typecho_remember_mail&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;url&#x27;</span>).<span class="hljs-property">value</span> = <span class="hljs-title function_">getCookie</span>(<span class="hljs-string">&#x27;&lt;?php echo md5($this-&gt;request-&gt;getUrlPrefix()); ?&gt;__typecho_remember_url&#x27;</span>);<br>&#125;<br><span class="hljs-title function_">adduser</span>();<br>&lt;?php &#125; ?&gt;<br></code></pre></td></tr></table></figure><p>搞定收工</p><p>没有用到 jquery，因为模板不需要，我也喜欢轻量级~</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typecho</tag>
      
      <tag>php</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为typecho增加缓存功能,支持memcached缓存</title>
    <link href="/read/typecho-cache-memcache.html"/>
    <url>/read/typecho-cache-memcache.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>更新时间：2020 年 02 月 27 日<br>推荐一下我的 Typecho 的 fastcgi_cache 缓存插件</p></blockquote><p><a href="https://cuojue.org/read/typecho-fastcgi_cache.html">Typecho 的 fastcgi_cache 缓存插件</a></p><p><strong>以下是本文原文</strong></p><hr><p>MostCache 再次修改增进版<br>原作者：<a href="http://www.phoneshuo.com/PHP/typecho-mostcache-plugin.html">typecho 缓存插件 MostCache</a><br>修改支持 memcache 作者：<a href="http://www.lvtao.net/dev/mostcache_memcached.html">为 typecho 增加文件缓存及 memcached 缓存功能-MostCache 修改增进版</a></p><p>由于作者表示存在会缓存用户状态的问题，所以<br>现在我再次修改一下:flushed:</p><h3 id="插件特性"><a href="#插件特性" class="headerlink" title="插件特性"></a>插件特性</h3><p>基于 MostCache 的缓存插件<br>支持 mysql 缓存及 Memcached 缓存<br>支持首页、目录、内容页、独立页面缓存<br>支持内容修改之后自动更新内容、目录、首页缓存<br>支持评论生效更新缓存<br>支持缓存在线管理(仅在 mysql 模式支持详细列表)<br>支持自定义缓存规则<br>支持 postviews 阅读次数更新(在默认路由规则下生效，如 archives&#x2F;cid)</p><h3 id="新增特性"><a href="#新增特性" class="headerlink" title="新增特性"></a>新增特性</h3><p>支持设置 memcached 服务器地址<br><strong>支持不缓存用户登录状态,登录状态下插件不缓存任何页面</strong></p><h4 id="插件发布页面"><a href="#插件发布页面" class="headerlink" title="插件发布页面"></a>插件发布页面</h4><p><a href="https://github.com/weicno/typecho-cache">Github</a></p><h4 id="插件使用方法"><a href="#插件使用方法" class="headerlink" title="插件使用方法"></a>插件使用方法</h4><p>下载插件：<a href="https://github.com/weicno/typecho-cache/archive/master.zip">https://github.com/weicno/typecho-cache/archive/master.zip</a></p><p>解压后，修改目录名为<code>MostCache</code>放到<code>typecho</code>的<code>plugins</code>进后台修改相关信息即可~</p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><blockquote><p>2017-01-05<br>修复在开启缓存状态下,搜索自动跳到首页<br>修复 mysql 模式下,清空缓存无效</p></blockquote><blockquote><p>2016-04-13<br>修复文章被评论不刷新缓存<br>仅在最新开发版，并开启 rewrite 的情况下测试通过</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typecho</tag>
      
      <tag>php</tag>
      
      <tag>memcache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更新cloudxns的ddns的shell脚本</title>
    <link href="/read/cloudxns_ddns_shell.html"/>
    <url>/read/cloudxns_ddns_shell.html</url>
    
    <content type="html"><![CDATA[<p>从 dnspod 换成 cloudxns 来解析，由于需要 DDNS，之前一直用的 <a href="http://www.anrip.com/ddnspod">AnripDdns</a> ，换过来之后，找到了 <a href="https://www.xdty.org/1907">天语空间</a> 的脚本，问题是，如果同时存在相同的解析纪录，会返回多个 RECORD ID 导致纪录提交失败。<br>比如解析根域，同时存在 MX 和 TXT 等纪录，就会导致 API 接口返回 302 错误。<br>翻阅了一下官方的 API 文档，发现有个更合适的 DDNS 接口，可以直接获取客户端的访问 IP 来作为 DDNS 的解析 IP，修改了一下，现在放出。</p><p>项目源码：<a href="https://github.com/weicno/cloudxns-ddns">Github</a></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/weicno/cloudxns-ddns/master/cloudxns.sh<br>wget https://raw.githubusercontent.com/weicno/cloudxns-ddns/master/cloudxns.conf<br><span class="hljs-built_in">chmod</span> +x cloudxns.sh<br></code></pre></td></tr></table></figure><p>修改<code>cloudxns.conf</code>里面的 API 信息<br>然后在<code>cloudxns.sh</code>底部添加要解析的域名信息</p><p>例：<br>解析根域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DdnsCheck <span class="hljs-string">&quot;cuojue.org&quot;</span><br></code></pre></td></tr></table></figure><p>解析子域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DdnsCheck <span class="hljs-string">&quot;cuojue.org&quot;</span> <span class="hljs-string">&quot;www&quot;</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/path/to/cloudxns.sh /path/to/cloudxns.conf<br>&#123;<span class="hljs-string">&quot;domain&quot;</span>:<span class="hljs-string">&quot;cuojue.org&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;code&quot;</span>:1,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>&#125;<br>Thu Apr  7 20:50:52 CST 2016 -- Update success<br></code></pre></td></tr></table></figure><p>输出<code>Update success</code>就代表更新成功</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dnspod</tag>
      
      <tag>cloudxns</tag>
      
      <tag>ddns</tag>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ngx_pagespeed模块给Nginx加速</title>
    <link href="/read/ngx_pagespeed_nginx.html"/>
    <url>/read/ngx_pagespeed_nginx.html</url>
    
    <content type="html"><![CDATA[<p>为了优化一下 http&#x2F;1.1 的速度，尝试一下这个模块</p><p>首先你必须已经升级了 gcc，可以看上一篇文章</p><p>下面来看看怎么用，nginx 的模块都需要静态编译，我们只有重新编译源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos soft]# cd /tmp/soft<br>[root@centos soft]# NPS_VERSION=1.11.33.0<br>[root@centos soft]# wget https://github.com/pagespeed/ngx_pagespeed/archive/release-$&#123;NPS_VERSION&#125;-beta.zip -O release-$&#123;NPS_VERSION&#125;-beta.zip<br>[root@centos soft]# unzip release-$&#123;NPS_VERSION&#125;-beta.zip<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# cd ngx_pagespeed-release-$&#123;NPS_VERSION&#125;-beta/<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# wget https://dl.google.com/dl/page-speed/psol/$&#123;NPS_VERSION&#125;.tar.gz #这是谷歌的PageSpeed优化库<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# tar -xzvf $&#123;NPS_VERSION&#125;.tar.gz  # extracts to psol/<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# /usr/local/nginx/sbin/nginx -V<br>nginx version: weicn-server/1.0<br>built by gcc 4.8.2 20140120 (Red Hat 4.8.2-15) (GCC)<br>built with OpenSSL 1.0.2g  1 Mar 2016<br>TLS SNI support enabled<br>configure arguments: --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-openssl=/tmp/soft/openssl-1.0.2g --with-http_sub_module --with-http_stub_status_module --with-pcre --with-pcre=/tmp/soft/pcre-8.33 --with-zlib=/tmp/soft/zlib-1.2.8 --with-http_secure_link_module --with-ipv6 --with-http_gzip_static_module --with-http_realip_module --with-http_flv_module --with-ld-opt=-ljemalloc --add-module=/tmp/soft/nginx-ct-1.0.0<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# cd /tmp/soft/nginx-1.9.13<br>[root@centos nginx-1.9.13]# ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-openssl=/tmp/soft/openssl-1.0.2g --with-http_sub_module --with-http_stub_status_module --with-pcre --with-pcre=/tmp/soft/pcre-8.33 --with-zlib=/tmp/soft/zlib-1.2.8 --with-http_secure_link_module --with-ipv6 --with-http_gzip_static_module --with-http_realip_module --with-http_flv_module --with-ld-opt=-ljemalloc --add-module=/tmp/soft/nginx-ct-1.0.0 --add-module=/tmp/soct/ngx_pagespeed-release-$&#123;NPS_VERSION&#125;-beta<br>[root@centos nginx-1.9.13]# make<br>[root@centos nginx-1.9.13]# mv /usr/local/nginx/sbin/nginx&#123;,_`date +%F`&#125;<br>[root@centos nginx-1.9.13]# cp objs/nginx /usr/local/nginx/sbin<br></code></pre></td></tr></table></figure><p>然后配置 conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-comment"># 侦听的端口</span><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-comment"># 服务器名称</span><br>    <span class="hljs-attribute">server_name</span> cuojue.org;<br>    <span class="hljs-comment"># 记下根目录</span><br>    <span class="hljs-attribute">root</span> /usr/local/nginx/html;<br>    <span class="hljs-comment"># 访问日志</span><br>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log main;<br>    <span class="hljs-comment"># 启用ngx_pagespeed</span><br>    <span class="hljs-attribute">pagespeed</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment"># 在此放置一个或多个pagespeed过滤器。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>说到指定 PageSpeed 过滤器，有两种不同的级别可供你选择：CoreFilters 和 PassThrough。除非有所指定，否则默认情况下使用 CoreFilters。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-comment"># 侦听的端口</span><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-comment"># 服务器名称</span><br>    <span class="hljs-attribute">server_name</span> cuojue.org;<br>    <span class="hljs-comment"># 记下根目录</span><br>    <span class="hljs-attribute">root</span> /usr/local/nginx/html;<br>    <span class="hljs-comment"># 访问日志</span><br>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log main;<br>    <span class="hljs-comment"># 启用ngx_pagespeed</span><br>    <span class="hljs-attribute">pagespeed</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">pagespeed</span> FileCachePath /var/ngx_pagespeed_cache;<br>    <span class="hljs-comment"># 禁用CoreFilters</span><br>    <span class="hljs-attribute">pagespeed</span> RewriteLevel PassThrough;<br>    <span class="hljs-comment"># 启用压缩空白过滤器</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters collapse_whitespace;<br>    <span class="hljs-comment"># 启用JavaScript库卸载</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters canonicalize_javascript_libraries;<br>    <span class="hljs-comment"># 把多个CSS文件合并成一个CSS文件</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters combine_css;<br>    <span class="hljs-comment"># 把多个JavaScript文件合并成一个JavaScript文件</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters combine_javascript;<br>    <span class="hljs-comment"># 删除带默认属性的标签</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters elide_attributes;<br>    <span class="hljs-comment"># 改善资源的可缓存性</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters extend_cache;<br>    <span class="hljs-comment"># 更换被导入文件的@import，精简CSS文件</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters flatten_css_imports;<br>    <span class="hljs-attribute">pagespeed</span> CssFlattenMaxBytes <span class="hljs-number">5120</span>;<br>    <span class="hljs-comment"># 延时加载客户端看不见的图片</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters lazyload_images;<br>    <span class="hljs-comment"># 启用JavaScript缩小机制</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_javascript;<br>    <span class="hljs-comment"># 启用图片优化机制</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_images;<br>    <span class="hljs-comment"># 预解析DNS查询</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters insert_dns_prefetch;<br>    <span class="hljs-comment"># 重写CSS，首先加载渲染页面的CSS规则</span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters prioritize_critical_css;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建将由 Nginx 写入的一个文件缓存目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos nginx-1.9.13]# mkdir /var/ngx_pagespeed_cache<br>[root@centos nginx-1.9.13]# chown www:www /var/ngx_pagespeed_cache<br></code></pre></td></tr></table></figure><p>好了，重启一下 Nginx</p><p>贴一下我现在用的规则</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pagespeed</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">pagespeed</span> FileCachePath /var/ngx_pagespeed_cache;<br><span class="hljs-attribute">pagespeed</span> UseExperimentalJsMinifier <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">pagespeed</span> RewriteLevel PassThrough;<br><span class="hljs-comment">#pagespeed EnableFilters local_storage_cache;</span><br><span class="hljs-attribute">pagespeed</span> EnableFilters collapse_whitespace,remove_comments;<br><span class="hljs-attribute">pagespeed</span> EnableFilters outline_css;<br><span class="hljs-attribute">pagespeed</span> EnableFilters flatten_css_imports;<br><span class="hljs-attribute">pagespeed</span> EnableFilters move_css_above_scripts;<br><span class="hljs-attribute">pagespeed</span> EnableFilters move_css_to_head;<br><span class="hljs-attribute">pagespeed</span> EnableFilters outline_javascript;<br><span class="hljs-attribute">pagespeed</span> EnableFilters combine_javascript;<br><span class="hljs-attribute">pagespeed</span> EnableFilters inline_javascript;<br><span class="hljs-comment">#pagespeed EnableFilters defer_javascript;</span><br><span class="hljs-attribute">pagespeed</span> EnableFilters combine_css;<br><span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_javascript;<br><span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_css,sprite_images;<br><span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_style_attributes;<br><span class="hljs-attribute">pagespeed</span> EnableFilters recompress_images;<br><span class="hljs-comment">#pagespeed EnableFilters lazyload_images;</span><br><span class="hljs-comment">#pagespeed EnableFilters rewrite_images;</span><br><span class="hljs-attribute">pagespeed</span> EnableFilters convert_meta_tags;<br><span class="hljs-attribute">pagespeed</span> EnableFilters canonicalize_javascript_libraries;<br><span class="hljs-attribute">pagespeed</span> EnableFilters elide_attributes;<br><span class="hljs-attribute">pagespeed</span> EnableFilters extend_cache;<br><span class="hljs-attribute">pagespeed</span> EnableFilters insert_dns_prefetch;<br><span class="hljs-comment">#pagespeed EnableFilters prioritize_critical_css;</span><br><span class="hljs-attribute">pagespeed</span> LoadFromFile <span class="hljs-string">&quot;https://cuojue.org&quot;</span> <span class="hljs-string">&quot;/home/cuojue.org/&quot;</span>;<br><span class="hljs-attribute">pagespeed</span> EnableFilters pedantic;<br><span class="hljs-attribute">pagespeed</span> MemcachedServers <span class="hljs-string">&quot;127.0.0.1:11211&quot;</span>;<br><span class="hljs-attribute">pagespeed</span> MaxSegmentLength <span class="hljs-number">250</span>;<br><span class="hljs-section">location</span> <span class="hljs-regexp">~ &quot;\.pagespeed\.([a-z]\.)?[a-z]</span>&#123;2&#125;\.[^.]&#123;10&#125;\.[^.]+&quot; &#123; <span class="hljs-attribute">add_header</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<br><span class="hljs-section">location</span> <span class="hljs-regexp">~ &quot;^/pagespeed_static/&quot;</span> &#123;&#125;<br><span class="hljs-section">location</span> <span class="hljs-regexp">~ &quot;^/ngx_pagespeed_beacon$&quot;</span> &#123;&#125;<br><span class="hljs-section">location</span> /ngx_pagespeed_statistics &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-section">location</span> /ngx_pagespeed_global_statistics &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-section">location</span> /ngx_pagespeed_message &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-section">location</span> /pagespeed_console &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/pagespeed_admin</span> &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/pagespeed_global_admin</span> &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~ &quot;(pagespeed_([^.]+)/(.*)?)&quot;)</span> &#123; break; &#125;<br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_uri</span> <span class="hljs-regexp">~ &quot;(ngx_pagespeed_([^.]+)/(.*)?)&quot;)</span> &#123; break; &#125;<br></code></pre></td></tr></table></figure><p>参考列表：<br><a href="https://developers.google.com/speed/pagespeed/module/build_ngx_pagespeed_from_source#dependencies">Build ngx_pagespeed From Source</a><br><a href="http://os.51cto.com/art/201402/428780.htm">如何借助 PageSpeed，为 Nginx 网站服务器提速？</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ngixn</tag>
      
      <tag>ngx_pagespeed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给网站部署CHACHA20_POLY1305加密</title>
    <link href="/read/nginx-chacha20-poly1305.html"/>
    <url>/read/nginx-chacha20-poly1305.html</url>
    
    <content type="html"><![CDATA[<h3 id="首先下载需要的软件并解压"><a href="#首先下载需要的软件并解压" class="headerlink" title="首先下载需要的软件并解压"></a>首先下载需要的软件并解压</h3><pre><code class="hljs">wget http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.3.3.tar.gztar xzf libressl-2.3.3.tar.gzwget http://nginx.org/download/nginx-1.9.13.tar.gztar xzf nginx-1.9.13.tar.gz</code></pre><p>由于 Openssl 的发行版并不支持 CHACHA20 加密算法，所以这里我们采用 LibreSSL 来编译</p><pre><code class="hljs">[root@centos soft]# /usr/local/nginx/sbin/nginx -Vnginx version: nginx/1.9.13built by gcc 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC)built with OpenSSL 1.0.2g  1 Mar 2016TLS SNI support enabledconfigure arguments: --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-openssl=/tmp/soft/openssl-1.0.2g --with-http_sub_module --with-http_stub_status_module --with-pcre --with-pcre=/tmp/soft/pcre-8.33 --with-zlib=/tmp/soft/zlib-1.2.8 --with-http_secure_link_module --with-ipv6 --with-http_gzip_static_module --with-http_realip_module --with-http_flv_module --with-ld-opt=&#39;-ljemalloc&#39;</code></pre><p>想查看一下当前编译的 nginx 的参数</p><h3 id="然后开始重新编译-nginx"><a href="#然后开始重新编译-nginx" class="headerlink" title="然后开始重新编译 nginx"></a>然后开始重新编译 nginx</h3><pre><code class="hljs">cd nginx-1.9.13make clean./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-http_sub_module --with-http_stub_status_module --with-pcre --with-pcre=/tmp/soft/pcre-8.33 --with-zlib=/tmp/soft/zlib-1.2.8 --with-http_secure_link_module --with-ipv6 --with-http_gzip_static_module --with-http_realip_module --with-http_flv_module --with-ld-opt=&#39;-ljemalloc&#39; --with-openssl=/tmp/soft/libressl-2.3.3 --with-ld-opt=&quot;-lrt&quot;makemv /usr/local/nginx/sbin/nginx&#123;,_`date +%F`&#125;cp objs/nginx /usr/local/nginx/sbin</code></pre><p>最后，修改<code>ssl_ciphers</code>部分</p><pre><code class="hljs">ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4;</code></pre><p>重启一下 nginx 就可以了</p><hr><p>这样导致的问题是不支持 nginx-ct,不能编译 nginx-ct 进去,<a href="http://v2ex.com/t/2528961">V2XE</a>上也有同学试验过</p><blockquote><p>nginx-ct:<br>The following versions of OpenSSL are supported:<br>OpenSSL 1.0.2 or above.<br>BoringSSL 4fac72e or above.</p></blockquote><blockquote><p>LibreSSL is not supported as it doesn’t provide either of the functions used to add the signed_certificate_timestamp extension to the response (SSL_CTX_add_server_custom_ext and SSL_CTX_set_signed_cert_timestamp_list).</p></blockquote><p><del>然而我 patch 后的 openssl 无法编译，所以暂时放弃 chacha20</del></p><p>由于 patch 过后的 openssl 需要 gcc4.7+和 binutils2.22+编译，而我用的 centos6 自带的版本是 gcc4.4 和 binutils2.20，所以更新一下，参考《<a href="http://www.51bbo.com/archives/2228">CENTOS 6 通过 YUM 升级 GCC 到 4.7&#x2F;4.8</a>》</p><pre><code class="hljs">wget http://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repoyum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++mv /usr/bin/gcc /usr/bin/gcc-4.4.7mv /usr/bin/g++ /usr/bin/g++-4.4.7mv /usr/bin/c++ /usr/bin/c++-4.4.7ln -s /opt/rh/devtoolset-2/root/usr/bin/gcc /usr/bin/gccln -s /opt/rh/devtoolset-2/root/usr/bin/c++ /usr/bin/c++ln -s /opt/rh/devtoolset-2/root/usr/bin/g++ /usr/bin/g++gcc --version</code></pre><p>升级之后，重新编译 nginx，然后就成了</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/04/3508010857.png"></p><p>等等，好像有点不对，怎么显示的“服务器未提供任何 Certificate Transparency 信息”，我明明部署了 nginx-ct 的呀……<br>然后我果断的访问了一下 google translate</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/04/88018558.png"></p><p>这是什么鬼？自家也不支持了？在 win 上都显示支持的，醉了醉了。</p><p>注：我使用的老版本 Chrome(47.0.2526.107)因为最新版(49)已经不显示加密方式了。</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>ssl</tag>
      
      <tag>https</tag>
      
      <tag>LibreSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启用 SSL 的 Certificate Transparency 策略</title>
    <link href="/read/ssl-certificate-transparency.html"/>
    <url>/read/ssl-certificate-transparency.html</url>
    
    <content type="html"><![CDATA[<h3 id="Certificate-Transparency-是什么？"><a href="#Certificate-Transparency-是什么？" class="headerlink" title="Certificate Transparency 是什么？"></a>Certificate Transparency 是什么？</h3><p>HTTPS 网站的身份认证是通过证书信任链完成的，浏览器从站点证书开始递归校验父证书，直至出现信任的根证书（根证书列表一般内置于操作系统，Firefox 则自己维护）。然而，受信任的 CA（证书颁发机构）有好几百个，他们成为整个网站身份认证过程中一个较大的攻击面。实际上，目前由于 CA 失误导致错误签发证书；以及个别 CA 出于某些目的（如监控加密流量）故意向第三方随意签发证书这两种情况时有发生。</p><p>无论是 CA 无意或有意签发出来的「非法证书」，都能通过目前的证书链校验机制的验证。这些 CA 签发的「非法证书」相比自签名的「无效证书」，更难被发现，即使被发现依靠现有机制也很难快速消除影响。</p><p>另外，域名所有者的管理不善也可能导致域名配置被第三方控制，从而第三方能够向 CA 申请你网站的证书（特别是 DV 类型的证书）。这种情况，发现和处理同样很麻烦。</p><p>而 <a href="https://www.certificate-transparency.org/">Certificate Transparency</a> 就是为了解决这些问题诞生的，它可以直译为证书透明度，由 Google 主导，并由 IETF 标准化为 <a href="http://tools.ietf.org/html/rfc6962">RFC 6962</a>。Certificate Transparency 的目标是提供一个开放的审计和监控系统，可以让任何域名所有者或者 CA 确定证书是否被错误签发或者被恶意使用，从而提高 HTTPS 网站的安全性。</p><p>Certificate Transparency 整套系统由三部分组成：1）Certificate Logs；2）Certificate Monitors；3）Certificate Auditors。完整的工作原理可以看官方文档：<a href="https://www.certificate-transparency.org/how-ct-works">How Certificate Transparency Works</a>。</p><p>简单说来，证书所有者或者 CA 都可以主动向 Certificate Logs 服务器提交证书，所有证书记录都会接受审计和监控。支持 CT 的浏览器（目前只有 Chrome）会根据 Certificate Logs 中证书状态，作出不同的反应。CT 不是要替换现有的 CA 设施，而是做为补充，使之更透明、更实时。</p><p>Certificate Logs 服务器由 Google 或 CA 部署，<a href="https://www.certificate-transparency.org/known-logs">这个页面</a>列举了目前已知的服务器。合法的证书提交到 CT Logs 服务器之后，服务器会返回 signed certificate timestamp（SCT），要启用 CT 就必须用到 SCT 信息。</p><p>以上抄录自[Certificate Transparency 那些事](<a href="https://imququ.com/post/certificate-transparency.html">https://imququ.com/post/certificate-transparency.html</a> “Certificate Transparency)，更详细的内容可以直接过去看，这里纪录一下怎么部署，我当然参考了<a href="https://www.linpx.com/p/https-certificate-to-enable-transparency-certificate-policy.html">Chakhsu Lau</a>用最简单的方法啦……</p><h3 id="提交我们的证书"><a href="#提交我们的证书" class="headerlink" title="提交我们的证书"></a>提交我们的证书</h3><p>直接 <a href="https://ct-status.org/submit">点击这里</a> 提交即可</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/04/4252223692.png"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/04/2869200099.png"></p><p>提交完毕会生成一个 zip 文件，下载后，把里面的文件放到服务器的某个文件夹，比如<code>/your/path/to/scts</code></p><h3 id="编译-Nginx，加入-CT-模块"><a href="#编译-Nginx，加入-CT-模块" class="headerlink" title="编译 Nginx，加入 CT 模块"></a>编译 Nginx，加入 CT 模块</h3><p>要让 Nginx 支持发送 signed_certificate_timestamp 这个 TLS 扩展，需要加入 <a href="https://github.com/grahamedgecombe/nginx-ct">nginx-ct</a> 这个模块。nginx-ct 需要与 OpenSSL 1.0.2+ 或者 BoringSSL 4fac72e+ 一起编译，不支持 LibreSSL。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O nginx-ct.zip -c https://github.com/grahamedgecombe/nginx-ct/archive/v1.0.0.zip<br>unzip nginx-ct.zip<br></code></pre></td></tr></table></figure><p>然后在编译 nginx 的时候在 configure 指定一下路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">--add-module=../nginx-ct-1.0.0<br></code></pre></td></tr></table></figure><p>更新完成 nginx 之后，在配置文件加上</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssl_ct</span>   <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">ssl_ct_static_scts</span>   /your/path/to/scts;<br></code></pre></td></tr></table></figure><p>重启 nginx 试试看成功没有<br><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/04/1845328240.png"></p><p>已经显示了 服务器已提供有效的 Certificate Transparency 信息。</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>ssl</tag>
      
      <tag>https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 DNS 验证方式获取 lets-encrypt 证书的快速脚本</title>
    <link href="/read/lets-encrypt-dns.html"/>
    <url>/read/lets-encrypt-dns.html</url>
    
    <content type="html"><![CDATA[<p>折腾 SSL 的时候，在网上发现的优秀脚本，可以在没有搭建网站的时候，先用 DNS 验证一下来申请 lets-encrypt 证书，比如本站用的，还可以添加到计划任务来定时更新证书，比起 Git python 的配置真是 so easy 呀！</p><p>详细见<a href="https://github.com/weicno/scripts/tree/master/le-dns">GitHub</a>，作者好像还有各种验证的脚本，我只用到了 DNS 版</p><p>首先下载脚本和配置文件</p><p>我用的是 DNSPOD，就下载 DNSPOD 版本的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/xdtianyu/scripts/raw/master/le-dns/le-dnspod.sh<br>wget https://github.com/xdtianyu/scripts/raw/master/le-dns/dnspod.conf<br>chmod +x le-dnspod.sh<br></code></pre></td></tr></table></figure><p>然后去 DNSPOD 申请一个 D+的 TOKEN key</p><p>填到<code>dnspod.conf</code>里面<br>修改其中的 TOKEN 为您的 dnspod api token ，注意格式为 123456,556cxxxx。 修改 DOMAIN 为你的根域名，修改 CERT_DOMAINS 为您要签的域名列表，需要 ECC 证书时请取消 #ECC&#x3D;TRUE 的注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">TOKEN=&quot;YOUR_TOKEN_ID,YOUR_API_TOKEN&quot;<br>RECORD_LINE=&quot;默认&quot;<br>DOMAIN=&quot;example.com&quot;<br>CERT_DOMAINS=&quot;example.com www.example.com im.example.com&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ECC=TRUE</span><br></code></pre></td></tr></table></figure><p>填好后如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">TOKEN=&quot;这里写key的数字编号,这里写KEY&quot;<br>RECORD_LINE=&quot;默认&quot;<br>DOMAIN=&quot;cuojue.org&quot;<br>CERT_DOMAINS=&quot;cuojue.org&quot;<br>ECC=TRUE<br></code></pre></td></tr></table></figure><p>然后就可以运行试试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./le-dnspod.sh dnspod.conf<br></code></pre></td></tr></table></figure><p>没有问题的话，运行完毕，在当前目录会生成一个 certs 文件夹，里面有个你域名的文件夹，里面就是你需要的证书了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">fullchain.pem #完整的证书链证书，如果是nginx就用这个<br>privkey.pem #证书的私钥<br></code></pre></td></tr></table></figure><p>配置一下 nginx 就可以用上高大上的 ssl 了。</p><p>当然国内也有免费的 SSL 证书<a href="https://buy.wosign.com/Free/#ssl">Wosign</a>，为期两年的，比 lets-encrypt 的三个月长多了，但是不支持 ECC 证书，所以申请一个备用也是不错的</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>lets-encrypt</tag>
      
      <tag>dnspod</tag>
      
      <tag>ssl</tag>
      
      <tag>https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gen8上的ESXi折腾纪录(硬盘篇)</title>
    <link href="/read/gen8-esxi-disk.html"/>
    <url>/read/gen8-esxi-disk.html</url>
    
    <content type="html"><![CDATA[<p>留下纪录，以备查验，走了不少弯路啊</p><p>首先说一下，Gen8 的内置的软 RAID 支持单块硬盘初始化成 RAID0 使用的，也就是说，单块硬盘也可以开 RAID 模式，然后在 ilo 里面就可以看到硬盘信息了，并且内置的 RAID 支持识别 HDD 和 SSD，初始化过后，在 ESXi 里面也可以正常识别为 SSD。</p><p>一开始用 ACHI 模式在 ESXi 好像很卡？</p><p>然后切换到了 RAID 模式，直接切换后会识别不到硬盘，必须去 RAID 的控制器初始化一下，也就是 POST 的时候看见 F5 就按一下 F5 进去。<br>切换到 RAID 模式之后，在 vSphere 添加硬盘竟然出现了错误！！</p><blockquote><p>调用对象 “ha-datastoresystem”的“HostDatastoreSystem.QueryVmfsDatastoreCreateOptions” 失败</p></blockquote><p>这不是坑爹么……</p><p>多方查验，出现这个问题是因为磁盘上有不支持的分区格式，我去，写的明明是使用整块磁盘，您不能重新初始化一下分区表吗</p><p>网上的解决方法，来自<a href="http://aba.qzu.cn/archives/531.html">ESXi5.1 调用对象”ha-datastoresystem”出错及处理</a>虽然我装的是 ESXi6 但是按照这个解决了，就是开 SSH 进去用 fdisk 删除了分区。</p><p>记录一下方法，避免原作者网站消失……</p><h3 id="1、查看磁盘情况"><a href="#1、查看磁盘情况" class="headerlink" title="1、查看磁盘情况"></a>1、查看磁盘情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Gen8-ESXi:~] fdisk -l<br><br>***<br>*** The fdisk <span class="hljs-built_in">command</span> is deprecated: fdisk does not handle GPT partitions.  Plea se use partedUtil<br>***<br><br>Found valid GPT with protective MBR; using GPT<br><br>Disk /dev/disks/mpx.vmhba32:C0:T0:L0: 121438208 sectors,  115M<br>Logical sector size: 512<br>Disk identifier (GUID): 4bf285cd-9feb-4a1f-babb-9c48602ae7b6<br>Partition table holds up to 128 entries<br>First usable sector is 34, last usable sector is 121438174<br><br>Number  Start (sector)End (sector)  Size   Code  Name<br>   1  6481918128   0700<br>   58224  520191499K   0700<br>   6  520224 1032191499K   0700<br>   7 1032224 1257471219K   0700<br>   8 1257504 1843199571K   0700<br>   9 1843200 7086079   5120K   0700<br>  10 7086080   121438160109M   0700<br>fdisk: device has more than 2^32 sectors, can<span class="hljs-string">&#x27;t use all of them</span><br><span class="hljs-string">Found valid GPT with protective MBR; using GPT</span><br><span class="hljs-string"></span><br><span class="hljs-string">Disk /dev/disks/naa.600508b1001c2fc9783875b1ae59d44a: 4294967295 sectors, 4095M</span><br><span class="hljs-string">Logical sector size: 512</span><br><span class="hljs-string">Disk identifier (GUID): bb8fe184-91c1-439d-9b86-5cc0ce61f7aa</span><br><span class="hljs-string">Partition table holds up to 128 entries</span><br><span class="hljs-string">First usable sector is 34, last usable sector is 5860467598</span><br><span class="hljs-string"></span><br><span class="hljs-string">Number  Start (sector)End (sector)  Size   Code  Name</span><br><span class="hljs-string">   12048  5860463804   5588M   0700</span><br><span class="hljs-string">Found valid GPT with protective MBR; using GPT</span><br><span class="hljs-string"></span><br><span class="hljs-string">Disk /dev/disks/naa.600508b1001cd4c1eeb69635def8f132: 117161280 sectors,  111M</span><br><span class="hljs-string">Logical sector size: 512</span><br><span class="hljs-string">Disk identifier (GUID): 26aca1e5-894f-43e2-b698-1b8a7fa46d27</span><br><span class="hljs-string">Partition table holds up to 128 entries</span><br><span class="hljs-string">First usable sector is 34, last usable sector is 117231374</span><br><span class="hljs-string"></span><br><span class="hljs-string">Number  Start (sector)End (sector)  Size   Code  Name</span><br><span class="hljs-string">   12048   117229567111M   0700  Basic data partition</span><br></code></pre></td></tr></table></figure><p>（这是后来加了一块 SSD 到 SATA5 之后出错的信息，套用一下，之前没保存）</p><h3 id="2、删除磁盘分区-注意一定要分清楚磁盘编号，别删错了"><a href="#2、删除磁盘分区-注意一定要分清楚磁盘编号，别删错了" class="headerlink" title="2、删除磁盘分区(注意一定要分清楚磁盘编号，别删错了)"></a>2、删除磁盘分区(注意一定要分清楚磁盘编号，别删错了)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Gen8-ESXi:~] fdisk /dev/disks/naa.600508b1001cd4c1eeb69635def8f132<br><br><br>***<br>*** The fdisk <span class="hljs-built_in">command</span> is deprecated: fdisk does not handle GPT partitions.  Please use partedUtil<br>***<br><br>Found valid GPT with protective MBR; using GPT<br><br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): d<br>Selected partition 1<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): 1<br>1: unknown <span class="hljs-built_in">command</span><br>Command Action<br>o   create a new empty DOS partition table<br>p   <span class="hljs-built_in">print</span> the partition table<br>q   quit without saving changes<br>s   create a new empty Sun disklabel<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): o<br>Building a new DOS disklabel. Changes will remain <span class="hljs-keyword">in</span> memory only,<br>until you decide to write them. After that the previous content<br>won<span class="hljs-string">&#x27;t be recoverable.</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">The number of cylinders for this disk is set to 7264.</span><br><span class="hljs-string">There is nothing wrong with that, but this is larger than 1024,</span><br><span class="hljs-string">and could in certain setups cause problems with:</span><br><span class="hljs-string">1) software that runs at boot time (e.g., old versions of LILO)</span><br><span class="hljs-string">2) booting and partitioning software from other OSs</span><br><span class="hljs-string">   (e.g., DOS FDISK, OS/2 FDISK)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Command (m for help): w</span><br><span class="hljs-string">The partition table has been altered.</span><br><span class="hljs-string">Calling ioctl() to re-read partition table</span><br></code></pre></td></tr></table></figure><p>然后现在就可以正常的添加硬盘了~:smiley:</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gen8</tag>
      
      <tag>esxi</tag>
      
      <tag>ssd</tag>
      
      <tag>hdd</tag>
      
      <tag>raid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖(Synology)采用Docker运行迅雷快鸟加速</title>
    <link href="/read/Docker-Xunlei-Fastdick.html"/>
    <url>/read/Docker-Xunlei-Fastdick.html</url>
    
    <content type="html"><![CDATA[<p>首先感谢作者<a href="https://yooooo.us/2015/xunlei-fastdick-router?variant=zh-cn">fffonion</a>的移植，详情见<a href="https://github.com/fffonion/Xunlei-Fastdick">Github</a>源码</p><p>在 R6300v2 的<a href="https://advancedtomato.com/">AdvancedTomato</a>上运行过，在<a href="http://koolshare.cn/thread-34888-1-3.html">梅林改版固件</a>上也运行过……</p><p>下面进入正题，怎么用群辉(Synology)自带的 Docker 来运行迅雷快鸟</p><p>首先你得有一台群辉(Synology)NAS，还得是 Intel 架构的，版本还需要升级到 5.2+，然后就可以直接在套件中心安装 Docker 了</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/4154038517.jpg"></p><p>安装完毕，打开 Docker，进入注册表，搜索“fastdick”点击下载(下载速度……天朝大局域网你懂的……)</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/2036802192.jpg"></p><p>好不容易下载完了，有 73M</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/1674918902.jpg"></p><p>然后选中，点击启动，会弹出创建容器，随便取个名字</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/1385220488.jpg"></p><p>第二页可以随便选择，这里我选择 CPU 优先为低</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/2465385813.jpg"></p><p>这里进入高级选项</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/4251334783.jpg"></p><p>添加一个卷映射，选择一个本地目录，装载路径填写<code>/flier/xunlei-fastdick</code>，去掉只读属性</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/272224823.jpg"></p><p>切换到环境选项，添加两个变量<code>XUNLEI_UID</code>和<code>XUNLEI_PASSWD</code>也就是你迅雷的 ID 和密码</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/2837438817.jpg"></p><p>然后大概就是这个样子，测试一下可以运行不</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/1969959877.png"></p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/3036372881.png"></p><p>看起来可以运行了呢，由于我用的假 ID，正确的提示了帐号不存在，当我用上真 ID :no_mouth: 公司的网不支持提速</p><p><img src="https://npm.elemecdn.com/nacdn@1.0.51/blog/static/files/2016/03/2291282395.png"><br>就是这样了，现在可以愉快的用快鸟加速了 :stuck_out_tongue_winking_eye:</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Synology</tag>
      
      <tag>Docker</tag>
      
      <tag>迅雷快鸟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欢迎使用 Typecho</title>
    <link href="/read/start.html"/>
    <url>/read/start.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>如果您看到这篇文章,表示您的 blog 已经安装成功.</p></blockquote><p>又开始折腾博客了，最近败了 Gen8，装了一个 CentOS 练手，手痒又开始部署 Typecho 了，还是好几年前用过，曾经的博客，域名都被别人重新注册了，好多感慨呀</p><p>没错，本博客就是建立在博主家里的 Gen8 服务器上，用的 DNSPOD 的 DDNS 来解析的。啦啦啦，节省了一笔“不菲”的租用费。</p><p>80 端口已经封了，只有 443 是通的，也就是说只能用 https 来访问了，不知道 443 可以顶多久~</p><hr><p>已经放到腾讯云的学生机上了,用了又拍云的 CDN</p><hr><p>2021-03-06 更新</p><p>已经换成 hexo 了<br><a href="https://cuojue.org/read/typecho-to-hexo.html">把博客程序从 typecho 换成了 Hexo</a></p>]]></content>
    
    
    <categories>
      
      <category>默认分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>把博客程序从 typecho 换成了 Hexo</title>
    <link href="/read/typecho-to-hexo.html"/>
    <url>/read/typecho-to-hexo.html</url>
    
    <content type="html"><![CDATA[<h3 id="为什么要换掉typecho"><a href="#为什么要换掉typecho" class="headerlink" title="为什么要换掉typecho"></a>为什么要换掉typecho</h3><hr><p>之前白嫖的学生机要到期了，是时候给博客换个归宿了。<br>博客原本的程序是 typecho 现在换到了 Hexo . 为什么呢？免费服务香啊！</p><blockquote><p>现在所有用到的服务，只有这个域名是花钱的。</p></blockquote><p>具体是那些呢</p><p>博客程序：<a href="https://hexo.io/">Hexo</a><br>评论程序：<a href="https://twikoo.js.org/">Twikoo</a><br>托管服务：Github + <a href="https://vercel.com/">Vercel</a> + <a href="https://www.netlify.com/">Netlify</a> + Cloudflare Pages(已经毙了,会自动去掉结尾html,无法手动设置)<br>CDN：腾讯云 + 阿里云 + 又拍云</p><p>源码托管在 Github 的私有仓库，提交后由 Vercel 和 Netlify 自动编译出静态网站，腾讯云CDN源站设置 Vercel 和 Netlify 相互热备，然后Github Action自动刷新CDN缓存资源。</p><hr><h3 id="记录一下迁移过程"><a href="#记录一下迁移过程" class="headerlink" title="记录一下迁移过程"></a>记录一下迁移过程</h3><h4 id="备份-typecho-的文章数据"><a href="#备份-typecho-的文章数据" class="headerlink" title="备份 typecho 的文章数据"></a>备份 typecho 的文章数据</h4><p>这里用到的是 <a href="https://github.com/lizheming/typecho-export-hugo">Export2Hugo</a> 插件导出所有文章。<br>不过插件内写的都是 <code>exec</code> .一般用PHP都屏蔽了这种命令，只能小改一下啦。<br>打开<code>Action.php</code>改第29行的<code>$dir</code>直接改成一个当前能访问的绝对地址。<br>正常前台现在点击备份，会在这个目录生成所有的文章啦~</p><h4 id="备份-typecho-的评论数据"><a href="#备份-typecho-的评论数据" class="headerlink" title="备份 typecho 的评论数据"></a>备份 typecho 的评论数据</h4><p>评论用的 <a href="https://github.com/AyagawaSeirin/TypechoToHexo">TypechoToHexo</a> 插件导出。</p><blockquote><p>为什么文章不用这个呢？最开始用的也是这个插件，导出的有些问题……</p></blockquote><p>评论导出还挺好使的。</p><p>导出单页评论需要修改 <code>comments_page.php</code> 里的 <code>$url</code> 和 <code>$cid</code>,由多少个单页就需要导出几次</p><p>导出 json 的文件可以直接在 Twikoo 里导入，兼容 Valine 格式</p><h4 id="需要优化的地方"><a href="#需要优化的地方" class="headerlink" title="需要优化的地方"></a>需要优化的地方</h4><p>博客之前地址用的都是自定义slug，所以需要修改 Hexo 的<code>permalink: read/:uri.html</code> (刚好slug是内置变量，无法自定义，只能改个命名用uri)</p><p>所有之前主题使用的自定义内部链接要修改成通用链接……</p><p>导出的图片需要修改URL</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>好久没有管博客了。等有空<del>写几篇</del>(水几篇)文章分享如何搭建这些服务吧</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>typecho</tag>
      
      <tag>Twikoo</tag>
      
      <tag>Vercel</tag>
      
      <tag>Netlify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo的外链转内链插件</title>
    <link href="/read/hexo-filter-links.html"/>
    <url>/read/hexo-filter-links.html</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo的外链转内链插件"><a href="#Hexo的外链转内链插件" class="headerlink" title="Hexo的外链转内链插件"></a>Hexo的外链转内链插件</h2><p>这个插件的功能就是把所有的外部链接转换成类似<code>https://cuojue.org/go/#aHR0cDovL2N1b2p1ZS5vcmc=</code>的链接形式</p><blockquote><p>初衷是博客从 typecho 切换到了 Hexo，然后找了一圈都没有这种插件. ( 有一个竟然是用js在前端替换实现的，掩耳盗铃？<a href="https://github.com/hvnobug/hexo-external-link">hexo-external-link</a> ) .最后无奈只能自己写一个了……</p></blockquote><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><hr><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm i hexo-filter-links --save<br></code></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>去 <code>_config.yml</code> 添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">&#x27;site&#x27;</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;exclude1.com&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;exclude2.com&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;*.exclude2.com&#x27;</span> <span class="hljs-comment">#1.0.4及以上版本支持</span><br></code></pre></td></tr></table></figure><h5 id="配置项解释"><a href="#配置项解释" class="headerlink" title="配置项解释"></a>配置项解释</h5><ul><li><strong>enable</strong> - 开启或者关闭插件，默认是开  <code>true</code>.</li><li><strong>field</strong> - 设置生效插件范围，一共有两种选项 ‘site’ 和 ‘post’， 默认是全站 <code>site</code>.<ul><li>‘post’ - 仅在内容页启用</li><li>‘site’ - 在全站都启用</li></ul></li><li><strong>exclude</strong> - 排除不需要转换的域名，绝对匹配，带 <code>www</code> 和不带的是需要加两条.<ul><li>‘exclude1.com’ 不包括 <code>www.exclude1.com</code> 和 <code>en.exclude1.com</code>.</li><li>‘*.exclude2.com’ 包括 <code>www.exclude2.com</code> 和 <code>en.exclude2.com</code>.</li></ul></li></ul><hr><h4 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h4><ul><li>v1.0.4<ul><li>支持排除通配符域名</li></ul></li><li>v1.0.6<ul><li>修改<code>?</code>(search)为<code>#</code>(hash)避免某些CDN不缓存<code>go</code>页面</li></ul></li></ul><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>参考了官方插件 <code>hexo-filter-nofollow</code> 的实现并继承了它的功能。<br>也就是本插件也包含了 <code>nofollow</code> 功能。</p><p>参考实现：<a href="https://github.com/hexojs/hexo-filter-nofollow">hexo-filter-nofollow</a></p><p>源码地址：<a href="https://github.com/naicfeng/hexo-filter-links">GitHub</a></p><p>演示地址：上面两个链接就是啦~</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>hexo-filter-links</tag>
      
      <tag>plugins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>零成本搭建一个服务器/网站状态检测页</title>
    <link href="/read/create_server_status_website.html"/>
    <url>/read/create_server_status_website.html</url>
    
    <content type="html"><![CDATA[<p>演示地址：<a href="https://status.wuyang.ws/">https://status.wuyang.ws</a></p><h2 id="注册账户和添加检测项目"><a href="#注册账户和添加检测项目" class="headerlink" title="注册账户和添加检测项目"></a>注册账户和添加检测项目</h2><h3 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h3><ol><li><p>先要有一个 <a href="https://github.com/" title="GitHub">GitHub</a> 或 <a href="https://gitlab.com/" title="GitLab">GitLab</a> 或 <a href="https://bitbucket.org/" title="Bitbucket">Bitbucket</a> 账号</p></li><li><p>然后去 <a href="https://uptimerobot.com/">https://uptimerobot.com</a> 注册一个账户</p></li><li><p>登录 <a href="https://vercel.com/login">https://vercel.com/login</a> (用上面的账户直接登录)</p></li></ol><h3 id="添加需要检测的网站-服务器"><a href="#添加需要检测的网站-服务器" class="headerlink" title="添加需要检测的网站/服务器"></a>添加需要检测的网站/服务器</h3><blockquote><p>uptimerobot免费支持50个网站/服务器的检测，并且提供API</p></blockquote><p>登录uptimerobot后点击“Add New Monitor”添加需要检测的服务</p><p><img src="https://static.cuojue.org/blog/files/2021/03/1532070197.jpg" alt="2.jpg"></p><p>添加完毕就可以使用自带的 Status pages ，不过地址被she会zhu义高wall挡了……（所以才有了这篇水文）</p><p><img src="https://static.cuojue.org/blog/files/2021/03/2288733366.jpg" alt="3.jpg"></p><h3 id="获取API密钥"><a href="#获取API密钥" class="headerlink" title="获取API密钥"></a>获取API密钥</h3><p>在uptimerobot网站点击头部 “My Settings”进入设置，拉到最下面“API Settings”点击“Show/hide it.”<br>复制你的API备用</p><p><img src="https://static.cuojue.org/blog/files/2021/03/3242396119.jpg" alt="4.jpg"></p><h3 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站</h3><h3 id="在vercel创建项目"><a href="#在vercel创建项目" class="headerlink" title="在vercel创建项目"></a>在vercel创建项目</h3><p>以GitHub为例<br>Fork这个项目 <a href="https://github.com/yb/uptime-status">https://github.com/yb/uptime-status</a><br>修改public/config.js内的ApiKeys为刚才获取到的</p><p>在vercel选择“New Project”<br>然后在“Import Git Repository”选择刚才Fork的库<br>点击“Import”，后面都默认下一步，即可创建成功</p><p><img src="https://static.cuojue.org/blog/files/2021/03/3575079124.jpg" alt="5.jpg"></p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>创建完毕会自动转到“Overview”页<br>在当前页点击“View Domains”即可绑定自己的域名<br>绑定的域名可以用Cname或者NS方式接入<br>检测到域名指向成功后会自动申请Let’s Encrypt证书，支持SSL访问</p><p><img src="https://static.cuojue.org/blog/files/2021/03/1346083044.jpg" alt="6.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分享去日志记录版本的LSPosed</title>
    <link href="/read/lsposed.html"/>
    <url>/read/lsposed.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们并不能保证模块作者不滥用日志功能！所以日常使用需要完全禁用日志！</p></blockquote><h3 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h3><p>1.修改了管理器图标<br>2.修改了管理器包名(org.lsposed.manager)<br>3.禁用了全部日志</p><p>其他部分保持与官方的同步</p><span id="more"></span><h3 id="最近更新日期"><a href="#最近更新日期" class="headerlink" title="最近更新日期"></a>最近更新日期</h3><p><img src="https://img.shields.io/github/last-commit/naicfeng/edxposed/LSPosed" title="LSPosed更新日期"></p><p>###界面预览</p><p><img src="https://static.cuojue.org/blog/files/2021/02/3149512836.jpg" alt="主页面"></p><p><img src="https://static.cuojue.org/blog/files/2021/02/576053060.jpg" alt="关于页面"></p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>不接受任何反馈，如有问题请使用官方(Debug)版并<strong>携带日志</strong>向<a href="https://github.com/LSPosed/LSPosed/issues" title="官方Issues">官方Issues</a>反馈</p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载地址：<a href="https://disk.cuojue.org/s/kshm7yc7" title="LSPosed下载">本站网盘</a> 密码：lsp</p><p><strong>官方是从 5000 开始计编译版本号的，我是从 2000 开始计的。网盘一般都是当天随官方更新的，不要看编译版本号比较小以为是非常古老的版本，要看上传日期！</strong></p><p>源码地址：<a href="https://github.com/naicfeng/LSPosed">GitHub</a></p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LSPosed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho简单增加页面执行时间</title>
    <link href="/read/typecho-add-total.html"/>
    <url>/read/typecho-add-total.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>执行时间只能做个参考，并不是特别精确，因为输出了时间之后，还进行了运算。</p></blockquote><span id="more"></span><p>打开根目录 <code>index.php</code></p><p>在<code>/** 载入配置支持 */</code>上面加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 加载时间</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> bool</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer_start</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$timestart</span>;<br><span class="hljs-variable">$mtime</span>     = explode( <span class="hljs-string">&#x27; &#x27;</span>, microtime() );<br><span class="hljs-variable">$timestart</span> = <span class="hljs-variable">$mtime</span>[<span class="hljs-number">1</span>] + <span class="hljs-variable">$mtime</span>[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>timer_start();<br></code></pre></td></tr></table></figure><p>打开<code>模板文件/footer.php</code></p><p>在合适位置加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">Total <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> timer_stop();<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在最后加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer_stop</span>(<span class="hljs-params"> <span class="hljs-variable">$display</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$precision</span> = <span class="hljs-number">3</span> </span>) </span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$timestart</span>, <span class="hljs-variable">$timeend</span>;<br><span class="hljs-variable">$mtime</span>     = explode( <span class="hljs-string">&#x27; &#x27;</span>, microtime() );<br><span class="hljs-variable">$timeend</span>   = <span class="hljs-variable">$mtime</span>[<span class="hljs-number">1</span>] + <span class="hljs-variable">$mtime</span>[<span class="hljs-number">0</span>];<br><span class="hljs-variable">$timetotal</span> = number_format( <span class="hljs-variable">$timeend</span> - <span class="hljs-variable">$timestart</span>, <span class="hljs-variable">$precision</span> );<br><span class="hljs-variable">$r</span>         = <span class="hljs-variable">$timetotal</span> &lt; <span class="hljs-number">1</span> ? <span class="hljs-variable">$timetotal</span> * <span class="hljs-number">1000</span> . <span class="hljs-string">&quot; ms&quot;</span> : <span class="hljs-variable">$timetotal</span> . <span class="hljs-string">&quot; s&quot;</span>;<br><span class="hljs-keyword">if</span> ( <span class="hljs-variable">$display</span> ) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$r</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$r</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>即可</p><p>代码网上搜的，具体出处已经无从考究，<a href="https://cuojue.org/read/typecho-fastcgi_cache.html/comment-page-1#comment-410" title="有评论需要">有评论需要</a>，分享出来吧~</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一篇快速上手Clash的简单教程</title>
    <link href="/read/clash.html"/>
    <url>/read/clash.html</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/Dreamacro/clash" title="Clash">Clash</a> 是一个基于规则的流量过滤网络调试程序。<br>可设置多个流量出口。<br>可根据IP、域名规则指定流量出口。<br>入口支持Socks5/http(S)/Redir等协议<br>出口支持SS(R)/Vmess/Socks5/http/snell等协议<br>控制提供了RESTful API</p><p>由于是基于规则分流的网络调试工具，所以使用比较方便！</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>推荐规则项目：<a href="https://github.com/ConnersHua/Profiles" title="神机规则">神机规则</a><br>配置自动转换项目：<a href="https://github.com/tindy2013/subconverter" title="自动转换配置">自动转换配置</a></p><p>本站公益转换：<strong><a href="https://sub.789.st/">https://sub.789.st</a></strong><br>可直接转换多种订阅链接为Clash配置</p><p><a href="https://github.com/Dreamacro/clash/blob/master/README.md" title="官方配置文件例">官方配置文件例</a></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>用法很简单，下载二进制文件<br>这里推荐本站编译的 <a href="https://github.com/naicfeng/clash/releases" title="ClashR">ClashR</a> 比官方多增加了对R协议的支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clash -d .<br></code></pre></td></tr></table></figure><p>参数D代表指定配置文件目录，注意后面的点，代表了当前目录<br>要成功的运行，除了配置文件，还需要一个<code>Country.mmdb</code>文件，这是一份IP地址库，根据这份地址库，Clash可以区分IP归属，做出分流</p><p>虽然运行起来了，但是只有命令行，没有GUI，无法配置，由于程序支持RESTful API，所以可以直接用网页配置</p><p>可直接用本站提供的地址：<strong><a href="http://c.789.st/">http://c.789.st</a></strong></p><p>####Country.mmdb下载</p><p><a href="https://disk.cuojue.org/cloud/ClashR_Core/Country.mmdb.zip" title="本站网盘下载">本站网盘下载</a> 已失效</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p><strong>Clash支持透明代理</strong><br>所以在路由器上可直接运行clash替换SS，并使用RESTful API来管理<br>由于路由器种类繁多，这里暂时略过，可搜索参考路由器SS配置指南</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>另还有很多各平台的GUI客户端<br>如：windows / Mac OS / Android 等，发布地址在下方</p><p><a href="https://github.com/Fndroid/clash_for_windows_pkg" title="windows">windows</a><br><a href="https://github.com/yichengchen/clashX/releases" title="Mac OS">Mac OS</a><br><a href="https://github.com/naicfeng/ClashRForAndroid/releases" title="Android">Android</a></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://disk.cuojue.org/s/r8h5ohzu" title="本站网盘">本站网盘</a> 密码：cuojue</p><p><a href="https://github.com/naicfeng/clash/releases" title="ClashR">GitHub</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clash</tag>
      
      <tag>clashr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享全平台ClashR Core客户端下载</title>
    <link href="/read/ClashR_Core.html"/>
    <url>/read/ClashR_Core.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>官方已支持ssr协议，请使用官方版<br>建议弃用ssr协议</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>兼容<code>Clash</code>和<code>ClashR</code>配置文件</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>直接替换原二进制文件即可</p><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>直接替换原.exe文件即可</p><p>如使用GUI客户端 <strong><a href="https://github.com/Fndroid/clash_for_windows_pkg" title="clash_for_windows_pkg">clash_for_windows_pkg</a></strong><br>可进入<code>Clash.for.Windows\resources\static\files</code><br>替换<code>clash-win64.exe</code>文件，支持订阅ClashR配置</p><p>本站提供打包好的clashR_for_windows_pkg下载：</p><p>[hide]<br><a href="https://disk.cuojue.org/cloud/ClashR_for_Windows" title="本站网盘">本站网盘下载</a></p><p>[/hide]</p><h3 id="广告时间"><a href="#广告时间" class="headerlink" title="广告时间"></a>广告时间</h3><p>推荐一个<code>在各种订阅格式之间进行转换的实用程序</code>项目 <strong><a href="https://github.com/tindy2013/subconverter" title="SubConverter">SubConverter</a></strong><br>本站公益在线配置转换 <strong><a href="https://cuojue.org/sub">https://cuojue.org/sub</a></strong></p><h2 id="支持的R算法"><a href="#支持的R算法" class="headerlink" title="支持的R算法"></a>支持的R算法</h2><p><strong>Encrypting algorithm</strong></p><ul><li>aes-128-cfb</li><li>aes-192-cfb</li><li>aes-256-cfb</li><li>aes-128-ctr</li><li>aes-192-ctr</li><li>aes-256-ctr</li><li>aes-128-ofb</li><li>aes-192-ofb</li><li>aes-256-ofb</li><li>des-cfb</li><li>bf-cfb</li><li>cast5-cfb</li><li>rc4-md5</li><li>chacha20</li><li>chacha20-ietf</li><li>salsa20</li><li>camellia-128-cfb</li><li>camellia-192-cfb</li><li>camellia-256-cfb</li><li>idea-cfb</li><li>rc2-cfb</li><li>seed-cfb</li></ul><p><strong>Obfs</strong></p><ul><li>plain</li><li>http_simple</li><li>http_post</li><li>random_head</li><li>tls1.2_ticket_auth</li></ul><p><strong>Protocol</strong></p><ul><li>origin</li><li>verify_sha1 aka. one time auth(OTA)</li><li>auth_sha1_v4</li><li>auth_aes128_md5</li><li>auth_aes128_sha1</li></ul><p><em>ps:条件有限，仅测试 auth_sha1_v4，auth_aes128_md5 通过</em></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>下载地址：</p><p><a href="https://disk.cuojue.org/s/r8h5ohzu" title="本站网盘">本站网盘</a> 密码：cuojue</p><p><a href="https://github.com/naicfeng/Clash/releases" title="GitHub">GitHub</a></p><h2 id="Android版"><a href="#Android版" class="headerlink" title="Android版"></a>Android版</h2><p>分享一个ClashR for Android客户端<br><a href="https://cuojue.org/read/ClashR_for_Android.html">https://cuojue.org/read/ClashR_for_Android.html</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clash</tag>
      
      <tag>clashr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享一个ClashR for Android客户端</title>
    <link href="/read/ClashR_for_Android.html"/>
    <url>/read/ClashR_for_Android.html</url>
    
    <content type="html"><![CDATA[<p>搜了一下，发现没有最新版的ClashR Android客户端 自己编译了一个，分享给有需要的朋友吧</p><span id="more"></span><p>fork 自 <a href="https://github.com/Kr328/ClashForAndroid" title="ClashForAndroid">ClashForAndroid</a></p><p>###【最近更新：2021年01月23日】<br><strong>ps:一直有朋友们问我何时再更新，我想说已经没办法更新了，官方已经闭源了。</strong><br><strong><del>目前的版本现在还够用，即使下次更新也是更新兼容新配置文件格式</del></strong></p><details><summary>历史内容</summary><h2 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h2><p>同步 <a href="https://github.com/Kr328/ClashForAndroid" title="Clash for Android">Clash for Android</a> 1.1.10 代码<br>同步 <a href="https://github.com/Kr328/clash" title="clash Branch:android">clash Branch:android</a> c8ab24e 代码</p><p>修正了配置文件和一般托管的clashr命名不同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">Protocol      <span class="hljs-keyword">string</span> <span class="hljs-string">`proxy:&quot;protocol&quot;`</span><br>ProtocolParam <span class="hljs-keyword">string</span> <span class="hljs-string">`proxy:&quot;protocol-param&quot;`</span><br>Obfs          <span class="hljs-keyword">string</span> <span class="hljs-string">`proxy:&quot;obfs&quot;`</span><br>ObfsParam     <span class="hljs-keyword">string</span> <span class="hljs-string">`proxy:&quot;obfs-param&quot;`</span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">Protocol      <span class="hljs-keyword">string</span> <span class="hljs-string">`proxy:&quot;protocol&quot;`</span><br>ProtocolParam <span class="hljs-keyword">string</span> <span class="hljs-string">`proxy:&quot;protocolparam&quot;`</span><br>Obfs          <span class="hljs-keyword">string</span> <span class="hljs-string">`proxy:&quot;obfs&quot;`</span><br>ObfsParam     <span class="hljs-keyword">string</span> <span class="hljs-string">`proxy:&quot;obfsparam&quot;`</span><br></code></pre></td></tr></table></figure><p>修复了直接编译SSR无法连接的问题，替换为dev代码<br>see:<br><a href="https://github.com/sh4d0wfiend/clash/tree/dev" title="sh4d0wfiend/clash/tree/dev">sh4d0wfiend/clash/tree/dev</a><br><a href="https://github.com/sh4d0wfiend/clash/tree/feat-ssr" title="sh4d0wfiend/clash/tree/feat-ssr">sh4d0wfiend/clash/tree/feat-ssr</a></p><p>修复部分R协议无法连接</p></details><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h4 id="有一定的基础："><a href="#有一定的基础：" class="headerlink" title="有一定的基础："></a>有一定的基础：</h4><p>可直接在线转换订阅 <strong><a href="https://sub.789.st/">https://sub.789.st</a></strong><br>(注：已切换到新版配置格式，不支持1.3.3之前的版本)</p><h4 id="没有基础："><a href="#没有基础：" class="headerlink" title="没有基础："></a>没有基础：</h4><p><a href="https://cuojue.org/read/clash.html">一篇快速上手Clash的简单教程</a></p><h2 id="支持的R算法"><a href="#支持的R算法" class="headerlink" title="支持的R算法"></a>支持的R算法</h2><details><summary>支持的R算法</summary><p><em>Not support AEAD method yet.</em></p><p><strong>Encrypting algorithm</strong></p><ul><li>aes-128-cfb</li><li>aes-192-cfb</li><li>aes-256-cfb</li><li>aes-128-ctr</li><li>aes-192-ctr</li><li>aes-256-ctr</li><li>aes-128-ofb</li><li>aes-192-ofb</li><li>aes-256-ofb</li><li>des-cfb</li><li>bf-cfb</li><li>cast5-cfb</li><li>rc4-md5</li><li>chacha20</li><li>chacha20-ietf</li><li>salsa20</li><li>camellia-128-cfb</li><li>camellia-192-cfb</li><li>camellia-256-cfb</li><li>idea-cfb</li><li>rc2-cfb</li><li>seed-cfb</li><li>none</li></ul><p><strong>Obfs</strong></p><ul><li>plain</li><li>http_simple</li><li>http_post</li><li>random_head</li><li>tls1.2_ticket_auth</li></ul><p><strong>Protocol</strong></p><ul><li>origin</li><li>verify_sha1 aka. one time auth(OTA)</li><li>auth_sha1_v4</li><li>auth_aes128_md5</li><li>auth_aes128_sha1</li><li>auth_chain_a</li><li>auth_chain_b</li></ul></details><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p><strong>v1.1.10</strong><br>初始编译版本</p><p><strong>v1.1.10R</strong><br>修复部分算法连接失败(改用mzz2017版r算法,链接地址敏感词)</p><p><strong>v1.1.10R2</strong><br>更新<a href="https://github.com/Dreamacro/clash/releases/tag/v0.19.0" title="core(v0.19.0R)">core(v0.19.0R)</a><br>支持Trojan协议（实验性，无条件未测试）</p><p><strong>v1.1.10R3</strong><br>修复R2规则无效</p><p><strong>v1.2.13R</strong><br>同步官方更新</p><p><strong>v1.2.14R</strong><br>更新Core</p><p><strong>v1.3.3R2</strong><br>更新同步到闭源前的最后一个版本1.3.3<br>更新core支持最新的配置文件格式（支持 PROCESS-NAME 字段）</p><p><strong>v1.3.4R</strong><br>更新 ssr 依赖（b52844f）<br>更新内置Country.mmdb<br>更新支持SSR Cipher（none）<br>更新支持SSR Protocol（auth_chain_a，auth_chain_b）<br>修复界面显示ssr协议为unknown</p><blockquote><p><strong>ps:由于SSR协议过于陈旧且无人维护。<br>如无必要，不推荐使用SSR协议，请使用<a href="https://github.com/Kr328/ClashForAndroid/releases" title="官方版">官方版</a>+SS协议</strong></p></blockquote><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>下载地址：</p><p><a href="https://disk.cuojue.org/s/jfuupjd7" title="本站网盘">本站网盘</a> 密码：cuojue</p><p><a href="https://github.com/naicfeng/ClashRForAndroid/releases" title="GitHub">GitHub</a></p><h2 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h2><p>ClashRForAndroid：<br><a href="https://github.com/naicfeng/ClashRForAndroid">https://github.com/naicfeng/ClashRForAndroid</a><br><a href="https://github.com/goomadao/ClashForAndroid">https://github.com/goomadao/ClashForAndroid</a><br>ClashForAndroid：<br><a href="https://github.com/Kr328/ClashForAndroid">https://github.com/Kr328/ClashForAndroid</a></p><p>Clash：<br><a href="https://github.com/Dreamacro/clash">https://github.com/Dreamacro/clash</a><br>ClashR：<br><a href="https://github.com/goomadao/clash">https://github.com/goomadao/clash</a><br><a href="https://github.com/sh4d0wfiend/clash">https://github.com/sh4d0wfiend/clash</a></p><p>R协议相关（因含有敏感词仅放作者主页）：<br><a href="https://github.com/mzz2017">https://github.com/mzz2017</a></p><h2 id="其他操作系统"><a href="#其他操作系统" class="headerlink" title="其他操作系统"></a>其他操作系统</h2><p>分享全平台ClashR Core客户端下载<br><a href="https://cuojue.org/read/ClashR_Core.html">https://cuojue.org/read/ClashR_Core.html</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clash</tag>
      
      <tag>clashr</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开启全站缓存后关于handsome主题的部分修改</title>
    <link href="/read/typecho-cache-handsome.html"/>
    <url>/read/typecho-cache-handsome.html</url>
    
    <content type="html"><![CDATA[<p>总体来说，由php实现的实时反馈，cookies等渲染，需要替换成由javascript来本地渲染</p><h2 id="左侧边栏"><a href="#左侧边栏" class="headerlink" title="左侧边栏"></a>左侧边栏</h2><h3 id="时间问候"><a href="#时间问候" class="headerlink" title="时间问候"></a>时间问候</h3><p>左侧边栏只有头像右侧名称点击会出现上下午和晚上的问候，去掉即可</p><p><code>/usr/themes/handsome/component/aside.php</code><br>注释掉<code>&lt;!-- dropdown --&gt;</code>这一段</p><h2 id="右侧边栏"><a href="#右侧边栏" class="headerlink" title="右侧边栏"></a>右侧边栏</h2><h3 id="最后活动"><a href="#最后活动" class="headerlink" title="最后活动"></a>最后活动</h3><p>右侧边栏的最后活动会定格在缓存那一刻，修改为缓存时间，方便查看页面缓存了多久</p><p><code>/usr/themes/handsome/component/sidebar.php</code><br>修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;li class=&quot;list-group-item text-second&quot;&gt;&lt;span class=&quot;blog-info-icons&quot;&gt; &lt;i data-feather=&quot;activity&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span<br>                       class=&quot;badge<br>           pull-right<span class="hljs-string">&quot;&gt;&lt;?php //echo Utils::getLatestTime(<span class="hljs-subst">$this</span>); ?&gt;&lt;/span&gt;&lt;?php _me(&quot;</span>最后活动<span class="hljs-string">&quot;) ?&gt;&lt;/li&gt;</span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">      &lt;li class=&quot;list-group-item text-second&quot;&gt;&lt;span class=&quot;blog-info-icons&quot;&gt; &lt;i data-feather=&quot;activity&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;span<br>                  class=&quot;badge<br>      pull-right<span class="hljs-string">&quot; id=&quot;</span>cacheuptime<span class="hljs-string">&quot;&gt;loading&lt;/span&gt;&lt;?php _me(&quot;</span>缓存时间<span class="hljs-string">&quot;) ?&gt;&lt;/li&gt;</span><br><span class="hljs-string">&lt;script&gt;var cacheuptime = &#x27;&lt;?=time()*1000?&gt;&#x27;;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p>合适位置加上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDateDiff</span>(<span class="hljs-params">dateTimeStamp</span>)</span>&#123;&lt;?php <span class="hljs-keyword">if</span>(Typecho_Widget::widget(<span class="hljs-string">&#x27;Widget_User&#x27;</span>)-&gt;hasLogin()):?&gt;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ByPsaa&quot;</span>;&lt;?php endif;?&gt;<span class="hljs-keyword">var</span> minute=<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>;<span class="hljs-keyword">var</span> hour=minute*<span class="hljs-number">60</span>;<span class="hljs-keyword">var</span> day=hour*<span class="hljs-number">24</span>;<span class="hljs-keyword">var</span> halfamonth=day*<span class="hljs-number">15</span>;<span class="hljs-keyword">var</span> month=day*<span class="hljs-number">30</span>;<span class="hljs-keyword">var</span> now=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<span class="hljs-keyword">var</span> diffValue=now-dateTimeStamp;<span class="hljs-keyword">var</span> monthC=diffValue/month;<span class="hljs-keyword">var</span> weekC=diffValue/(<span class="hljs-number">7</span>*day);<span class="hljs-keyword">var</span> dayC=diffValue/day;<span class="hljs-keyword">var</span> hourC=diffValue/hour;<span class="hljs-keyword">var</span> minC=diffValue/minute;<span class="hljs-keyword">if</span>(hourC&gt;<span class="hljs-number">48</span>)&#123;result=<span class="hljs-string">&quot;前天&quot;</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(hourC&gt;<span class="hljs-number">24</span>)&#123;result=<span class="hljs-string">&quot;昨天&quot;</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(hourC&gt;=<span class="hljs-number">1</span>)&#123;result=<span class="hljs-built_in">parseInt</span>(hourC)+<span class="hljs-string">&quot;个小时前&quot;</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(minC&gt;=<span class="hljs-number">1</span>)&#123;result=<span class="hljs-built_in">parseInt</span>(minC)+<span class="hljs-string">&quot;分钟前&quot;</span>&#125;<span class="hljs-keyword">else</span> result=<span class="hljs-string">&quot;刚刚&quot;</span>;<span class="hljs-keyword">return</span> result&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowCachetime</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span>(cacheuptime)!==<span class="hljs-string">&#x27;undefined&#x27;</span>)&#123;<span class="hljs-keyword">if</span>(cacheuptime&gt;<span class="hljs-number">0</span>)&#123;$(<span class="hljs-string">&#x27;#cacheuptime&#x27;</span>).text(getDateDiff(cacheuptime));&#125;cacheuptime=<span class="hljs-number">0</span>;&#125;&#125;<br>ShowCachetime();<br></code></pre></td></tr></table></figure><p>如果开启了pjax加载，还需要在pjax回调加入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ShowCachetime();<br></code></pre></td></tr></table></figure><h2 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h2><p>页面浏览统计改为javascript方式</p><p><a href="https://cuojue.org/read/typecho-PostViews.html">Typecho的页面浏览统计 js 版</a></p><h2 id="评论信息"><a href="#评论信息" class="headerlink" title="评论信息"></a>评论信息</h2><p>评论修改为javascript方式获取cookies</p><p><a href="https://cuojue.org/read/typecho_comments_author_javascript.html">修改typecho保存评论用户信息为javascript模式</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用nginx_fastcgi_cache的时候关于Cookie的处理</title>
    <link href="/read/fastcgi_cache_fix_cookies.html"/>
    <url>/read/fastcgi_cache_fix_cookies.html</url>
    
    <content type="html"><![CDATA[<h2 id="产生问题"><a href="#产生问题" class="headerlink" title="产生问题"></a>产生问题</h2><p>本站使用了fastcgi_cache来缓存所有页面，导致了一个问题，那就是set-cookie也被缓存了，其他用户再次访问会导致被设置缓存的cookie，最终需要实现的效果如下</p><p><strong>在缓存miss/bypass的状态下，输出set-cookie</strong><br><strong>在缓存hit的状态下，丢弃set-cookie</strong><br>miss:首次访问，无缓存<br>bypass:条件不符，跳过缓存<br>hit:缓存命中</p><p>要达到这种效果，目前nginx的fastcgi_cache没有给出解决方案，要么就是直接丢弃所有的cookie</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">fastcgi_hide_header <span class="hljs-string">&quot;Set-Cookie&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这样导致了所有cookies全部被丢弃，造成无法登陆等问题</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>查阅了一下，发现了解决方法，那就是使用nginx_lua模块实现</p><p>在server段外增加</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">fastcgi_ignore_headers</span> Cache-Control Expires Set-Cookie;<br>map $upstream_bytes_received $hide_cookie &#123;default &#x27;&#x27;;&#x27;&#x27; Set-Cookie;&#125;<br></code></pre></td></tr></table></figure><p>在server段内增加</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">header_filter_by_lua_block &#123;<br>   ngx.<span class="hljs-keyword">header</span><span class="hljs-meta">[</span>ngx.<span class="hljs-built_in">var</span>.hide_cookie<span class="hljs-meta">]</span> = nil;<br>&#125;<br></code></pre></td></tr></table></figure><p>完美实现<br><img src="https://static.cuojue.org/blog/files/2020/02/2818833632.png" alt="未命中缓存"><br>未命中缓存，输出cookie</p><p><img src="https://static.cuojue.org/blog/files/2020/02/1784695453.png" alt="命中缓存"><br>命中缓存，丢弃set-cookie头</p><h2 id="广告时间"><a href="#广告时间" class="headerlink" title="广告时间"></a>广告时间</h2><p>推荐一下我的Typecho的fastcgi_cache缓存插件</p><p><a href="https://cuojue.org/read/typecho-fastcgi_cache.html">Typecho的fastcgi_cache缓存插件</a></p><p>参考：<a href="https://serverfault.com/questions/680650/nginx-fastcgi-cache-hide-set-cookie-when-serving-from-cache" title="Nginx fastcgi_cache hide Set-Cookie when serving from cache - Server Fault">Nginx fastcgi_cache hide Set-Cookie when serving from cache - Server Fault</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>fastcgi_cache</tag>
      
      <tag>cookies</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho的页面浏览统计 js 版</title>
    <link href="/read/typecho-PostViews.html"/>
    <url>/read/typecho-PostViews.html</url>
    
    <content type="html"><![CDATA[<p>如上一篇文章所写，如果启用了fastcgi_cache缓存之后，所有“非js方式的访问统计插件会失效”，所以改造一下统计方法，改为js方式</p><span id="more"></span><p><a href="https://cuojue.org/read/typecho-fastcgi_cache.html">https://cuojue.org/read/typecho-fastcgi_cache.html</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先安装 PostViews 插件（本文末下载）</p><h2 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h2><p>安装插件后，会自动统计浏览记录，但是页面无法显示，还需要修改文件，让它显示在页面上</p><p>具体模板要具体修改，这里给出一个本站模板<code>handsome</code>的例子</p><h3 id="修改post-php"><a href="#修改post-php" class="headerlink" title="修改post.php"></a>修改post.php</h3><p><code>/usr/themes/handsome/post.php</code><br>修改第67行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> get_post_view(<span class="hljs-keyword">$this</span>) <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;span id=<span class="hljs-string">&quot;post-views&quot;</span>&gt;loading&lt;/span&gt;<span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">//echo get_post_view($this) <span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>并且在下一行加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script&gt;<span class="hljs-keyword">var</span> cid = <span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">$this</span>-&gt;cid<span class="hljs-meta">?&gt;</span>;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如此便可统计文章浏览次数</p><h3 id="添加PJAX回调函数"><a href="#添加PJAX回调函数" class="headerlink" title="添加PJAX回调函数"></a>添加PJAX回调函数</h3><p>如果使用了pjax刷新，还需要在适当位置加上<br><code>PostViews();</code></p><p>如本站模板<code>handsome</code>则只需在后台模板设置PJAX回调函数填入即可</p><h2 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h2><p>链接：<a href="https://disk.cuojue.org/s/mubudsgv" title="PostViews.zip">PostViews.zip</a> 密码：ev65</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostViews</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typecho的fastcgi_cache缓存插件</title>
    <link href="/read/typecho-fastcgi_cache.html"/>
    <url>/read/typecho-fastcgi_cache.html</url>
    
    <content type="html"><![CDATA[<p>本插件需要 WEB 服务器为 Nginx 并且需要 ngx_cache_purge 模块支持</p><h2 id="插件特性"><a href="#插件特性" class="headerlink" title="插件特性"></a>插件特性</h2><p>直接在nginx层缓存，媲美静态页面速度<br>支持所有页面缓存<br>支持内容修改之后自动更新内容、分类、首页缓存<br>支持评论生效更新缓存<br>支持登录状态下不缓存<br>支持搜索等动态页面不缓存</p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>v1.0<br>初始版本<br>v1.1<br>修复评论分页刷新<br>增加Tag页面刷新<br>增加自定义刷新后缀</p><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><p>非js方式的访问统计插件会失效</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>需要修改nginx配置文件，添加</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#下面2行的中的wpcache路径请自行提前创建，否则可能会路径不存在而无法启动nginx，max_size请根据分区大小自行设置</span><br><span class="hljs-attribute">fastcgi_cache_path</span> /www/server/nginx/fastcgi_cache_dir levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=fcache:<span class="hljs-number">250m</span> inactive=<span class="hljs-number">1d</span> max_size=<span class="hljs-number">1G</span>;<br><span class="hljs-attribute">fastcgi_temp_path</span> /www/server/nginx/fastcgi_cache_dir/temp;<br><span class="hljs-attribute">fastcgi_cache_key</span> <span class="hljs-string">&quot;$scheme$request_method$host$request_uri&quot;</span>;<br><span class="hljs-attribute">fastcgi_cache_use_stale</span> <span class="hljs-literal">error</span> timeout invalid_header http_500;<br><span class="hljs-comment">#忽略一切nocache申明，避免不缓存伪静态等</span><br><span class="hljs-attribute">fastcgi_ignore_headers</span> Cache-Control Expires Set-Cookie;<br><span class="hljs-comment">#Ps：如果是多个站点，以上内容不要重复添加，否则会冲突，可以考虑将以上内容添加到nginx.conf里面，避免加了多次。</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server<br>&#123;<br>***略***<br><span class="hljs-attribute">set</span> $skip_cache <span class="hljs-number">0</span>;<br><span class="hljs-comment">#post访问不缓存</span><br><span class="hljs-attribute">if</span> ($request_method = POST) &#123;<br><span class="hljs-attribute">set</span> $skip_cache <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">#动态查询不缓存</span><br><span class="hljs-attribute">if</span> ($query_string != <span class="hljs-string">&quot;&quot;</span>) &#123;<br><span class="hljs-attribute">set</span> $skip_cache <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">#pjax查询缓存</span><br><span class="hljs-attribute">if</span> ($query_string <span class="hljs-regexp">~ &quot;_pjax=(.*)&quot;)</span> &#123;<br><span class="hljs-attribute">set</span> $skip_cache <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">#后台等特定页面不缓存（其他需求请自行添加即可）</span><br><span class="hljs-attribute">if</span> ($request_uri <span class="hljs-regexp">~* &quot;/admin/|/action/|/search/|/feed/|baidu_sitemap.xml|sitemap.xml&quot;)</span> &#123;<br><span class="hljs-attribute">set</span> $skip_cache <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">#对登录的用户不展示缓存</span><br><span class="hljs-attribute">if</span> ($http_cookie <span class="hljs-regexp">~* &quot;typecho_authCode&quot;)</span> &#123;<br><span class="hljs-attribute">set</span> $skip_cache <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ [^/]\.php(/|$)</span><br><span class="hljs-regexp"></span>&#123;<br><span class="hljs-attribute">try_files</span> $uri =<span class="hljs-number">404</span>;<br><span class="hljs-attribute">fastcgi_pass</span>  unix:/tmp/php-cgi-74.sock;<br><span class="hljs-attribute">fastcgi_index</span> index.php;<br><span class="hljs-attribute">include</span> fastcgi.conf;<br><span class="hljs-attribute">include</span> pathinfo.conf;<br><span class="hljs-comment">#新增的缓存规则</span><br><span class="hljs-attribute">fastcgi_cache_bypass</span> $skip_cache;<br><span class="hljs-attribute">fastcgi_no_cache</span> $skip_cache;<br><span class="hljs-attribute">add_header</span> X-Cuojue-Cache <span class="hljs-string">&quot;$upstream_cache_status From $host&quot;</span>;<br><span class="hljs-attribute">fastcgi_cache</span> fcache;<br><span class="hljs-attribute">fastcgi_cache_valid</span> <span class="hljs-number">200</span> <span class="hljs-number">1d</span>;<br>&#125;<br><br>location ~* /&#123;后台设置的token&#125;/_clean_cache(/.*) &#123;<br><span class="hljs-attribute">fastcgi_cache_purge</span> fcache <span class="hljs-string">&quot;$scheme$request_method$host<span class="hljs-variable">$1</span>$is_args$args&quot;</span>;<br>&#125;<br>***略***<br>&#125;<br></code></pre></td></tr></table></figure><p>以上的</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx">location ~* /&#123;后台设置的token&#125;/_clean_cache(/.*) &#123;<br><span class="hljs-attribute">fastcgi_cache_purge</span> fcache <span class="hljs-string">&quot;$scheme$request_method$host<span class="hljs-variable">$1</span>$is_args$args&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要和后台设置的token一致，例如后台设置<code>1150AE6A4F7938AE754D</code>则这里设置为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> <span class="hljs-regexp">~* /1150AE6A4F7938AE754D/_clean_cache(/.*)</span> &#123;<br><span class="hljs-attribute">fastcgi_cache_purge</span> fcache <span class="hljs-string">&quot;$scheme$request_method$host<span class="hljs-variable">$1</span>$is_args$args&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="缓存效果"><a href="#缓存效果" class="headerlink" title="缓存效果"></a>缓存效果</h3><p>替换新的配置，并且重载Nginx之后，访问前台页面，查看header，会多出一个 X-Cuojue-Cache 标志。</p><p>X-Cuojue-Cache 一般会有3个状态：MISS、HIT、BYPASS。</p><ul><li><p><strong>MISS表示未命中</strong><br>即这个页面还没被缓存，新发布或刚被删除的页面，首次访问将出现这个状态（图略）。</p></li><li><p><strong>HIT表示缓存命中</strong><br>打开一个会缓存的页面，比如文章内容html页面，F5刷新几次即可在F12开发者模式当中的Header头部信息中看到如图缓存命中状态：<br><img src="https://static.cuojue.org/blog/files/2020/02/2906163519.png" alt="HIT"></p></li><li><p><strong>BYPASS表示缓存黑名单</strong><br>即页面路径在Nginx规则中被设置成不缓存（set $skip_cache 1;），比如typecho后台和搜索：<br><img src="https://static.cuojue.org/blog/files/2020/02/4256031367.png" alt="BYPASS"></p></li></ul><p><em>如果你发现想要缓存的页面却是这个状态，就可以去检查排除规则中是不是包含了这个路径！反之，如果你发现后台登录不了，或者各种登陆态丢失问题，则应该到排除规则中加上该页面路径的关键字。</em></p><h3 id="缓存刷新"><a href="#缓存刷新" class="headerlink" title="缓存刷新"></a>缓存刷新</h3><h4 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h4><p>后台配置完成后，涉及文章，评论等更新，会自动刷新对应缓存。默认缓存24小时后过期。<br>自动刷新缓存是访问对应的刷新地址实现的，所以以上的nginx配置和后台token一定要一致，如不一致，缓存是不会刷新的。</p><h3 id="手动刷新"><a href="#手动刷新" class="headerlink" title="手动刷新"></a>手动刷新</h3><p>手动刷新，可以拼合地址规则。<br>定义token为：<code>ABCD1234</code><br>定义页面为：<code>https://cuojue.org/read/typecho-fastcgi_cache.html</code><br>则刷新地址是：<code>https://cuojue.org/ABCD1234/_clean_cache/read/typecho-fastcgi_cache.html</code><br>访问这个地址就会刷新，插件内也是模拟访问这个地址，实现的刷新。<br>这个地址，在有缓存的时候，访问会返回<code>200</code>刷新成功，在不存在缓存的时候，会返回正常的<code>404</code>未找到页面错误。<br>所以如果没有配置正确，缓存是不会刷新的。<br>缓存key就是url，如果url变化了，旧的缓存也不会刷新。</p><h3 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h3><h4 id="评论者信息被缓存修复"><a href="#评论者信息被缓存修复" class="headerlink" title="评论者信息被缓存修复"></a>评论者信息被缓存修复</h4><p>typecho主题一般使用php的函数获取cookies来填充评论者信息，导致了如果用户评论了文章，就会缓存评论者的信息，如何修复参考下面的文章<br><a href="https://cuojue.org/read/typecho_comments_author_javascript.html">https://cuojue.org/read/typecho_comments_author_javascript.html</a></p><h4 id="Set-Cookie头处理"><a href="#Set-Cookie头处理" class="headerlink" title="Set-Cookie头处理"></a>Set-Cookie头处理</h4><p>使用了fastcgi_cache来缓存所有页面，导致了一个问题，那就是set-cookie也被缓存了，其他用户再次访问会导致被设置缓存的cookie，解决方法见下文。<br><a href="https://cuojue.org/read/fastcgi_cache_fix_cookies.html">https://cuojue.org/read/fastcgi_cache_fix_cookies.html</a></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>链接：<a href="https://disk.cuojue.org/s/xddxbbdx" title="Ncache.zip">Ncache.zip</a> 密码：ncache</p><p>参考：<br><a href="https://zhangge.net/5042.html" title="Nginx开启fastcgi_cache缓存加速，支持html伪静态页面 | 张戈博客">Nginx开启fastcgi_cache缓存加速，支持html伪静态页面 | 张戈博客</a><br><a href="https://cuojue.org/read/typecho-cache-memcache.html" title="为typecho增加缓存功能,支持memcached缓存">为typecho增加缓存功能,支持memcached缓存</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>fastcgi_cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx/OpenLiteSpeed来实现QUIC和HTTP/3支持</title>
    <link href="/read/quic_http3.html"/>
    <url>/read/quic_http3.html</url>
    
    <content type="html"><![CDATA[<p>网上大部分是采用caddy来监听UDP443端口实现的quic支持，大多数版本太过于老旧。<br>今天采用Docker部署OpenLiteSpeed来实现QUIC和HTTP/3支持。<br>目前支持的版本有：gQUIC(43,46),h3-Q050,h3-24,h3-25</p><p>我本机使用的WebServer是nginx，所以配置nginx监听 TCP:443 配置OpenLiteSpeed监听 UDP:443 并且反向代理到本机Nginx</p><p>首先机器环境安装Docker和git，这就不说了</p><h2 id="Git-clone-OLStack"><a href="#Git-clone-OLStack" class="headerlink" title="Git clone OLStack"></a>Git clone OLStack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/LLStack/OLStack.git<br><span class="hljs-built_in">cd</span> OLStack<br></code></pre></td></tr></table></figure><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p>编辑 .env 和 docker-compose.yml文件<br>这里只需要litespeed所以修改为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br><br>  <span class="hljs-attr">litespeed:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./Dockerfile/build/$&#123;LITESPEED&#125;/$&#123;PHPVER&#125;/</span><br>      <span class="hljs-attr">args:</span><br>        <span class="hljs-attr">extensions:</span> <span class="hljs-string">vim</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">litespeed</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">llstack/olstack:$&#123;LITESPEED&#125;-$&#123;PHPVER&#125;</span><br>    <span class="hljs-attr">env_file:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">.env</span><br>    <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./Configfile/lsws/conf:/usr/local/lsws/conf</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./Configfile/lsws/admin-conf:/usr/local/lsws/admin/conf</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./bin/container:/usr/local/bin</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./sites:/var/www/vhosts/</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./certs:/etc/letsencrypt/</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/www/server/panel/vhost/cert:/etc/certs/</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">./logs/lsws/:/usr/local/lsws/logs/</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">443</span><span class="hljs-string">:443/udp</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">7080</span><span class="hljs-string">:7080</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=$&#123;TimeZone&#125;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><p>运行 <code>docker-compose up --build</code>和<code>docker-compose up -d</code>启动容器</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>进后台 <a href="https://0.0.0.0:7080/">https://0.0.0.0:7080</a> 默认用户名是<code>admin</code>密码是<code>123456</code></p><p>修改虚拟主机模板centralConfigLog/ssl<br>按图所示，修改ssl证书的路径和各项配置<br><img src="https://static.cuojue.org/blog/files/2020/02/3654111390.png" alt="修改ssl证书的路径和各项配置1"></p><p><img src="https://static.cuojue.org/blog/files/2020/02/2847812440.png" alt="修改ssl证书的路径和各项配置2"></p><p>修改虚拟主机模板centralConfigLog/外部应用程序<br>按图所示，添加代理<br><strong>这里的地址是Docker访问本地的地址，请修改为你本机相对应的地址</strong><br><img src="https://static.cuojue.org/blog/files/2020/02/3902866201.png" alt="添加代理"></p><p>修改虚拟主机模板centralConfigLog/资源集<br>按图所示，添加代理资源集定义<br><img src="https://static.cuojue.org/blog/files/2020/02/1793199179.png" alt="添加代理资源集定义"></p><p>接下来就可以在SSH添加主机了<br>进入 <strong>OLStack 目录</strong> 执行<br><code>bash bin/domain.sh -add &lt;your_domain.com&gt;</code></p><h2 id="Nginx添加输出头"><a href="#Nginx添加输出头" class="headerlink" title="Nginx添加输出头"></a>Nginx添加输出头</h2><p>添加好后还需要在nginx添加<br><code>add_header alt-svc &#39;quic=&quot;:443&quot;; ma=2592000; v=&quot;43,46&quot;, h3-Q043=&quot;:443&quot;; ma=2592000, h3-Q046=&quot;:443&quot;; ma=2592000, h3-Q050=&quot;:443&quot;; ma=2592000, h3-24=&quot;:443&quot;; ma=2592000, h3-25=&quot;:443&quot;; ma=2592000&#39;;</code></p><h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p><img src="https://static.cuojue.org/blog/files/2020/02/170113123.png" alt="http3测试"></p><p>测试地址：<a href="https://http3check.net/">https://http3check.net</a></p><p>参考：<a href="https://www.llstack.com/ols/">https://www.llstack.com/ols/</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>零成本搭建自有公私兼备云盘(Cloudreve)</title>
    <link href="/read/cuojue_netdisk.html"/>
    <url>/read/cuojue_netdisk.html</url>
    
    <content type="html"><![CDATA[<p>首先放几个栗子：<br><a href="https://disk.cuojue.org/" title="CuoJue NetDisk">CuoJue NetDisk</a><br><a href="https://disk.cuojue.org/s/liej2ccz" title="移动云主机储存的文件分享">OneNET对象储存的文件分享</a><br><a href="https://disk.cuojue.org/s/whw549l5" title="移动云主机储存的文件分享">OneNET云主机远程储存的文件分享</a></p><blockquote><p>下载的时候可通过提供方域名分辨储存区域<br>标题写的零成本只是云盘储存空间零成本，云盘系统还是需要自行搭建</p></blockquote><h2 id="搭建Cloudreve"><a href="#搭建Cloudreve" class="headerlink" title="搭建Cloudreve"></a>搭建Cloudreve</h2><p>搭建这个玩意，直接看官方文档吧 <a href="https://cloudreve.github.io/docs/#/install" title="安装 - Cloudreve文档">安装 - Cloudreve文档</a></p><p>需要PHP+MYSQL环境，需要注意的是，不支持PHP7.4（ThinkPHP框架不兼容），目前在PHP7.2下运行良好</p><h2 id="增加上传策略"><a href="#增加上传策略" class="headerlink" title="增加上传策略"></a>增加上传策略</h2><h3 id="增加移动-OneNET-对象储存"><a href="#增加移动-OneNET-对象储存" class="headerlink" title="增加移动 OneNET 对象储存"></a>增加移动 OneNET 对象储存</h3><blockquote><p>本篇文章的核心部分第一节<br>截止目前 2020-1-2 本服务还是免费的（免费空间10GB+流量费全免）</p></blockquote><ol><li><p>注册地址：<a href="https://open.iot.10086.cn/cloud/console/object-storage/index">https://open.iot.10086.cn/cloud/console/object-storage/index</a><br>注册后可免费领取对象储存和云服务器等资源，这里先开通对象储存</p></li><li><p>创建一个对象储存容器和AccessKey</p></li><li><p>在Cloudreve后台配置</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>上传策略名称</td><td>自己取名字</td></tr><tr><td>AWSAccessKeyId</td><td>填写获取到的AccessKeyId</td></tr><tr><td>AWSSecretKey</td><td>填写获取到的SecretKey</td></tr><tr><td>存储桶名称</td><td>填写容器名称</td></tr><tr><td>下载根URL</td><td>https://容器名称.oos-cn-wuxi.heclouds.com/</td></tr><tr><td>上传服务器URL</td><td>https://容器名称.oos-cn-wuxi.heclouds.com/</td></tr><tr><td>储存区域</td><td>oos-cn-wuxi</td></tr><tr><td>EndPoint</td><td><a href="https://oos-cn-wuxi.heclouds.com/">https://oos-cn-wuxi.heclouds.com/</a></td></tr></tbody></table></li><li><p>配置完毕后修改用户组上传策略然后测试一下上传</p></li></ol><h3 id="增加移动-OneNET-云主机储存"><a href="#增加移动-OneNET-云主机储存" class="headerlink" title="增加移动 OneNET 云主机储存"></a>增加移动 OneNET 云主机储存</h3><blockquote><p>本篇文章的核心部分第二节<br>截止目前 2020-1-2 本服务还是免费的（免费云主机最大4核8G/免费云盘最大容量2TB/免费文件储存无限容量）</p></blockquote><ol><li><p>服务器配置好环境</p><ul><li>可选择<a href="https://www.bt.cn/?invite_code=MV90ZGtxcGQ=" title="宝塔面板">宝塔面板</a>一键安装</li><li>可选择<a href="https://lnmp.org/" title="LNMP一键安装包">LNMP一键安装包</a></li><li>可选择<a href="https://oneinstack.com/" title="OneinStack一键安装工具">OneinStack一键安装工具</a></li></ul></li><li><p>环境配置好后安装cloudreve远程存储服务端<br>直接下载源码 <a href="https://github.com/cloudreve/remote-server">https://github.com/cloudreve/remote-server</a> 部署到服务器，只需要PHP环境，不需要数据库<br>详细看官方文档：<a href="https://github.com/cloudreve/Cloudreve/wiki/%E8%BF%9C%E7%A8%8B%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA">https://github.com/cloudreve/Cloudreve/wiki/%E8%BF%9C%E7%A8%8B%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%90%AD%E5%BB%BA</a><br>需要注意：1、主机封了80和443端口，需要用其他端口访问。2、如果源站配置了HTTPS访问，则远程上传也必须配置HTTPS</p></li><li><p>修改上传大小配置<br>在<code>upload.php</code>文件第69行有检测上传文件大小，这里需要修改成和后台填写的一致，如果不一致并且超过了这里的限制会提示上传文件过大。<br><code>if($chunk &amp;&amp; $this-&gt;fileSize &gt; 4194350)</code><br>我改成了300M<br><code>if($chunk &amp;&amp; $this-&gt;fileSize &gt; 314572800)</code><br>下面的分片文件大小也需要修改（可能是个BUG，分片大小4M，实际上传分片大小10M，导致拼合的文件错误）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">combineChunk</span>(<span class="hljs-params"><span class="hljs-variable">$chunkList</span></span>)</span>&#123;<br><span class="hljs-variable">$fileName</span> = <span class="hljs-string">&quot;file_&quot;</span>.md5(uniqid());<br><span class="hljs-variable">$fileObj</span>=fopen (<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$fileName</span>,<span class="hljs-string">&quot;a+&quot;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$chunkList</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$chunkObj</span> = fopen(<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$value</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fileObj</span> || !<span class="hljs-variable">$chunkObj</span>)&#123;<br><span class="hljs-built_in">self</span>::setError(<span class="hljs-string">&quot;文件创建失败&quot;</span>);<br>&#125;<br><span class="hljs-variable">$content</span> = fread(<span class="hljs-variable">$chunkObj</span>, <span class="hljs-number">4195304</span>);<br>fwrite(<span class="hljs-variable">$fileObj</span>, <span class="hljs-variable">$content</span>, <span class="hljs-number">4195304</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$content</span>);<br>fclose(<span class="hljs-variable">$chunkObj</span>);<br>unlink(<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$value</span>);<br>&#125;<br>fclose(<span class="hljs-variable">$fileObj</span>);<br><span class="hljs-keyword">$this</span>-&gt;generateFile(<span class="hljs-variable">$fileName</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>改成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">combineChunk</span>(<span class="hljs-params"><span class="hljs-variable">$chunkList</span></span>)</span>&#123;<br><span class="hljs-variable">$fileName</span> = <span class="hljs-string">&quot;file_&quot;</span>.md5(uniqid());<br><span class="hljs-variable">$fileObj</span>=fopen (<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$fileName</span>,<span class="hljs-string">&quot;a+&quot;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$chunkList</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$chunkObj</span> = fopen(<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$value</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fileObj</span> || !<span class="hljs-variable">$chunkObj</span>)&#123;<br><span class="hljs-built_in">self</span>::setError(<span class="hljs-string">&quot;文件创建失败&quot;</span>);<br>&#125;<br><span class="hljs-variable">$content</span> = fread(<span class="hljs-variable">$chunkObj</span>, <span class="hljs-number">10485760</span>);<br>fwrite(<span class="hljs-variable">$fileObj</span>, <span class="hljs-variable">$content</span>, <span class="hljs-number">10485760</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$content</span>);<br>fclose(<span class="hljs-variable">$chunkObj</span>);<br>unlink(<span class="hljs-string">&#x27;chunks/&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;policy[<span class="hljs-string">&quot;uid&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$value</span>);<br>&#125;<br>fclose(<span class="hljs-variable">$fileObj</span>);<br><span class="hljs-keyword">$this</span>-&gt;generateFile(<span class="hljs-variable">$fileName</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置CORS跨域访问<br>nginx配置如下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> / &#123;<br><span class="hljs-attribute">set</span> $origin <span class="hljs-string">&#x27;*&#x27;</span>;<span class="hljs-comment">#写入需要跨域的请求地址</span><br><span class="hljs-attribute">if</span> ($request_method = <span class="hljs-string">&#x27;OPTIONS&#x27;</span>) &#123;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> $origin;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="hljs-number">1728000</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Type&#x27;</span> <span class="hljs-string">&#x27;text/plain charset=UTF-8&#x27;</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Content-Length&#x27;</span> <span class="hljs-number">0</span>;<br><span class="hljs-attribute">return</span> <span class="hljs-number">204</span>;<br>      &#125;<br><br><span class="hljs-attribute">if</span> ($request_method = <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> $origin;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="hljs-string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;<br>      &#125;<br><br><span class="hljs-attribute">if</span> ($request_method = <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> $origin;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="hljs-string">&#x27;GET, POST, OPTIONS&#x27;</span>;<br><span class="hljs-attribute">add_header</span> <span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="hljs-string">&#x27;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;</span>;<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>远程下载配置X-Sendfile减轻服务器压力<br>这里需要下载我修改好的file.php替换到远程服务端根目录下 <a href="https://disk.cuojue.org/s/0jrnbp4z" title="点击这里下载">点击这里下载</a><br>开启Sendfile功能后还可以配置Web Server权限禁止外部直接访问uploads目录<br>例如nginx</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">~ ^/(thumbs</span>|uploads)<br>&#123;<br>    internal;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="增加微软-OneDrive-储存"><a href="#增加微软-OneDrive-储存" class="headerlink" title="增加微软 OneDrive 储存"></a>增加微软 OneDrive 储存</h3><p>　　以上两个上传策略毕竟是羊毛，不知道哪天就收费了，所以还可以增加其他储存一起使用<br>　　在编辑页面获取到应用ID和机密后，填入对应选项，然后保存的时候会要求登录获取权限</p><p>　　而且Onedrive是异步上传，需要先传到服务器，然后中转上传到OneDrive，“这对虚拟主机一点也不友好，毕竟需要运行一个二进制客户端”</p><p>　　异步客户端配置直接看官方文档 <a href="https://github.com/cloudreve/Cloudreve/wiki/Onedrive%E5%AF%B9%E6%8E%A5%E8%AF%B4%E6%98%8E">https://github.com/cloudreve/Cloudreve/wiki/Onedrive%E5%AF%B9%E6%8E%A5%E8%AF%B4%E6%98%8E</a></p><h3 id="增加七牛云、阿里云、又拍云"><a href="#增加七牛云、阿里云、又拍云" class="headerlink" title="增加七牛云、阿里云、又拍云"></a>增加七牛云、阿里云、又拍云</h3><p>　　这些配置相对简单，省略……</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>边困扰着，边前进</title>
    <link href="/read/108.html"/>
    <url>/read/108.html</url>
    
    <content type="html"><![CDATA[<p>有时候，你会不会希望</p><p>有人能告诉你，怎么做才是正确的</p><p>体面的工作</p><p>可靠的对象</p><p>美好的未来</p><span id="more"></span><p>好像人生有一个标准答案</p><p>我们都想得到更高的分数</p><p>可是人生这回事，哪有什么老手</p><p>我们都是第一次上场</p><p>不过就是边困扰着，边前进吧</p><blockquote><p>“你知道人类最大的武器是什么吗？” “是豁出去的决心。”</p></blockquote><blockquote><p>假设我抽到了黑桃10，那么到底该就此停手，还是继续抽呢，如果是你，相信也会很困惑吧？10这个数字，说大不大说小不小的，下一张说不定会抽到更好的牌。如果抽到A，或是4，就不会这么烦恼了。</p></blockquote><blockquote><p>——《金色梦乡》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cnBeta.COM 2019年新年献词</title>
    <link href="/read/107.html"/>
    <url>/read/107.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>###各位亲爱的访客朋友：新年好！</p></blockquote><blockquote><p>我们从 2006 年开始连续 12 年，以一篇献词作为新一年的起点，今年也不例外。但今年因为众所周知的原因，继续写一篇行礼如仪的文章，不仅大家不见得会赏识，连我自己也都意兴阑珊。所以，以下的文字，与其说是总结过去展望未来，不如说是一份在困难年代的生存指南，同时也写给我自己，并与大家共勉。</p></blockquote><span id="more"></span><p>##过去的好时光</p><p>　　“世界正面临百年未有之大变局”。虽然从权威人士讲“L形”至今已经有几年时间，我相信大多数人还没有做好过苦日子的准备，因为这和我们生长起来的环境非常不同。</p><p>　　如果你和我一样是 80-90-00 后，你一定不陌生一些公众号爆款文章的论调：我们的父母辈成长于极度匮乏中，因此他们自私，喜欢囤积东西，对家族内外双重标准，遵循传统礼教桎梏，而这造就了许多家庭悲剧。作为后辈，我们可不能像他们那样，云云。</p><p>　　不管你是否赞同这种论调，但我们成长于一个基本上还算富足的社会，<strong>我们有能力去思考除了吃饱肚子之外更“高层次”的话题，这可能是很多人都认同的。</strong></p><p>　　在漫长的人类历史上，绝大部分时间，人类都活在可悲的战乱、贫穷和不自由中；像近几十年这样，全球总体上迎来较长期的和平、繁荣与开放，是极其罕见的。</p><p>　　几乎连续的三次科技革命支撑了这段难得的增长时光，以至于福山可以在 80 年代末提出“历史的终结”论（他现在已经开始反思这个论点）。现今社会的主力生于 1980 年代或往后，基本没有什么关于苦难的童年记忆。</p><p>　　“仓廪实而知礼节”。在全球化基础上，一些无关自身温饱，并超越了本地社区的，纯粹利他和国际主义的思潮得以兴起。社会分层从粗粝到细腻，性别、种族、性取向等原本“小众”的问题得到更多关照，一些看似牢不可破的“祖宗之法”也摇摇欲坠起来。</p><p>　　婚姻家庭观在变化。纯粹基于家庭条件的“门当户对”以及相亲都不再时兴，甚至有人呼唤传统婚姻关系的解体。“养儿防老”也不行了，孩子是独立的个体，家长不能再要求养育要“收回成本”。</p><p>　　沉溺于虚拟互动，加上顾影自怜式的“爱无能”，让新生代的我们产生了更多独自生活和消费的需求。一个人吃饭，看电影，唱K……要交友，也是上网找完全合心意的“同温层”，或是干脆找起了“爱豆”和“纸片人”。耗费能量，相互妥协地和真人互动，建立长久联系，似乎变得越来越不必要。</p><p>　　<strong>其它一些为防不时之需所做的“冗余备份”也是说扔就扔。</strong>2008 年的大部分中国人依然有极高的储蓄率，连老师上课都是这么讲的。10 年之后一回头，猛然发现，别说储蓄了，连“六个钱包”都悉数掏空，献给了房子。</p><p>　　环顾四周，很多年轻人背负着沉重的房贷，已经毫不稀奇。所有还没有还完所有债务的人，他们的日常生活都相当紧绷，容不得财务上出现半点闪失，一旦长期失业，没有收入，原本规划好的幸福生活都会毁于一旦。</p><p>　　至于早几年的“大众创业”潮，我们已经连续多年说过，此刻也无需再提。但是，青年和中年若是误入 P2P 贷款深坑，老年人若是深陷传销骗局，则造成的损失更大更惨，更难以挽回。2018 这一年，无数正直、善良、老实的普通人和背后整个家庭因此沦陷，令人无比痛心。</p><p>　　仅仅是“生于安乐”，足以让我们整整一代人，把自己浮光掠影的生活，建立在一个深深依赖经济持续增长，收入持续改善的基础上。这样的基础，是何等的脆弱。</p><hr><p>##根本性的改变</p><p>　　现在，我们终于要做好防冲击姿势，准备迎接也许是生命中第一个真正的逆境，去想过去不愿想，觉得不可能发生的事。</p><p>　　宏观层面，我们不多讨论。然而，具体到每个人的切身利益，<strong>“裁员”两字成为绕不过去的一个坎儿。</strong></p><p>　　《华夏时报》的报道称，从 2018 年 10 月开始，北京每天登报注销的公司有 2000 家左右，此前每天最多也不超过 500 家。据不完全统计，上海、广州、深圳等一线城市公司注销数量，和北京基本持平。</p><p>　　工作岗位数量持续下降，意味着我们维持在以往的生活水平和社会层级上越来越难，甚至竞争烈度加剧了，却连饭碗都保不住。</p><p>　　创新乏力带来的增长衰退，让原本的互利多赢变为零和游戏，这意味着人与人，国与国，社会各参与者之间纷纷<strong>收起了原本温情的面孔，摩擦增多，戾气横行。</strong></p><p>　　社会主流思潮将更倾向闭关自守，放弃那些细腻的分层，对小众人群的关照，因为再也负担不起。像法国“黄背心”一样，越来越多来自底层的反抗，只是为了解决最基本的吃饭问题。世界从全球化的高空中砰然坠地。</p><p>　　对每个人而言，衰退意味着<strong>所有人都只为自己，收起善意，持续利他的动机不复存在。</strong>当自保都成问题的时候，谁都没有多余的爱心匀给别人，本来就是怀疑论的人会得意于“及时止损”，而更多人则陷入加速撤退和互相踩踏。</p><p>　　过去一年，是什么刺痛了我们的神经，伤及了我们最为珍视的安全感？答案也许有很多，但重庆那辆从大桥坠入长江的公交车，相信肯定是其中之一。</p><p>　　事故一经发生，大量现场信息被广泛传播，以致人心惶惶。然而出于人类的自保机制，我们会很快忘记大多数事件的冲击，只有事件受害者和家属们，承受永无止境的失去和悲伤。尽管你有机会上热搜，但最终承担一切的还是你自己。</p><p>　　虽然我们还能看到有些群体，比如在校学生，可能依然沉浸在简单温馨的日常生活里，也可以因为更宏大的议题而兴奋；但这恐怕源于他们仍然衣食无忧，还没有经受社会的严峻考验。那种考验的降临，将可能让他们一夜之间完全、彻底地改变想法。</p><p>　　早一点产生危机感，是好事。</p><hr><p>##无望的“自我提升”</p><p>　　1930 年代“大萧条”期间，大部分美国人陷入困窘，不是因为他们能力不足，而是因为他们赖以生存的大环境，和基于此建构出来的生存经验，发生了根本改变。</p><p>　　这些被改变的生存经验里，其中就有这么一条——</p><p>　　<strong>寄希望于自我提升，知识积累，充其量只能陶冶性情，对改善境遇其实没多大帮助。</strong>有学龄孩子的家长，如果想让孩子遵循考好大学——找好工作的路线，也将越来越玩不转。</p><p>　　原本只要你掌握更多技能，比别人会的更多，就能保证有更好的工作，更高的收入。如果运气不好的话，未来可能不管你怎样努力，最后的结局跟那些曾经看不起的“社会底层”也差不太多。</p><p>　　当年，在美国大街上有西装革履的求职者挂牌写道：“我懂三门手艺，会三门语言，失业三个月，只想找一份工作。”</p><p>　　而大多数曾从事光鲜体面活计的人，唯一能做的就是模仿上班一样，每天准点穿着套装出门，哪怕只是出去闲逛，或是到没人认识自己的地方，脱下套装讨饭吃。</p><p>　　萧条意味着传说中的“人人平等”，就是会以这样一种残酷的方式实现。</p><p>　　今天，越来越多的人报名报班，充实自己，希望掌握一些新手艺，新技能，让自己变成所谓“U盘化生存”。不管新东家是谁，都能把自己成功“卖出去”。</p><p>　　一些老生常谈特别“丧”的公众号文章写到最后，实在没法收尾了，基本上都是以“充实自我”“行动”“打卡”强行结束。</p><p>　　但是，<strong>这也许只能让各路“知识付费”的布道师获益</strong>——“U 盘”口号的提出者罗振宇，也照例会在今年的跨年夜直播自己的讲座。</p><p>　　这种用知识填补焦虑的情景与当年也非常类似，只是当年好歹还没有这么多贩卖知识的人。1933 年，美国图书馆协会估计，自 1929 年以来新增的借书人大约在 200-300 万之间，而总的图书流通增长了将近 50%。</p><p>　　直白的说，这就好像一群女孩树立了一个价值观（不论正不正确），就是要早早的把自己打扮好，让自己“卖相好”然后能“嫁个好人家”。</p><p>　　她们开始前赴后继练出马甲线和翘臀，燃烧卡路里，并启动了残酷的内部竞争。然而，她们这么拼，最终能取悦谁呢？“好男人”的坑都没几个好占了，练再多也没有用。</p><p>　　现在觉得自己工作不够好，或者刚刚被裁，总想着通过“改变自己，自我提升”来改善境遇的人，与上面这个比喻何其相似！</p><p>　　就算你再怎么自我努力，超常规发挥，不也只是在一大批同等实力的同龄人当中自相残杀，披荆斩棘，只为了保住自己原来的相对地位吗？</p><p>　　通过提升大家的加班标准到996，再到10106，一点一点逼迫所有人付出本不应该付出的代价，保住一个也许是极其普通的职位，<strong>这就是职场竞争的“内卷化”</strong>。</p><p>　　一大批才情相似，能力高超的人，在一个顺遂的时代里，本应该过得舒舒服服，应该获得与自己能力相称的回报，却无奈需要在内卷的自相残杀中，白白耗费生命和才干。</p><p>　　威廉·曼彻斯特的《光荣与梦想》一书中写道：“中产阶级跌落迅速得令人心痛。在加利福利亚水库干粗活的工人中，有好多是农场主、牧师、工程师，还有一位是中学校长和一个密苏里州某银行的前任行长。”</p><p>　　我想，今后如果出现幼儿园老师都要求博士后学历，或者一个看大门的也得本科211-985，或与之类似的情况，也许一点都不奇怪。</p><hr><p>##与真实生活中的人交朋友</p><p>　　先别急着问“那我们就活该找不到工作受穷吗？”这样的问题。</p><p>　　为什么我们现在不太能忍受突然之间节省太多开支，突然“变穷”的生活呢？其中一个原因，我相信是<strong>我们有太多生活上的便利和安慰，过去是通过花钱购买的方式获取的。</strong></p><p>　　物质和精神食粮的丰富，购买力的相对提升，也让我们越发孤独。</p><p>　　著名的“邓巴数”规定了我们只能和最多 150 人维持紧密的人际关系，也就是指我们“知道对方是谁”并且了解自己和对方之间的关系。</p><p>　　然而，我们把这 150 人配额中的一大部分拿出来，贡献给了或真实、或虚拟、或明星、或草根的远程偶像。<strong>追星吃瓜刷抖音，挤占了现实生活中的人际关系。</strong></p><p>　　由美国全国科学基金会资助，杜克大学实施的跟踪调查显示，1985 年时美国人平均说自己有 3 个亲密朋友。这一数字在新千年伊始降到 2，到 2014 年已经是 0 。</p><p>　　<strong>产生于网络上，暂时没有走到“奔现”这一步的关系，多数是“蜻蜓点水”</strong>，一旦就某个议题产生重大分歧，冷处理一阵，发现对方与你就这么断了联系。</p><p>　　<strong>而至于远离地面的实体或虚拟偶像，则更是一种花钱砸出来的幻梦</strong>，他/她无法针对你个人的困惑，给出具体的，真切可感的关怀。</p><p>　　如果你可以成功“自我催眠”将偶像言行强行解读为给自己说的话，也许还好；但你最好祈祷这位真人偶像千万别“糊”了，或者你追的动画/漫画没完结没“过气”。不然，还是逃脱不了信仰崩塌。</p><p>　　陌生的人与人之间的关系在降温，社会变得不再友善。所以，你必须从对不固定他人的友好，对宏大叙事的关怀中退出，退回到自己和身边最亲密的人形成的圈子里。</p><p>　　——这个最亲密的人，当然不必须是你的父母亲属，如果暂时没有另一半也不用急着找。只是，个人要尽量<strong>少与人交恶，多交现实中的朋友，或者一对一的，有线下交流潜力的网友</strong>，少将精力放在单方面的情感付出，和漫无边际的浏览上。</p><p>　　不与人争吵，对有利害关系的人，比如上下级，可以避免过快透支“社交货币”，给自己未来埋下隐忧；对素不相识的人，可以尽量减少你遇到一个反社会人格的疯子，或刺激他爆发出来的几率。</p><p>　　而那些真实可触的友谊和情感，也将更经得起时间的考验。</p><p>　　来自网络的友善可能无远弗届，但如果你采信了这种友善，它一旦转化为网络暴力，伤害也将更甚。</p><p>　　你不可能只选择相信网上赞同你的那部分声音。如果你选择对网络批评和暴力不屑一顾，那网友们对你赞美的效力也会衰减。</p><p>　　信任是保持人际关系长久的基石，但信任能够建立的前提，是你要知道你们未来会有重复的互动。只有个人与个人之间进行的双向互动，才能避免不信任的加剧扩散。</p><p>　　<strong>身边人最重要，是支撑自己走下去的最大动力</strong>。越是在艰难的时刻，他们越能让你抱团取暖，争取活下来，看到未来的曙光。</p><p>　　最后，“穷则独善其身，达则兼济天下”。如果你还有那么一份对远大志向和美好前程的期待，在你尚不能实现它的时候，请将其埋藏于心底，并<strong>千万不要忘记你的初心</strong>。</p><p>　　祝大家在新的一年里，依然平安喜乐。</p><p>LJ 执笔</p><p>cnBeta.COM 全体成员</p><p>转载自：<a href="https://www.cnbeta.com/articles/tech/803761.htm" title="cnBeta 2019新年贺词">cnBeta 2019新年贺词</a> 【原文已删】</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>共享一波妹子图</title>
    <link href="/read/106.html"/>
    <url>/read/106.html</url>
    
    <content type="html"><![CDATA[<p>没什么写的</p><p>前两天在V2看到一个大佬用爬虫爬了30+G的妹子图<br>避免资源失效，我也copy了一份，哈哈哈<br>现特共享出来，有缘看到的大佬欢迎自取</p><span id="more"></span><p>来源：<a href="https://www.v2ex.com/t/515687">https://www.v2ex.com/t/515687</a></p><p>我打包下载到网盘了，可以在线浏览缩略图，遇到喜欢的也可以单张下载~</p><blockquote><p>据科学研究表明，多看美女可以延年益寿，哈哈_(:з」∠)_</p></blockquote><p>先随便放几张凑数</p><p><img src="https://wuyang.ws/%E5%85%B1%E4%BA%AB/%E5%9B%BE%E7%89%87/%E5%A6%B9%E5%AD%90%E5%9B%BE/2084_721/%E5%8E%9A%E5%8E%9A%E7%9A%84%E6%AF%9B%E8%A1%A3/%E5%8E%9A%E5%8E%9A%E7%9A%84%E6%AF%9B%E8%A1%A3%20%281%29.jpg?t=780"></p><p><img src="https://wuyang.ws/%E5%85%B1%E4%BA%AB/%E5%9B%BE%E7%89%87/%E5%A6%B9%E5%AD%90%E5%9B%BE/2158_441/%E5%81%A5%E8%BA%AB%E6%88%BF%E7%9A%84%E7%BE%8E%E5%B0%91%E5%A5%B3/%E5%81%A5%E8%BA%AB%E6%88%BF%E7%9A%84%E7%BE%8E%E5%B0%91%E5%A5%B3%20%282%29.JPG?t=780"></p><p><img src="https://wuyang.ws/%E5%85%B1%E4%BA%AB/%E5%9B%BE%E7%89%87/%E5%A6%B9%E5%AD%90%E5%9B%BE/20180310144844_3571/%E6%B5%B4%E7%BC%B8%E9%87%8C%E7%9A%84%E7%99%BD%E4%B8%9D/%E6%B5%B4%E7%BC%B8%E9%87%8C%E7%9A%84%E7%99%BD%E4%B8%9D%20%282%29.JPG?t=780"></p><p>网盘地址：<a href="https://wuyang.ws/%E5%85%B1%E4%BA%AB/%E5%9B%BE%E7%89%87/" title="Link">Link</a><br>ps：网盘右下角按钮可切换到看图模式（列表和预览都是缩略图，原图需要点下载按钮或者访问下载链接）</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么现在很少有男生追女生了？</title>
    <link href="/read/105.html"/>
    <url>/read/105.html</url>
    
    <content type="html"><![CDATA[<p>我发了一个请求,</p><p>请求方式、参数、路径写的很清楚了，并且请求了很多次！</p><p>她并没有响应数据，所以我不知道怎么显示数据，继续又发了请求，她响应了个404，我觉得我的路径有问题。</p><p>经她闺蜜指点，我应该先和她成为好朋友。</p><span id="more"></span><p>这次我换了个参数：情人节那天发了个520，这次给我响应了，登上主页面了，星巴克咖啡厅，当面了解了下，回家我对我各种状况进行了增删查改。</p><p>隔了几天又发了请求，这次她显示权限不足，我又在自身找bug。</p><p>不经意间发现有好几个人同时再给她发请求，且都得到回应了!</p><p>最后我知道我这样的初级程序猿无法直视这样的高并发的问题，不能保证线程安全!</p><p>转载自：<br><a href="http://www.coaadmin.cn/life/why-are-few-boys-chasing-girls-now.html" title="为什么现在很少有男生追女生了？">为什么现在很少有男生追女生了？</a><br><a href="http://www.789dl.cn/70.html" title="为什么现在很少有男生追女生了？">为什么现在很少有男生追女生了？</a></p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>插件更新：Typecho的Google Authenticator两步验证</title>
    <link href="/read/Typecho_Google_Authenticator_02.html"/>
    <url>/read/Typecho_Google_Authenticator_02.html</url>
    
    <content type="html"><![CDATA[<p>0.0.1版可查看之前的博文<br><a href="https://cuojue.org/read/Typecho_Google_Authenticator.html">https://cuojue.org/read/Typecho_Google_Authenticator.html</a></p><h2 id="本版特点"><a href="#本版特点" class="headerlink" title="本版特点"></a>本版特点</h2><p>相对于0.0.1版，0.0.2版的验证逻辑<strong>全部更新</strong>，推荐升级！<br>支持验证态保持，一次登录后，在session或cookie有效期内无需再次验证<br>废弃0.0.1使用的登录接口，采用插件内注册的Route来处理otp，无需等待tp返回的2s后验证<br>废弃0.0.1使用的插入点<code>header</code>，直接采用<code>common</code>插入</p><span id="more"></span><h4 id="兼容所有符合-RFC6238-规范的AuthOTP软件"><a href="#兼容所有符合-RFC6238-规范的AuthOTP软件" class="headerlink" title="兼容所有符合 RFC6238 规范的AuthOTP软件"></a>兼容所有符合 <a href="https://tools.ietf.org/html/rfc6238" title="rfc6238">RFC6238</a> 规范的AuthOTP软件</h4><ul><li>Microsoft Authenticator</li><li>Google Authenticator</li><li>1Password</li><li>Authy</li><li>KeePass</li><li>LastPass</li><li>…</li></ul><h4 id="后台截图"><a href="#后台截图" class="headerlink" title="后台截图"></a>后台截图</h4><p><img src="https://static.cuojue.org/blog/files/2018/11/2777331120.png" alt="后台截图.png"></p><h4 id="验证界面截图"><a href="#验证界面截图" class="headerlink" title="验证界面截图"></a>验证界面截图</h4><p><img src="https://static.cuojue.org/blog/files/2018/11/86736268.png" alt="验证界面截图.png"></p><h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><h4 id="0-0-6"><a href="#0-0-6" class="headerlink" title="0.0.6"></a>0.0.6</h4><ul><li>[change] 使用 <code>jquery-qrcode</code> 插件在浏览器端生成二维码(不再使用外站的API来生成二维码,保证Key的安全性).</li></ul><h4 id="0-0-5"><a href="#0-0-5" class="headerlink" title="0.0.5"></a>0.0.5</h4><ul><li>[fix] 修复启用插件500错误，改为使用jQuery获取SecretKey显示二维码</li></ul><h4 id="0-0-4"><a href="#0-0-4" class="headerlink" title="0.0.4"></a>0.0.4</h4><ul><li>[add] 支持后台直接显示二维码</li><li>[fix] 修改为使用联图API显示二维码</li><li>[fix] 修复博客名称为中文时扫描二维码提示错误</li><li>[fix] 修复卸载的时候没有删除路由</li><li>[fix] 登录成功后主动访问路由地址会显示一条msg 验证失败</li></ul><h4 id="0-0-3"><a href="#0-0-3" class="headerlink" title="0.0.3"></a>0.0.3</h4><ul><li>[add] 更新支持记住本机</li></ul><h4 id="0-0-2"><a href="#0-0-2" class="headerlink" title="0.0.2"></a>0.0.2</h4><ul><li>支持typecho最新版</li><li>流程优化,符合大多数网站逻辑</li><li>先验证登录信息</li><li>然后再验证otp</li><li>修复插入header导致的新版css错乱</li><li>支持密码管理软件自动填充 (1password等)</li></ul><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>下载插件，修改文件名为<code>GAuthenticator</code>放到<code>/usr/plugins</code>目录，然后到后台启用</p><p>插件默认关闭，首次开启需要<strong>扫描二维码绑定</strong>之后<strong>填写手机上显示的代码</strong>，验证成功之后才可以启用</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><strong>下载地址：<a href="https://github.com/weicno/typecho-Authenticator/releases" title="GitHub typecho Authenticator">GitHub</a></strong></p><h3 id="请注意：从0-0-1升级到0-0-2-版本需要卸载重新安装！"><a href="#请注意：从0-0-1升级到0-0-2-版本需要卸载重新安装！" class="headerlink" title="请注意：从0.0.1升级到0.0.2+版本需要卸载重新安装！"></a>请注意：从0.0.1升级到0.0.2+版本需要卸载重新安装！</h3><hr><p>有什么问题可以在本页面回复</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>升级我的ss代理客户端为v2ray客户端</title>
    <link href="/read/ss_update_to_v2ray.html"/>
    <url>/read/ss_update_to_v2ray.html</url>
    
    <content type="html"><![CDATA[<p>之前用的ss+haporxy已经稳定快两年了，升级成v2ray支持横向扩展，因为它支持的协议比较多，越来越多的服务商提供v2ray协议了，v2ray目前（2018/11/21）应该还不是敏感词，在百度上都可以搜索，但是官网已经被墙</p><span id="more"></span><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>使用官方维护的自动安装脚本</p><blockquote><p>V2Ray 提供了一个在 Linux 中的自动化安装脚本。这个脚本会自动检测有没有安装过 V2Ray，如果没有，则进行完整的安装和配置；如果之前安装过 V2Ray，则只更新 V2Ray 二进制程序而不更新配置。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home<br>mkdir v2ray<br><span class="hljs-built_in">cd</span> v2ray<br>wget https://install.direct/go.sh<br>chmod +x go.sh<br>./go.sh<br></code></pre></td></tr></table></figure><h3 id="下载失败，地址被阻断"><a href="#下载失败，地址被阻断" class="headerlink" title="下载失败，地址被阻断"></a>下载失败，地址被阻断</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Installing V2Ray v4.5.0 on x86_64<br>Downloading V2Ray.<br>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100   608    0   608    0     0    964      0 --:--:-- --:--:-- --:--:--   965<br>  0     0    0     0    0     0      0      0 --:--:--  0:02:08 --:--:--     0curl: (7) Failed connect to github-production-release-asset-xxxxxx.s3.amazonaws.com:443; Connection timed out<br>Failed to download! Please check your network or try again.<br>````<br><span class="hljs-comment">### 启用代理下载安装</span><br>```bash<br>./go.sh -p socks5://127.0.0.1:00000<br></code></pre></td></tr></table></figure><p>安装完毕会显示自动生成的端口和UUID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">PORT:000000<br>UUID:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx<br>Created symlink from /etc/systemd/system/multi-user.target.wants/v2ray.service to /etc/systemd/system/v2ray.service.<br>V2Ray v4.5.0 is installed.<br><br></code></pre></td></tr></table></figure><p>文件位置</p><ul><li>/usr/bin/v2ray/v2ray：V2Ray 程序；</li><li>/usr/bin/v2ray/v2ctl：V2Ray 工具；</li><li>/etc/v2ray/config.json：配置文件；</li><li>/usr/bin/v2ray/geoip.dat：IP 数据文件</li><li>/usr/bin/v2ray/geosite.dat：域名数据文件</li></ul><h3 id="V2ray的配置"><a href="#V2ray的配置" class="headerlink" title="V2ray的配置"></a>V2ray的配置</h3><p>v2同样不区分客户端和服务器端，通过配置文件控制in和out就分别成了客户端和服务器端</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;inbounds&quot;</span>: [&#123;<br>    <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">10001</span>,<br>    <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;Socks&quot;</span>,<br>    <span class="hljs-attr">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;auth&quot;</span>: <span class="hljs-string">&quot;password&quot;</span>,<br>      <span class="hljs-attr">&quot;accounts&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;user&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>,<br>          <span class="hljs-attr">&quot;pass&quot;</span>: <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>      ],<br>      <span class="hljs-attr">&quot;udp&quot;</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>      <span class="hljs-attr">&quot;userLevel&quot;</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,&#123;<br>    <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">10000</span>,<br>    <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;Socks&quot;</span>,<br>    <span class="hljs-attr">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;auth&quot;</span>: <span class="hljs-string">&quot;noauth&quot;</span>,<br>      <span class="hljs-attr">&quot;udp&quot;</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">&quot;ip&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>      <span class="hljs-attr">&quot;userLevel&quot;</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;],<br>  <span class="hljs-attr">&quot;outbounds&quot;</span>: [&#123;<br>    <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;S*********s&quot;</span>,<br>    <span class="hljs-attr">&quot;settings&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;servers&quot;</span>: [<br>        &#123;<br>          <span class="hljs-attr">&quot;address&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>          <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">10000</span>,<br>          <span class="hljs-attr">&quot;method&quot;</span>: <span class="hljs-string">&quot;aes-128-cfb&quot;</span>,<br>          <span class="hljs-attr">&quot;password&quot;</span>: <span class="hljs-string">&quot;0000000&quot;</span>,<br>          <span class="hljs-attr">&quot;ota&quot;</span>: <span class="hljs-literal">false</span>,<br>          <span class="hljs-attr">&quot;level&quot;</span>: <span class="hljs-number">0</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;,&#123;<br>    <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;blackhole&quot;</span>,<br>    <span class="hljs-attr">&quot;settings&quot;</span>: &#123;&#125;,<br>    <span class="hljs-attr">&quot;tag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span><br>  &#125;],<br>  <span class="hljs-attr">&quot;routing&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;rules&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;field&quot;</span>,<br>        <span class="hljs-attr">&quot;ip&quot;</span>: [<span class="hljs-string">&quot;geoip:private&quot;</span>],<br>        <span class="hljs-attr">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置文件解释"><a href="#配置文件解释" class="headerlink" title="配置文件解释"></a>配置文件解释</h3><p>开放了两个socks5端口，一个带验证一个不带验证<br>上游采用ss协议，因为我同时部署了haporxy作为故障切换所以地址端口是回环</p><h3 id="故障切换和均衡负责"><a href="#故障切换和均衡负责" class="headerlink" title="故障切换和均衡负责"></a>故障切换和均衡负责</h3><p>想了解如何部署haporxy可以参考我之前的文章，密码是本文标题下方五个英文字母<br><a href="https://cuojue.org/read/haporxy_for_ss.html" title="利用haporxy为ss打造高可用服务">利用haporxy为ss打造高可用服务</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>适用于Typecho的Google Analytics加速插件</title>
    <link href="/read/typecho_plugin_ga.html"/>
    <url>/read/typecho_plugin_ga.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>昨天在腾讯云的无服务器函数上试了一下Google Analytics加速，发现腾讯云的无服务器函数在长时间不允许的情况下会回收资源，再次调用要重新加载，速度特别慢 (&gt; 2s)，对于博客这样的小站来说，一天都没几个人访问，结果一般情况下比直接加载GA还慢（？？？我是为了加速才用你的好吗？你却更慢了！:roll:）</p></blockquote><span id="more"></span><p><a href="https://cuojue.org/read/scf_for_ga.html">利用腾讯云无服务器函数加速Google Analytics</a><br>想了解可以点击看看</p><hr><p>下面正题，由于以上项目过于坑爹。重新写了一个在Typecho下直接使用的GA代理插件，异步返回（如果你的服务器支持的话）</p><p>下载后复制<code>GoogleAnalytics</code>文件夹到<code>plugins</code><br>在后台安装后，填入你的 跟踪 ID 即可</p><p>如果你使用了Pjax加载，在Pjax回调填入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ga(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,navigator,location);<br></code></pre></td></tr></table></figure><p>即可统计全站</p><p>下载地址：<a href="https://github.com/weicno/Typecho-GoogleAnalytics-Plugin" title="GitHub">GitHub</a></p><p>参考链接：<br><a href="https://www.bfdz.ink/2018/10/23/109/">https://www.bfdz.ink/2018/10/23/109/</a><br><a href="https://stneng.com/google-analytics-%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%EF%BC%89/">https://stneng.com/google-analytics-%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%EF%BC%89/</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>利用腾讯云无服务器函数加速Google Analytics</title>
    <link href="/read/scf_for_ga.html"/>
    <url>/read/scf_for_ga.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近重新开始打理博客后，看到自己的ga统计都被自己浏览器插件过滤了:?:重新给处理一下吧</p></blockquote><p>首先是看了的 BFDZ 大佬的 <a href="https://www.bfdz.ink/2018/10/23/109/" title="Google Analytics 加载优化">Google Analytics 加载优化</a> 然后用了两天，觉得还不错，准备自己建一个，<del>但是又不想大张旗鼓的部署在服务器上面</del> <em>主要是因为穷，没钱</em></p><span id="more"></span><p>然后看到腾讯云的无服务器函数正在测试，然后据说以后还是有免费额度的，蹭一蹭</p><blockquote><p>无服务器云函数（Serverless Cloud Function，SCF）是腾讯云为企业和开发者们提供的无服务器执行环境，帮助您在无需购买和管理服务器的情况下运行代码。您只需使用平台支持的语言编写核心代码并设置代码运行的条件，即可在腾讯云基础设施上弹性、安全地运行代码。SCF 是实时文件处理和数据处理等场景下理想的计算平台。</p></blockquote><hr><p>##先创建一个PHP的函数<br>（为什么？因为PHP是世界上最好的语言）</p><p><img src="https://static.cuojue.org/blog/files/2018/11/1356262822.png" alt="1.png"></p><p><img src="https://static.cuojue.org/blog/files/2018/11/789965526.png" alt="2.png"></p><p>##直接在线编辑函数代码</p><p>修改执行方法为<code>index.ga</code><br>然后在代码框填入以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ga</span>(<span class="hljs-params"><span class="hljs-variable">$event</span>, <span class="hljs-variable">$context</span></span>)</span>&#123;<br><br>    <span class="hljs-comment">//拦截参数不完整</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;headers-&gt;referer) || <br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;headers-&gt;&#123;<span class="hljs-string">&#x27;user-agent&#x27;</span>&#125;) || <br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;ga) || <br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;dt) || <br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;dr) ||  <br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;ul) ||  <br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;sd) ||  <br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;sr) ||  <br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;vp) || <br>        !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;z))<br>    &#123;<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;statusCode&#x27;</span>=&gt;<span class="hljs-number">403</span>,<br>            <span class="hljs-string">&#x27;headers&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;content-type&quot;</span>=&gt;<span class="hljs-string">&quot;text/html&quot;</span>),<br>            <span class="hljs-string">&#x27;body&#x27;</span>=&gt;<span class="hljs-string">&#x27;403&#x27;</span>,<br>            <span class="hljs-string">&#x27;isBase64&#x27;</span>=&gt;<span class="hljs-literal">false</span><br>            );<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//处理cookies</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$event</span>-&gt;headers-&gt;cookie))&#123;<br>        <span class="hljs-variable">$cookies</span> = <span class="hljs-variable">$event</span>-&gt;headers-&gt;cookie;<br>        <span class="hljs-keyword">if</span>(stripos(<span class="hljs-variable">$cookies</span>,<span class="hljs-string">&#x27;;&#x27;</span>)===<span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-comment">//本域名下cookie应该只存在uuid一个值</span><br>            <span class="hljs-variable">$array_uuid</span> = explode(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-variable">$cookies</span>);<br>            <span class="hljs-keyword">if</span>(count(<span class="hljs-variable">$array_uuid</span>)==<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-variable">$array_uuid</span>[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;uuid&#x27;</span>)<span class="hljs-variable">$uuid</span> = <span class="hljs-variable">$array_uuid</span>[<span class="hljs-number">1</span>];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//cookie被提交了多个值,分割值</span><br>            <span class="hljs-variable">$array_cookie</span> = explode(<span class="hljs-string">&#x27;;&#x27;</span>,<span class="hljs-variable">$cookies</span>);<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$array_cookie</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>)&#123;<br>                <span class="hljs-variable">$array_uuid</span> = explode(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-variable">$value</span>);<br>                <span class="hljs-keyword">if</span>(count(<span class="hljs-variable">$array_uuid</span>)==<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-variable">$array_uuid</span>[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;uuid&#x27;</span>)&#123;<br>                    <span class="hljs-variable">$uuid</span> = <span class="hljs-variable">$array_uuid</span>[<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//取第一个uuid</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$uuid</span>)) &#123;<br>        <span class="hljs-variable">$str</span> = md5(uniqid(mt_rand(), <span class="hljs-literal">true</span>));<br>        <span class="hljs-variable">$uuid</span> = substr(<span class="hljs-variable">$str</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>) . <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-variable">$uuid</span> .= substr(<span class="hljs-variable">$str</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>) . <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-variable">$uuid</span> .= substr(<span class="hljs-variable">$str</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>) . <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-variable">$uuid</span> .= substr(<span class="hljs-variable">$str</span>,<span class="hljs-number">16</span>,<span class="hljs-number">4</span>) . <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-variable">$uuid</span> .= substr(<span class="hljs-variable">$str</span>,<span class="hljs-number">20</span>,<span class="hljs-number">12</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$url</span>=<span class="hljs-string">&#x27;v=1&amp;t=pageview&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;tid=&#x27;</span>.<span class="hljs-variable">$event</span>-&gt;queryString-&gt;ga.<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;cid=&#x27;</span>.<span class="hljs-variable">$uuid</span>.<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;dl=&#x27;</span>.rawurlencode(rawurldecode(<span class="hljs-variable">$event</span>-&gt;headers-&gt;referer)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;uip=&#x27;</span>.rawurlencode(rawurldecode(<span class="hljs-variable">$event</span>-&gt;requestContext-&gt;sourceIp)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;ua=&#x27;</span>.rawurlencode(rawurldecode(<span class="hljs-variable">$event</span>-&gt;headers-&gt;&#123;<span class="hljs-string">&#x27;user-agent&#x27;</span>&#125;)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;dt=&#x27;</span>.rawurlencode(rawurldecode(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;dt)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;dr=&#x27;</span>.rawurlencode(rawurldecode(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;dr)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;ul=&#x27;</span>.rawurlencode(rawurldecode(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;ul)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;sd=&#x27;</span>.rawurlencode(rawurldecode(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;sd)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;sr=&#x27;</span>.rawurlencode(rawurldecode(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;sr)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;vp=&#x27;</span>.rawurlencode(rawurldecode(<span class="hljs-variable">$event</span>-&gt;queryString-&gt;vp)).<span class="hljs-string">&#x27;&amp;&#x27;</span>;<br>    <span class="hljs-variable">$url</span>.=<span class="hljs-string">&#x27;z=&#x27;</span>.<span class="hljs-variable">$event</span>-&gt;queryString-&gt;z;<br>    <span class="hljs-variable">$url</span>=<span class="hljs-string">&#x27;https://www.google-analytics.com/collect?&#x27;</span>.<span class="hljs-variable">$url</span>;<br>    <span class="hljs-variable">$ch</span>=curl_init();<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>    curl_exec(<span class="hljs-variable">$ch</span>);<br>    curl_close(<span class="hljs-variable">$ch</span>);<br><br>    <span class="hljs-variable">$extime</span> = date(DATE_COOKIE,time()+<span class="hljs-number">368400000</span>);<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&#x27;statusCode&#x27;</span>=&gt;<span class="hljs-number">204</span>,<br>        <span class="hljs-string">&#x27;headers&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&quot;content-type&quot;</span>=&gt;<span class="hljs-string">&quot;image/jpg&quot;</span>,<br>            <span class="hljs-string">&quot;set-cookie&quot;</span>=&gt;<span class="hljs-string">&quot;uuid=<span class="hljs-subst">&#123;$uuid&#125;</span>; expires=<span class="hljs-subst">&#123;$extime&#125;</span>; path=/; HttpOnly&quot;</span><br>            ),<br>        <span class="hljs-string">&#x27;body&#x27;</span>=&gt;<span class="hljs-string">&#x27;is work&#x27;</span>,<br>        <span class="hljs-string">&#x27;isBase64&#x27;</span>=&gt;<span class="hljs-literal">false</span><br>        );<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以保存测试一下，应该会输出403，因为没有附带参数被拦截了</p><h2 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h2><p>添加一个触发方式，选择API网关触发<br><img src="https://static.cuojue.org/blog/files/2018/11/1964014910.png" alt="3.png"></p><h2 id="启用响应集成"><a href="#启用响应集成" class="headerlink" title="启用响应集成"></a>启用响应集成</h2><p>默认添加API网关后已经可以访问了，但是会输出json，为了<del>世界的和平</del>，我们要自定义响应头为204加快一下浏览器的处理速度<br>进入API网关编辑一下刚才新建的网关<br><img src="https://static.cuojue.org/blog/files/2018/11/1765206485.png" alt="4.png"></p><p><img src="https://static.cuojue.org/blog/files/2018/11/2293716392.png" alt="5.png"></p><p>除了后端这里打钩，其他都默认不用改（貌似进这个页面默认是打钩的），然后提交</p><h4 id="提交后记得要发布"><a href="#提交后记得要发布" class="headerlink" title="提交后记得要发布"></a>提交后记得要发布</h4><p><img src="https://static.cuojue.org/blog/files/2018/11/1079453171.png" alt="6.png"></p><h2 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h2><p><img src="https://static.cuojue.org/blog/files/2018/11/3670626061.png" alt="7.png"></p><p>可以绑定自定义域名并且支持SSL，当然备案是必须的~</p><h2 id="前端应用"><a href="#前端应用" class="headerlink" title="前端应用"></a>前端应用</h2><p>在合适的地方插入以下JS代码即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ga</span>(<span class="hljs-params">a, b, c, d, e</span>) </span>&#123;<br><span class="hljs-keyword">var</span> f = c.screen,<br>g = <span class="hljs-built_in">encodeURIComponent</span>,<br>h = [<span class="hljs-string">&quot;ga=&quot;</span> + a, <span class="hljs-string">&quot;dt=&quot;</span> + g(d.title), <span class="hljs-string">&quot;dr=&quot;</span> + g(d.referrer), <span class="hljs-string">&quot;ul=&quot;</span> + (e.language || e.browserLanguage || e.userLanguage), <span class="hljs-string">&quot;sd=&quot;</span> + f.colorDepth + <span class="hljs-string">&quot;-bit&quot;</span>, <span class="hljs-string">&quot;sr=&quot;</span> + f.width + <span class="hljs-string">&quot;x&quot;</span> + f.height, <span class="hljs-string">&quot;vp=&quot;</span> + <span class="hljs-built_in">Math</span>.max(d.documentElement.clientWidth, c.innerWidth || <span class="hljs-number">0</span>) + <span class="hljs-string">&quot;x&quot;</span> + <span class="hljs-built_in">Math</span>.max(d.documentElement.clientHeight, c.innerHeight || <span class="hljs-number">0</span>), <span class="hljs-string">&quot;z=&quot;</span> + +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>];<br>c.__ga_img = <span class="hljs-keyword">new</span> Image, c.__ga_img.src = b + <span class="hljs-string">&quot;?&quot;</span> + h.join(<span class="hljs-string">&quot;&amp;&quot;</span>)<br>&#125;<br>ga(<span class="hljs-string">&quot;UA-XXXXXX-1&quot;</span>, <span class="hljs-string">&quot;https://ga.cuojue.org/ga/ga/&quot;</span>, <span class="hljs-built_in">window</span>, <span class="hljs-built_in">document</span>, navigator, location);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>为什么我要把函数封装以下独立出来呢，因为现在博客用的模板是pjax加载的，所以要在pjax加载完毕后回调一下这个函数，让每个页面都统计到</p><h2 id="继续改进"><a href="#继续改进" class="headerlink" title="继续改进"></a>继续改进</h2><p>现在函数是同步返回的，有空看下改成异步执行加快一下速度~</p><hr><p>参考内容：<br><a href="https://www.bfdz.ink/2018/10/23/109/">https://www.bfdz.ink/2018/10/23/109/</a></p><p><a href="https://stneng.com/google-analytics-%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%EF%BC%89/">https://stneng.com/google-analytics-%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%EF%BC%89/</a></p><p><a href="https://imququ.com/post/summary-of-my-blog-optimization.html#toc-2">https://imququ.com/post/summary-of-my-blog-optimization.html#toc-2</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>整合Typecho评论邮件提醒加上微信推送</title>
    <link href="/read/90.html"/>
    <url>/read/90.html</url>
    
    <content type="html"><![CDATA[<p>整理博客的时候发现邮件不会发送了，检查了一下是启用了<a href="https://yian.me/blog/php/typecho-plugin--comment2wechat.html" title="Comment2Wechat">Comment2Wechat</a> 微信推送插件之后出现的，然后这个插件还有一个缺点就是自己评论的也会推送，so整合一下把两个插件合二为一</p><span id="more"></span><p>首先修改配置接口</p><p><code>/plugins/CommentToMail/Plugin.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$form</span>-&gt;addInput(<span class="hljs-variable">$titleForGuest</span>-&gt;addRule(<span class="hljs-string">&#x27;required&#x27;</span>, _t(<span class="hljs-string">&#x27;访客接收邮件标题 不能为空&#x27;</span>)));<br></code></pre></td></tr></table></figure><p>下面加入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$key</span> = <span class="hljs-keyword">new</span> Typecho_Widget_Helper_Form_Element_Text(<span class="hljs-string">&#x27;sckey&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, _t(<span class="hljs-string">&#x27;SCKEY&#x27;</span>), _t(<span class="hljs-string">&#x27;SCKEY 需要在 &lt;a href=&quot;http://sc.ftqq.com/&quot;&gt;Server酱&lt;/a&gt; 注册&lt;br /&gt;</span><br><span class="hljs-string">同时，注册后需要在 &lt;a href=&quot;http://sc.ftqq.com/&quot;&gt;Server酱&lt;/a&gt; 绑定你的微信号才能收到推送&#x27;</span>));<br><span class="hljs-variable">$form</span>-&gt;addInput(<span class="hljs-variable">$key</span>);<br></code></pre></td></tr></table></figure><p>然后在<br><code>/plugins/CommentToMail/Action.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">$this</span>-&gt;authorMail()-&gt;sendMail();<br></code></pre></td></tr></table></figure><p>上一行插入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//向博主发推送</span><br><span class="hljs-variable">$sckey</span> = <span class="hljs-keyword">$this</span>-&gt;_cfg-&gt;sckey;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$sckey</span>))&#123;<br>    <span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;有人在您的博客发表了评论&quot;</span>;<br>    <span class="hljs-variable">$desp</span> = <span class="hljs-string">&quot;**&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;_email-&gt;author.<span class="hljs-string">&quot;** 在 [「&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;_email-&gt;title.<span class="hljs-string">&quot;」](&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;_email-&gt;permalink.<span class="hljs-string">&quot; \&quot;&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;_email-&gt;title.<span class="hljs-string">&quot;\&quot;) 中说到: \n\n &gt; &quot;</span>.<span class="hljs-keyword">$this</span>-&gt;_email-&gt;text;<br>    <span class="hljs-variable">$postdata</span> = http_build_query(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;text&#x27;</span> =&gt; <span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;desp&#x27;</span> =&gt; <span class="hljs-variable">$desp</span>));<br>    <span class="hljs-variable">$opts</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;http&#x27;</span> =&gt;<br>        <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;method&#x27;</span>  =&gt; <span class="hljs-string">&#x27;POST&#x27;</span>,<br>            <span class="hljs-string">&#x27;header&#x27;</span>  =&gt; <span class="hljs-string">&#x27;Content-type: application/x-www-form-urlencoded&#x27;</span>,<br>            <span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$postdata</span><br>            )<br>        );<br>    <span class="hljs-variable">$context</span>  = stream_context_create(<span class="hljs-variable">$opts</span>);<br>    <span class="hljs-variable">$result</span> = file_get_contents(<span class="hljs-string">&#x27;http://sc.ftqq.com/&#x27;</span>.<span class="hljs-variable">$sckey</span>.<span class="hljs-string">&#x27;.send&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-variable">$context</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>搞定</p><p>博主目前使用的邮件发送插件版本为<br>CommentToMail 2.0.0  by <a href="http://www.byends.com/" title="Byends Upd">Byends Upd</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>记录一下我对新主题handsome的小修改</title>
    <link href="/read/88.html"/>
    <url>/read/88.html</url>
    
    <content type="html"><![CDATA[<h2 id="微信内分享打开进首页"><a href="#微信内分享打开进首页" class="headerlink" title="微信内分享打开进首页"></a>微信内分享打开进首页</h2><p>因为微信内不支持pushState导致文章分享出去也是首页地址，看不到具体文章</p><span id="more"></span><p>动刀内容</p><p><code>/themes/handsome/libs/functions.php(64)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">@define(<span class="hljs-string">&quot;PJAX_ENABLED&quot;</span>, in_array(<span class="hljs-string">&#x27;isPjax&#x27;</span>, <span class="hljs-variable">$options</span>-&gt;featuresetup));<br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//修改判断在微信环境强行禁用PJAX</span><br><span class="hljs-keyword">if</span> (stripos(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="hljs-string">&#x27;MicroMessenger&#x27;</span>)!==<span class="hljs-literal">false</span>) &#123;<br>    @define(<span class="hljs-string">&quot;PJAX_ENABLED&quot;</span>, <span class="hljs-literal">false</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    @define(<span class="hljs-string">&quot;PJAX_ENABLED&quot;</span>, in_array(<span class="hljs-string">&#x27;isPjax&#x27;</span>, <span class="hljs-variable">$options</span>-&gt;featuresetup));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="正文标题右边的分享和截图"><a href="#正文标题右边的分享和截图" class="headerlink" title="正文标题右边的分享和截图"></a>正文标题右边的分享和截图</h2><p>因为我不用空间微博之类的，然后截图提示跨站（又拍云上设置允许跨站请求又无效？？没看到头部有内容输出），索性眼不见心不烦</p><p><code>/themes/handsome/libs/Content.php (122)</code><br>简单的加个<code>display: none;</code>风格 :shock:</p><h2 id="又拍云联盟的LOGO"><a href="#又拍云联盟的LOGO" class="headerlink" title="又拍云联盟的LOGO"></a>又拍云联盟的LOGO</h2><p>之前还特地发邮件给我说要换成新logo不能使用文字链接</p><p><code>/themes/handsome/component/sidebar.php (103)</code></p><p>加几句，不想占用主题提供的广告框，广告两个字碍眼</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!--输出又拍云--&gt;<br>&lt;section id=&quot;tag_cloud-2&quot; class=&quot;widget widget_tag_cloud wrapper-md clear&quot;&gt;<br> &lt;h3 class=&quot;widget-title m-t-none text-md&quot;&gt;&lt;?php _me(&quot;CDN赞助&quot;) ?&gt;&lt;/h3&gt;<br> &lt;a class=&quot;social&quot; href=&quot;https://www.upyun.com&quot; target=&quot;_blank&quot; title=&quot;又拍云提供全网CDN支持&quot;&gt;&lt;img src=&quot;https://static.cuojue.org/res/images/upyun_logo8.svg?h400&quot; alt=&quot;又拍云&quot;&gt;&lt;/a&gt;<br>&lt;/section&gt;<br></code></pre></td></tr></table></figure><h2 id="图片文件名引发的404"><a href="#图片文件名引发的404" class="headerlink" title="图片文件名引发的404"></a>图片文件名引发的404</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta-keyword">/themes/</span>handsome<span class="hljs-meta-keyword">/usr/</span>img/sj<br><span class="hljs-meta-keyword">/themes/</span>handsome<span class="hljs-meta-keyword">/usr/</span>img/sj2<br></code></pre></td></tr></table></figure><p>这两个目录是作者提供的头部图片，BUG是文件默认寻找的下标是0，然而不存在0.jpg这样的文件，所以会产生404，解决方法是把数字最大的文件名改成0.jpg</p><h2 id="文章和评论中的表情被解析了"><a href="#文章和评论中的表情被解析了" class="headerlink" title="文章和评论中的表情被解析了"></a>文章和评论中的表情被解析了</h2><p>文章和评论中的表情贴图被解析为了fancybox相册:?:<br>解决方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/themes/</span>handsome<span class="hljs-regexp">/libs/</span>Content.php (<span class="hljs-number">1287</span>)<br><span class="hljs-regexp">/themes/</span>handsome<span class="hljs-regexp">/libs/</span>Content.php (<span class="hljs-number">1389</span>)<br></code></pre></td></tr></table></figure><p>在 <code>&lt;img</code> 标签后面添加</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nogallery</span><br></code></pre></td></tr></table></figure><h2 id="表情被解析到了头图"><a href="#表情被解析到了头图" class="headerlink" title="表情被解析到了头图"></a>表情被解析到了头图</h2><p>修改<br><code>/themes/handsome/libs/Content.php(542)</code><br>屏蔽文章内直接获取img标签提取成头图<br>也就是直接屏蔽第一个if</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (preg_match_all(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$thumbUrl</span>))<br></code></pre></td></tr></table></figure><h2 id="统计和Google-Analytics"><a href="#统计和Google-Analytics" class="headerlink" title="统计和Google Analytics"></a>统计和Google Analytics</h2><p>由于全站用了pjax加载，在浏览的时候默认只有入口页会统计到，pjax加载出来的内容没有重复加载统计，重写一下统计的js独立一个函数出来，在主题配置的pjax回调调用这个函数</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">ga(<span class="hljs-string">&quot;UA-77075137-1&quot;</span>, <span class="hljs-string">&quot;https://ga.giuem.com&quot;</span>, <span class="hljs-keyword">window</span>,<span class="hljs-built_in"> document</span>, navigator, location);<br></code></pre></td></tr></table></figure><p>2018-11-19更新：<br><del>已经改用自建GA代理</del><br>已改用插件</p><p><a href="https://cuojue.org/read/typecho_plugin_ga.html">适用于Typecho的Google Analytics加速插件</a></p><p>这里顺便感谢一下BFDZ大佬提供的GA代理 <a href="https://www.bfdz.ink/2018/10/23/109/" title="Google Analytics 加载优化">Google Analytics 加载优化</a></p><hr><p>总的来说，这个主题真的不错，感谢作者 <a href="https://www.ihewro.com/" title="友人C">友人C</a> 为我们提供如此精致的主题模板.</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Http Task Queue 异步列队服务搭建记录</title>
    <link href="/read/87.html"/>
    <url>/read/87.html</url>
    
    <content type="html"><![CDATA[<p>最近在开发一套CRM系统，需要用到列队服务做推送，然后看到了有前辈已经造好了轮子 <a href="http://blog.star7th.com/2016/09/2114.html" title="开源的任务队列服务HTQ">开源的任务队列服务HTQ</a> 直接部署一下试试</p><p>首先我的服务器用的Centos7并没有装nodejs<br>下载源码编译一下 ps:编译时间好tm长</p><span id="more"></span><h2 id="开始编译安装nodejs"><a href="#开始编译安装nodejs" class="headerlink" title="开始编译安装nodejs"></a>开始编译安装nodejs</h2><pre><code>wget https://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gztar zxvf node-v10.13.0.tar.gzcd node-v10.13.0./configuremakemake install</code></pre><p>安装完毕后测试一下</p><pre><code>[root@Centos htq]# node -vv10.13.0[root@Centos htq]# npm -v6.4.1</code></pre><p>ok</p><h2 id="开始安装HTQ"><a href="#开始安装HTQ" class="headerlink" title="开始安装HTQ"></a>开始安装HTQ</h2><p>执行命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> <br></code></pre></td></tr></table></figure><p>安装完毕后，首先修改一下<code>config.json</code>里面的token</p><p>然后执行以下命令启动：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">htq</span>.js <br></code></pre></td></tr></table></figure><p>上面这种启动方式是临时运行的，关闭命令行窗口就会停止了。如果想一直在后台运行，则可：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">nohup <span class="hljs-keyword">node</span> <span class="hljs-title">htq</span>.js &gt; ~/htq.log <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br></code></pre></td></tr></table></figure><p>如果想关闭退出，可运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">killall -<span class="hljs-number">9</span> <span class="hljs-keyword">node</span> <span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p>下面就是在业务里面使用了，直接HTTP投递任务</p><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p><strong>采用PM2来守护进程和开机自启</strong></p><p>安装PM2</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install pm<span class="hljs-number">2</span> -g<br></code></pre></td></tr></table></figure><p>从PM2启动HTQ服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pm2 start <span class="hljs-regexp">/home/</span>htq/htq.js --name=<span class="hljs-string">&quot;HTQServer&quot;</span><br></code></pre></td></tr></table></figure><p>设置开机自启</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">p<span class="hljs-name">m2</span> startup<br></code></pre></td></tr></table></figure><h1 id="HTQ的使用文档"><a href="#HTQ的使用文档" class="headerlink" title="HTQ的使用文档"></a>HTQ的使用文档</h1><h2 id="添加队列"><a href="#添加队列" class="headerlink" title="添加队列"></a>添加队列</h2><p><strong>请求URL：</strong> </p><ul><li><code>http://server:5999/api/addQueue</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST </li></ul><p><strong>参数：</strong> </p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">queue_name</td><td align="left">是</td><td align="left">string</td><td>队列名，英文+数字，不要出现中文</td></tr><tr><td align="left">type</td><td align="left">是</td><td align="left">string</td><td>类型。可以是”real_time”、”timing”、”variable” ，分别对应实时队列、定时队列、可变队列。如果是可变队列，则会对执行任务的返回结果有要求。请参考添加任务接口的备注说明部分</td></tr><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>请填写config.json里的app_key以供认证。初次安装HTQ可更改默认的值以提高安全性。更改后需要重启HTQ以生效</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>请填写config.json里的app_token以供认证。初次安装HTQ可更改默认的值以提高安全性。更改后需要重启HTQ以生效</td></tr><tr><td align="left">stepping_time</td><td align="left">否</td><td align="left">int</td><td>步进时间，单位是秒。当队列类型是可变队列的时候请传此参数。可变队列的执行机制请参考下文的备注部分。了解执行机制能让你更清晰地知道该如何设置此值</td></tr><tr><td align="left">max_time_interval</td><td align="left">否</td><td align="left">int</td><td>最大时间间隔，当队列类型是可变队列的时候请传此参数。可变队列的执行机制请参考下文的备注部分 。了解执行机制能让你更清晰地知道该如何设置此值</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <br>     <span class="hljs-attr">&quot;error_code&quot;</span> : <span class="hljs-number">0</span>, <br>     <span class="hljs-attr">&quot;message&quot;</span> : <span class="hljs-string">&quot;添加成功&quot;</span> <br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>失败返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <br>     <span class="hljs-attr">&quot;error_code&quot;</span> : <span class="hljs-number">1000</span>, <br>     <span class="hljs-attr">&quot;message&quot;</span> : <span class="hljs-string">&quot;认证失败&quot;</span> <br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>可变队列的执行机制</strong></p><p>可变队列的某个任务进入队列后，其url会被触发访问。URL执行的页面若返回字符串“reset”【 即直接在url的页面打印“reset”，如命令 print(“reset”)】，则任务的执行时间间隔会重置。若返回字符串”done”，则结束并删除当前任务.其他情况，URl都会被延迟下一次执行。延迟的时间计算公式是：执行次数 X 步进时间(stepping_time) 。其中，延迟时间最大值为max_time_interval。</p><p>所以，当URl没有被重置或者结束的时候，它会慢慢地增大下次执行时间，变得越来越慢，最后达到最大间隔时间max_time_interval后将一直保持这个执行时间间隔。直至得到重置命令或者结束命令.</p><h2 id="添加任务到队列"><a href="#添加任务到队列" class="headerlink" title="添加任务到队列"></a>添加任务到队列</h2><p><strong>请求URL：</strong> </p><ul><li><code>http://server:5999/api/addTask</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST </li></ul><p><strong>参数：</strong> </p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">queue_name</td><td align="left">是</td><td align="left">string</td><td>无</td></tr><tr><td align="left">url</td><td align="left">是</td><td align="left">string</td><td>如  <code>https://cuojue.org/test?test=123&amp;ff=22</code></td></tr><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>请填写config.json里的app_key以供认证。初次安装HTQ可更改默认的值以提高安全性。更改后需要重启HTQ以生效</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>请填写config.json里的app_token以供认证。初次安装HTQ可更改默认的值以提高安全性。更改后需要重启HTQ以生效</td></tr><tr><td align="left">execute_time</td><td align="left">否</td><td align="left">string</td><td>执行时间（可选），如”2016-08-21 10:21:12” 。当队列类型为定时队列的时候请传此参数。</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <br>     <span class="hljs-attr">&quot;error_code&quot;</span> : <span class="hljs-number">0</span>, <br>     <span class="hljs-attr">&quot;message&quot;</span> : <span class="hljs-string">&quot;添加成功&quot;</span> <br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>失败返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <br>     <span class="hljs-attr">&quot;error_code&quot;</span> : <span class="hljs-number">1000</span>, <br>     <span class="hljs-attr">&quot;message&quot;</span> : <span class="hljs-string">&quot;认证失败&quot;</span> <br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>备注说明</strong></p><p>当队列是可变队列时(type =’variable’ )，URL执行的页面若返回字符串”reset”，则任务的执行时间间隔会重置。若返回字符串”done”，则结束并删除当前任务.</p><h2 id="获取所有队列"><a href="#获取所有队列" class="headerlink" title="获取所有队列"></a>获取所有队列</h2><p><strong>请求URL：</strong> </p><ul><li><code>http://server:5999/api/allQueue</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST </li></ul><p><strong>参数：</strong> </p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>请填写config.json里的app_key以供认证。初次安装HTQ可更改默认的值以提高安全性。更改后需要重启HTQ以生效</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>请填写config.json里的app_token以供认证</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>    &#123;<br>        <span class="hljs-attr">&quot;queue_name&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>        <span class="hljs-attr">&quot;attribute&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;real_time&quot;</span>,<br>            <span class="hljs-attr">&quot;stepping_time&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>            <span class="hljs-attr">&quot;max_time_interval&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>        &#125;<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;queue_name&quot;</span>: <span class="hljs-string">&quot;test2&quot;</span>,<br>        <span class="hljs-attr">&quot;attribute&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;real_time&quot;</span>,<br>            <span class="hljs-attr">&quot;stepping_time&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>            <span class="hljs-attr">&quot;max_time_interval&quot;</span>: <span class="hljs-string">&quot;0&quot;</span><br>        &#125;<br>    &#125;<br>]<br><br></code></pre></td></tr></table></figure><h2 id="获取某个队列的任务数"><a href="#获取某个队列的任务数" class="headerlink" title="获取某个队列的任务数"></a>获取某个队列的任务数</h2><p><strong>请求URL：</strong> </p><ul><li><code>http://server:5999/api/countQueue</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST </li></ul><p><strong>参数：</strong> </p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">queue_name</td><td align="left">是</td><td align="left">string</td><td>无</td></tr><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>无</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>无</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;error_code&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;count&quot;</span>: <span class="hljs-number">10</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除队列"><a href="#删除队列" class="headerlink" title="删除队列"></a>删除队列</h2><p><strong>请求URL：</strong> </p><ul><li><code>http://server:5999/api/deleteQueue</code></li></ul><p><strong>请求方式：</strong></p><ul><li>POST </li></ul><p><strong>参数：</strong> </p><table><thead><tr><th align="left">参数名</th><th align="left">必选</th><th align="left">类型</th><th>说明</th></tr></thead><tbody><tr><td align="left">queue_name</td><td align="left">是</td><td align="left">string</td><td>无</td></tr><tr><td align="left">app_key</td><td align="left">是</td><td align="left">string</td><td>请填写config.json里的app_key以供认证</td></tr><tr><td align="left">app_token</td><td align="left">是</td><td align="left">string</td><td>请填写config.json里的app_token以供认证</td></tr></tbody></table><p><strong>成功返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <br>     <span class="hljs-attr">&quot;error_code&quot;</span> : <span class="hljs-number">0</span>, <br>     <span class="hljs-attr">&quot;message&quot;</span> : <span class="hljs-string">&quot;删除成功&quot;</span> <br> &#125;<br><br></code></pre></td></tr></table></figure><p><strong>失败返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123; <br>     <span class="hljs-attr">&quot;error_code&quot;</span> : <span class="hljs-number">1004</span>, <br>     <span class="hljs-attr">&quot;message&quot;</span> : <span class="hljs-string">&quot;删除失败&quot;</span> <br> &#125;<br><br></code></pre></td></tr></table></figure><h2 id="实现伪代码-PHP-codeigniter"><a href="#实现伪代码-PHP-codeigniter" class="headerlink" title="实现伪代码 PHP codeigniter"></a>实现伪代码 PHP codeigniter</h2><p><strong>修改一下官方提供的SDK放到libraries</strong><br><code>Htq.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>defined(<span class="hljs-string">&#x27;BASEPATH&#x27;</span>) <span class="hljs-keyword">OR</span> <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;No direct script access allowed&#x27;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Htq</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$htq_addr</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$app_key</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$app_token</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Connect</span>(<span class="hljs-params"><span class="hljs-variable">$app_key</span> , <span class="hljs-variable">$app_token</span> ,<span class="hljs-variable">$htq_addr</span> = <span class="hljs-string">&#x27;http://127.0.0.1:5999&#x27;</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;htq_addr = <span class="hljs-variable">$htq_addr</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;app_key = <span class="hljs-variable">$app_key</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;app_token = <span class="hljs-variable">$app_token</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addQueue</span>(<span class="hljs-params"><span class="hljs-variable">$queue_name</span>,<span class="hljs-variable">$type</span>,<span class="hljs-variable">$stepping_time</span> = <span class="hljs-number">0</span> , <span class="hljs-variable">$max_time_interval</span> = <span class="hljs-number">0</span> </span>)</span>&#123;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_token,<br><span class="hljs-string">&quot;queue_name&quot;</span>=&gt;<span class="hljs-variable">$queue_name</span>,<br><span class="hljs-string">&quot;type&quot;</span>=&gt;<span class="hljs-variable">$type</span>,<br><span class="hljs-string">&quot;stepping_time&quot;</span>=&gt;<span class="hljs-variable">$stepping_time</span>,<br><span class="hljs-string">&quot;max_time_interval&quot;</span>=&gt;<span class="hljs-variable">$max_time_interval</span>,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-keyword">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/addQueue&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_post(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteQueue</span>(<span class="hljs-params"><span class="hljs-variable">$queue_name</span></span>)</span>&#123;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_token,<br><span class="hljs-string">&quot;queue_name&quot;</span>=&gt;<span class="hljs-variable">$queue_name</span>,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-keyword">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/deleteQueue&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_post(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">allQueue</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_token,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-keyword">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/allQueue&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_post(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countQueue</span>(<span class="hljs-params"><span class="hljs-variable">$queue_name</span></span>)</span>&#123;<br><span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_token,<br><span class="hljs-string">&quot;queue_name&quot;</span>=&gt;<span class="hljs-variable">$queue_name</span>,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-keyword">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/countQueue&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_post(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTask</span>(<span class="hljs-params"><span class="hljs-variable">$queue_name</span> , <span class="hljs-variable">$url</span> , <span class="hljs-variable">$execute_time</span> = <span class="hljs-number">0</span> </span>)</span>&#123;<br><span class="hljs-variable">$post_data</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;app_key&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_key,<br><span class="hljs-string">&quot;app_token&quot;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;app_token,<br><span class="hljs-string">&quot;queue_name&quot;</span>=&gt;<span class="hljs-variable">$queue_name</span>,<br><span class="hljs-string">&quot;url&quot;</span>=&gt;<span class="hljs-variable">$url</span>,<br><span class="hljs-string">&quot;execute_time&quot;</span>=&gt;<span class="hljs-variable">$execute_time</span>,<br>);<br><span class="hljs-variable">$url</span> = <span class="hljs-keyword">$this</span>-&gt;htq_addr . <span class="hljs-string">&#x27;/api/addTask&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;_post(<span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span>);<br>&#125;<br><br><br><span class="hljs-comment">//post数据</span><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_post</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>,<span class="hljs-variable">$post_data</span></span>)</span>&#123;<br><span class="hljs-variable">$query_data</span> = http_build_query(<span class="hljs-variable">$post_data</span>);<br><span class="hljs-variable">$curl</span> = curl_init();<br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_POST, <span class="hljs-number">1</span> );<br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_POSTFIELDS, <span class="hljs-variable">$query_data</span>);<br>curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>    curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);<br>    curl_setopt(<span class="hljs-variable">$curl</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);<br><span class="hljs-variable">$response</span> = curl_exec(<span class="hljs-variable">$curl</span>);<br><span class="hljs-variable">$result</span> = json_decode(<span class="hljs-variable">$response</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$error</span> = curl_error(<span class="hljs-variable">$curl</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$error</span> ? <span class="hljs-variable">$error</span> : <span class="hljs-variable">$result</span>;<br>&#125;<br><br><span class="hljs-comment">//GET</span><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>,<span class="hljs-variable">$query_data</span></span>)</span>&#123;<br><span class="hljs-variable">$query_data</span> = http_build_query(<span class="hljs-variable">$query_data</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span> = <span class="hljs-variable">$url</span>.<span class="hljs-string">&quot;?&quot;</span>.<span class="hljs-variable">$query_data</span> ;<br>    <span class="hljs-variable">$curlObj</span> = curl_init();    <span class="hljs-comment">//初始化curl，</span><br>    curl_setopt(<span class="hljs-variable">$curlObj</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);   <span class="hljs-comment">//设置网址</span><br>    curl_setopt(<span class="hljs-variable">$curlObj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);  <span class="hljs-comment">//将curl_exec的结果返回</span><br>    curl_setopt(<span class="hljs-variable">$curlObj</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);<br>    curl_setopt(<span class="hljs-variable">$curlObj</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);   <br>    curl_setopt(<span class="hljs-variable">$curlObj</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);         <span class="hljs-comment">//是否输出返回头信息</span><br>    <span class="hljs-variable">$response</span> = curl_exec(<span class="hljs-variable">$curlObj</span>);   <span class="hljs-comment">//执行</span><br>    curl_close(<span class="hljs-variable">$curlObj</span>);          <span class="hljs-comment">//关闭会话</span><br>    <span class="hljs-keyword">return</span> json_decode(<span class="hljs-variable">$response</span>,<span class="hljs-literal">true</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>业务model</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//插入数据库通知</span><br><span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;title&#x27;</span>] = <span class="hljs-variable">$title</span>;<br><span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;body&#x27;</span>] = <span class="hljs-variable">$body</span>;<br><span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;type&#x27;</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;time&#x27;</span>] = time();<br><span class="hljs-keyword">$this</span>-&gt;db-&gt;insert(<span class="hljs-string">&#x27;push_msg&#x27;</span>, <span class="hljs-variable">$msg</span>);<br><span class="hljs-variable">$msgid</span> = <span class="hljs-keyword">$this</span>-&gt;db-&gt;insert_id();<br><span class="hljs-comment">//加入列队</span><br><span class="hljs-keyword">$this</span>-&gt;load-&gt;library(<span class="hljs-string">&#x27;htq&#x27;</span>);<br><span class="hljs-keyword">$this</span>-&gt;load-&gt;helper(<span class="hljs-string">&#x27;url&#x27;</span>);<br><span class="hljs-keyword">$this</span>-&gt;htq-&gt;Connect(<span class="hljs-keyword">$this</span>-&gt;system-&gt;system_cache[<span class="hljs-string">&#x27;htq_config&#x27;</span>][<span class="hljs-string">&#x27;app_key&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;system-&gt;system_cache[<span class="hljs-string">&#x27;htq_config&#x27;</span>][<span class="hljs-string">&#x27;app_token&#x27;</span>],<span class="hljs-keyword">$this</span>-&gt;system-&gt;system_cache[<span class="hljs-string">&#x27;htq_config&#x27;</span>][<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-keyword">$this</span>-&gt;htq-&gt;addQueue(<span class="hljs-string">&quot;push&quot;</span>,<span class="hljs-string">&quot;real_time&quot;</span>);<br><span class="hljs-comment">//查询所有推送人员信息</span><br><span class="hljs-variable">$_list</span> = <span class="hljs-keyword">$this</span>-&gt;db-&gt;select(<span class="hljs-string">&#x27;push_channel,push_key&#x27;</span>)-&gt;where(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;lock&#x27;</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;role&lt;=&#x27;</span>=&gt;<span class="hljs-number">2</span>))-&gt;get(<span class="hljs-string">&#x27;admins&#x27;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$admin</span> = <span class="hljs-variable">$_list</span>-&gt;unbuffered_row(<span class="hljs-string">&#x27;array&#x27;</span>))<br>&#123;<br>    <span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;push_channel&#x27;</span>],<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;bark&#x27;</span>,<span class="hljs-string">&#x27;ftqq&#x27;</span>)))&#123;<br>        <span class="hljs-comment">//存在推送频道则加入推送列队</span><br>        <span class="hljs-variable">$push_channel</span> = <span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;push_channel&#x27;</span>];<br>        <span class="hljs-variable">$push_key</span> = <span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;push_key&#x27;</span>];<br>        <span class="hljs-keyword">$this</span>-&gt;htq-&gt;addTask(<span class="hljs-string">&quot;push&quot;</span>,site_url(<span class="hljs-string">&quot;api/task/push/<span class="hljs-subst">&#123;$push_channel&#125;</span>/<span class="hljs-subst">&#123;$push_key&#125;</span>/<span class="hljs-subst">&#123;$msgid&#125;</span>&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行器</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task</span>(<span class="hljs-params"><span class="hljs-variable">$type</span>,<span class="hljs-variable">$channel</span>,<span class="hljs-variable">$key</span>,<span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>       <span class="hljs-variable">$id</span> = intval(<span class="hljs-variable">$id</span>);<br>       <span class="hljs-comment">//列队任务执行</span><br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$type</span>==<span class="hljs-string">&#x27;push&#x27;</span>)&#123;<br>           <span class="hljs-comment">//根据ID取出要推送的内容</span><br>           <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">$this</span>-&gt;db-&gt;select(<span class="hljs-string">&#x27;title,body&#x27;</span>)-&gt;where(<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-variable">$id</span>)-&gt;get(<span class="hljs-string">&#x27;push_msg&#x27;</span>,<span class="hljs-number">1</span>)-&gt;row_array();<br>           <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>)&#123;<br>               <span class="hljs-comment">//发送推送通知</span><br>               <span class="hljs-keyword">$this</span>-&gt;load-&gt;model(<span class="hljs-string">&#x27;push_model&#x27;</span>);<br>               <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">$this</span>-&gt;push_model-&gt;push(<span class="hljs-variable">$channel</span>,<span class="hljs-variable">$key</span>,<span class="hljs-string">&#x27;CRM 通知：&#x27;</span>.<span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;title&#x27;</span>],<span class="hljs-variable">$msg</span>[<span class="hljs-string">&#x27;body&#x27;</span>]);<br>               <span class="hljs-keyword">$this</span>-&gt;echo(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;code&#x27;</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;push_msg&#x27;</span>=&gt;<span class="hljs-variable">$ret</span>));<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>参考内容：<br><a href="http://blog.star7th.com/2016/09/2114.html">http://blog.star7th.com/2016/09/2114.html</a><br><a href="https://github.com/star7th/htq">https://github.com/star7th/htq</a><br><a href="https://www.showdoc.cc/htq?page_id=38897">https://www.showdoc.cc/htq?page_id=38897</a><br><a href="https://www.jianshu.com/p/7d3f3fa056e8">https://www.jianshu.com/p/7d3f3fa056e8</a><br><a href="https://blog.csdn.net/m0_37792354/article/details/80906113">https://blog.csdn.net/m0_37792354/article/details/80906113</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如果你还是“程序员”，我劝你别创业！</title>
    <link href="/read/86.html"/>
    <url>/read/86.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>很多程序员一看就知道不会创业</p></blockquote><h2 id="“程序员思维”会害死你！"><a href="#“程序员思维”会害死你！" class="headerlink" title="“程序员思维”会害死你！"></a>“程序员思维”会害死你！</h2><p>在IT这一行做得久了，会接触到无数让人哭笑不得的外行话。</p><p>「我们就差一个写代码的了」是其中典型的一种，之所以黑它，不是因为程序员有多自大，认为自己被轻视所以愤怒。而是因为说这句话的人里有90%以上绝对不仅仅差一个写代码的，而是一整套技术体系。</p><p>那么，程序员在创业公司之中真的这么重要吗？？？</p><span id="more"></span><p>并不是！</p><h4 id="中国的程序员大部分是盲目的：动不动就自称“CSDN专家”、”知乎大V”、”XX软件之父”。"><a href="#中国的程序员大部分是盲目的：动不动就自称“CSDN专家”、”知乎大V”、”XX软件之父”。" class="headerlink" title="中国的程序员大部分是盲目的：动不动就自称“CSDN专家”、”知乎大V”、”XX软件之父”。"></a>中国的程序员大部分是盲目的：动不动就自称“CSDN专家”、”知乎大V”、”XX软件之父”。</h4><p>就一个写代码的白领，在创业公司之中的贡献，并没有自己想象中的大！</p><p>业界上真正写过十年代码，创业成功的有几个？？？</p><p>零！！！</p><p>很多程序员（包括我）的至高理想：写一个牛逼的APP，一年挣个几百万。最好像当年张小龙写Foxmail一样，用户遍布全球，还未自己进入腾讯做微信打下基础。</p><p>如果你真正的了解张小龙这个人，你会发现：Foxmail在商业推广策略上的牛逼，远大于他个人在代码上的贡献。</p><h2 id="迷恋程序！肯定没戏！"><a href="#迷恋程序！肯定没戏！" class="headerlink" title="迷恋程序！肯定没戏！"></a>迷恋程序！肯定没戏！</h2><p>程序员，特别是中国的程序员，非常缺乏合作心态。</p><p>会一些简单算法/架构就觉得可以Control Everything。</p><p>恃才傲物！Stupid！</p><h5 id="程序员的自信在编程上是非常需要的，但不是适合一切场合。创业仅仅具备了和机器打交道这一种能力是绝对不够的，他还需要和合作伙伴、竞争对手、投资人、员工甚至整个社会环境打交道。"><a href="#程序员的自信在编程上是非常需要的，但不是适合一切场合。创业仅仅具备了和机器打交道这一种能力是绝对不够的，他还需要和合作伙伴、竞争对手、投资人、员工甚至整个社会环境打交道。" class="headerlink" title="程序员的自信在编程上是非常需要的，但不是适合一切场合。创业仅仅具备了和机器打交道这一种能力是绝对不够的，他还需要和合作伙伴、竞争对手、投资人、员工甚至整个社会环境打交道。"></a>程序员的自信在编程上是非常需要的，但不是适合一切场合。创业仅仅具备了和机器打交道这一种能力是绝对不够的，他还需要和合作伙伴、竞争对手、投资人、员工甚至整个社会环境打交道。</h5><p>很多程序员因为已经习惯了和机器打交道，不善于也不愿意其它的工作。很多程序员会内心认为“营销不是很简单嘛，市场很简单啊，管理也很简单啊，”这种心态是非常害人的。</p><p>我的很多朋友在总结自己创业失败的时候，往往会说：</p><p>“我当年在BAT中，如此叱咤风云！就连现在公司开发的APP也是如此一流！为什么就不能成功呢？”</p><p>我想说，脱离了“BAT”的光环你啥也不是！！！</p><p>不要让代码的成功，给自己带来的虚假优秀的自负，这种自负不要说创业，可能在在公司中工作也会遇到问题。</p><p>所以，我甚至认为程序员在创业方面遇到的困难比其它类型的人员更大。如果程序员希望主导一个创业，可能首先就要逼自己不是一个程序员。</p><h2 id="你并不牛逼！重视每一个方向！"><a href="#你并不牛逼！重视每一个方向！" class="headerlink" title="你并不牛逼！重视每一个方向！"></a>你并不牛逼！重视每一个方向！</h2><p>学会和别人合作！！！</p><p>这点看似很简单</p><p>“我会合作啊！ 你看Java后台、Android、iOS他们配合得多好！”</p><p>但这种合作是片面的，所谓的合作不是程序员和程序员之间的合作，而是包括了程序员和其它各种角色之间的合作。</p><ul><li>程序的上线周期Delay，有没有相应的商务推广配合？</li><li>地推团队还没到，是否就该在第一个版本设计这么复杂的功能？</li><li>公司前期预算不够，一定要做原生的APP吗？</li><li>分布式架构这么好，为什么要用All In One架构？</li><li>也许你能够写出完美的APP，但是这不意味着公司的成功！</li></ul><p>如果剖开一些故事的外表，你会发现国外很多成功的程序员，背后一定有一个很强大的商业感觉的人或者一个团队。</p><p>如果熟读Facebook的历史，你会发现，扎克伯格在创业时期，如果没有，曾在浏览器大战中惜败微软的Netscape公司创始人马克·安德森，帮助组件商业团队，小扎自己现在估计还是一名码农。</p><p>甚至直到Facebook上市，小扎也离不开他身后的强大的各环节的团队。其中，Facebook有位明星COO——雪莉·桑德伯格，她比扎克伯格大15岁，哈佛MBA硕士，是一位极富经验的精英女企业家。Facebook能有今天的成就，多半要归功于桑德伯格这样的“成年人”从旁辅佐。</p><p>程序员的商业感觉其实并不是很好。即便有商业感觉，其实这只是一个灵感，一个创意，但要要做成、做大还需要一系列的管理、市场、运营，这些对于程序员是不可想象的。</p><p>程序员要明白，在自己不擅长的领域，找到一个可以弥补自己缺陷的合作团队才是出路。加入一个创业团队，可能个人占 10%，但因为更容易成功，而且团队可以做 100 分的事情。而如果只是一个人做，很可能就失败了。</p><p>这方面，国外的程序员对自己的长短比较清楚。在硅谷，很多程序员技术上都很牛，但他们都非常知道自己只是在技术这个领域水平比较高，出了这个领域，自己什么都不是。正因为有了这种心态，他们特别懂得与人合作。我认为国外的程序员已经普遍意识到了这点，他们很愿意成为创业团队中的一员而并非自己创业。</p><h2 id="技术都做不好，别提创业！"><a href="#技术都做不好，别提创业！" class="headerlink" title="技术都做不好，别提创业！"></a>技术都做不好，别提创业！</h2><p>干了5年多的程序员，不得不承认一个现实：</p><h4 id="程序员生存状态并不是很好"><a href="#程序员生存状态并不是很好" class="headerlink" title="程序员生存状态并不是很好"></a>程序员生存状态并不是很好</h4><h5 id="但程序员很多报怨其实是一种不切实际的期望值和自身的缺陷产生的反差。"><a href="#但程序员很多报怨其实是一种不切实际的期望值和自身的缺陷产生的反差。" class="headerlink" title="但程序员很多报怨其实是一种不切实际的期望值和自身的缺陷产生的反差。"></a>但程序员很多报怨其实是一种不切实际的期望值和自身的缺陷产生的反差。</h5><p>产品没有大小，只有市场的大小。很多人总是觉得这也小，那也看不上。认为公司做的产品很无聊，要做就要像某些人宣扬的那样：做游戏一定要做 3D 引擎，好像只有这样才够牛。</p><p>不尊重现有自己所开发的产品，就是一种浮躁。公司的商业自然有其战略意义上的一部，程序员能够做的就是让他稳定顺畅的运行。</p><p>但，很多程序员写的东西总是很多Bug、技术知识也不牢固、没参加过几个大项目、最基本的HTTP协议都搞不清楚、代码量甚至量10万行也没有。这个时候，你跟我说你想改变世界。有意义吗？有价值吗？我敢让你做吗？</p><p>这个时候，你还挺愤青，骂公司、骂产品、骂老板的工资少，但你有没有想过自己给公司增加了多少Bug，自己让公司的整个商业计划Delay了两周。让自己周边的同事工作气氛都不好了，整个团队乌烟瘴气。</p><p>有些程序员就的要求就特别苛刻，觉得这不行，那也不行，PM必须把完美的逻辑路径给我、设计必须给我切每一个尺寸的图片、为什么测试不能把握的Bug测出来？</p><p>严格要求是好事，但严格要求是要求自己，并不是要求别人。程序员不要做评论家，中国不缺评论家，最缺的是实干家。</p><p>长期接触程序容易活在自我的世界中，就不可能真正了解世界是什么。程序员要学会慢慢站在别人立场上看问题。</p><h5 id="因为：牛逼的程序员，必须出自牛逼的公司。"><a href="#因为：牛逼的程序员，必须出自牛逼的公司。" class="headerlink" title="因为：牛逼的程序员，必须出自牛逼的公司。"></a>因为：牛逼的程序员，必须出自牛逼的公司。</h5><p>说到这里，你是否也怀疑自己自己的判断：“貌似PM在一个企业里面还是有一定的价值的！”</p><p>这里，给大家几个创业这些年我的心得：</p><p>需要调整心态，不要把自己当作精英人物，要承认自己在编程方面是优秀的，但永远有人比自己更优秀，对于其它的领域，很可能自己很无知。要知道，其实程序员的选择其实是最少的，因此抱有开放的心态是最重要的。</p><ul><li>大量的实践，要慢慢培养对产品，对商业的感觉。</li><li>调整心态，接受不同方向人员的心声，了解他们的诉求。</li><li>资源配置的收益，远大于亲手去写每一个行代码</li></ul><hr><p>作者：北漂周<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/yzzst/article/details/68941791">https://blog.csdn.net/yzzst/article/details/68941791</a></p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>群辉挂载NFS方法</title>
    <link href="/read/83.html"/>
    <url>/read/83.html</url>
    
    <content type="html"><![CDATA[<p>自留保存一下，以免忘记</p><span id="more"></span><p>参考链接<br><a href="https://post.smzdm.com/p/632220/">https://post.smzdm.com/p/632220/</a><br><a href="https://blog.bbzhh.com/index.php/archives/110.html">https://blog.bbzhh.com/index.php/archives/110.html</a></p><p>群晖5.2版本下的busybox只支持NFS3.0协议，所以我们首先要下载新版的busybox来支持NFS4.1。官网适合于群晖5.2版本的文件名是busybox-x86_64。<a href="https://busybox.net/downloads/binaries/1.26.2-defconfig-multiarch/busybox-x86_64" title="官网busybox-x86_64下载地址">官网busybox-x86_64下载地址</a></p><p>开机自启路径<br><code>/usr/syno/etc.defaults/rc.d/S99mount.sh</code></p><p>挂载参数</p><pre><code>/bin/busybox-x86_64 mount -t nfs -o hard,vers=4.1 10.1.2.3:/files /volume1/共享/files/bin/busybox-x86_64 mount -t nfs -o hard,vers=4.1 10.1.2.3:/photo /volume1/photo/bin/busybox-x86_64 mount -t nfs -o hard,vers=4.1 10.1.2.3:/video /volume1/video</code></pre>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>电信家庭云上行提速 20M</title>
    <link href="/read/82.html"/>
    <url>/read/82.html</url>
    
    <content type="html"><![CDATA[<p>电信家庭云APP可以在APP内上传文件的时候临时提升上传带宽为20M，网上已经有大神搞到路由器上了，由于我没有相关的路由器，也对base不熟悉，但是我有一台ESXI :wink: 所以用易语言写了个加速器，虚拟了一个XP来运行，能加速成功，不知道后续，我没有付费，稳定运行了几十分钟了。</p><p><img src="https://static.cuojue.org/blog/files/2018/01/1790431306.jpg"></p><p><img src="https://static.cuojue.org/blog/files/2018/01/3548461026.png"></p><p>漏洞分析：由于电信服务器没有验证Signature和当前时间对应，获取到一次Signature之后可以反复使用。</p><p>更新（2018-1-15）：用了一天之后，失效了，不返回提速SN，花了15买了一个月才可以继续运行……</p><p>ps:秒和分钟写错了，请无视。</p><p>参考：<a href="http://rt.cn2k.net/?p=389">http://rt.cn2k.net/?p=389</a></p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>利用haporxy为ss打造高可用服务</title>
    <link href="/read/haporxy_for_ss.html"/>
    <url>/read/haporxy_for_ss.html</url>
    
    <content type="html"><![CDATA[<p>网络毕竟有不可用的情况,所以可以用多台ss服务器做负载均衡或者故障切换</p><p>###1.编译一个haporxy</p><hr><p>ps:我这是在centos上编译的,如果需要交叉编译到arm平台,可以参考我上篇文章<a href="https://cuojue.org/read/build_ssr_for_arm.html">https://cuojue.org/read/build_ssr_for_arm.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/haproxy<br>git <span class="hljs-built_in">clone</span> https://github.com/haproxy/haproxy.git<br><span class="hljs-built_in">cd</span> haproxy<br>make TARGET=linux2628<br>make install<br></code></pre></td></tr></table></figure><p>###2.创建配置文件</p><hr><p>由于haporxy的后端服务器需要IP来访问,而我的服务商都是用域名来分配ss服务器的,所以写个脚本自动解析,然后生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>rm -rf /home/shadowsocks/ss-json/haproxy.cfg<br><br>cat &gt; /home/shadowsocks/ss-json/haproxy.cfg &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">global</span><br><span class="hljs-string">    log         127.0.0.1 local2</span><br><span class="hljs-string">    chroot      /usr/local/sbin #当前工作目录</span><br><span class="hljs-string">    pidfile     /tmp/haproxy.pid</span><br><span class="hljs-string">    maxconn     4096</span><br><span class="hljs-string">    user        root</span><br><span class="hljs-string">    daemon #守护模式运行</span><br><span class="hljs-string">    nbproc 4    #启动4个ha-proxy实例</span><br><span class="hljs-string"></span><br><span class="hljs-string">defaults</span><br><span class="hljs-string">    mode                    tcp    #TCP模式</span><br><span class="hljs-string">    log                     global</span><br><span class="hljs-string">    option                  dontlognull</span><br><span class="hljs-string">    option tcplog</span><br><span class="hljs-string">    option http-server-close</span><br><span class="hljs-string">    option                  redispatch</span><br><span class="hljs-string">    retries                 2</span><br><span class="hljs-string">    timeout http-request    10s</span><br><span class="hljs-string">    timeout queue           1m</span><br><span class="hljs-string">    timeout connect         2s     #上游TCP服务器连接等待时间</span><br><span class="hljs-string">    timeout client          1m</span><br><span class="hljs-string">    timeout server          1m</span><br><span class="hljs-string">    timeout http-keep-alive 10s</span><br><span class="hljs-string">    timeout check           10s</span><br><span class="hljs-string">    maxconn                 2000 #最大连接数</span><br><span class="hljs-string">    balance source        #负载均衡算法，roundrobin表示轮询，source表示按照IP故障切换</span><br><span class="hljs-string"></span><br><span class="hljs-string">listen shadowsocks</span><br><span class="hljs-string">    bind 0.0.0.0:1234       #haproxy监听端口</span><br><span class="hljs-string">    mode tcp</span><br><span class="hljs-string">EOF</span><br>serverip=`nslookup ss1.ss.com 114.114.114.114 | sed <span class="hljs-string">&#x27;1,4d&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | grep -v :|awk <span class="hljs-string">&#x27;NR==2&#123;print&#125;&#x27;</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;server s1 &quot;</span><span class="hljs-variable">$serverip</span><span class="hljs-string">&quot;:1234 #ss1.ss.com&quot;</span>  &gt;&gt; /home/shadowsocks/ss-json/haproxy.cfg<br><br>serverip=`nslookup ss2.ss.com 114.114.114.114 | sed <span class="hljs-string">&#x27;1,4d&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | grep -v :|awk <span class="hljs-string">&#x27;NR==2&#123;print&#125;&#x27;</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;server s2 &quot;</span><span class="hljs-variable">$serverip</span><span class="hljs-string">&quot;:1234 #ss2.ss.com&quot;</span>  &gt;&gt; /home/shadowsocks/ss-json/haproxy.cfg<br><br>serverip=`nslookup ss3.ss.com 114.114.114.114 | sed <span class="hljs-string">&#x27;1,4d&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | grep -v :|awk <span class="hljs-string">&#x27;NR==2&#123;print&#125;&#x27;</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;server s3 &quot;</span><span class="hljs-variable">$serverip</span><span class="hljs-string">&quot;:1234 #ss3.ss.com&quot;</span>  &gt;&gt; /home/shadowsocks/ss-json/haproxy.cfg<br><br></code></pre></td></tr></table></figure><p>###3.开始运行</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">haproxy -f /home/shadowsocks/ss-json/haproxy.cfg<br></code></pre></td></tr></table></figure><p>没有出现错误就是正在运行了</p><p>路由上把ss的服务器端口设置为haproxy绑定的端口,其他配置不变</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/jffs/shadowsocks/ss-redir -c /jffs/shadowsocks/shadowsocks.json -s 我centos的ip -p 1234 -l 8888 -f /tmp/ss1.pid<br></code></pre></td></tr></table></figure><p>测试成功就有了故障自动切换的ss服务啦<del>科学上网更稳定</del></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>交叉编译ARM版(R7000路由器)SSR-libev客户端/服务器端</title>
    <link href="/read/build_ssr_for_arm.html"/>
    <url>/read/build_ssr_for_arm.html</url>
    
    <content type="html"><![CDATA[<p>###1.搭建编译环境<br>我的编译系统是centos7<br>首先下载工具链<br><a href="ftp://downloads.netgear.com/files/GPL/R6250-V1.0.0.62_with_toolchain_source.zip" title="R6250-V1.0.0.62_with_toolchain_source.zip">R6250-V1.0.0.62_with_toolchain_source.zip</a><br>只需要里面的<code>hndtools-arm-linux-2.6.36-uclibc-4.5.3.tar.bz2</code>工具链包,R7000通用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/R7000<br>tar jxvf hndtools-arm-linux-2.6.36-uclibc-4.5.3.tar.bz2<br>sudo ln -s /home/R7000/hndtools-arm-linux-2.6.36-uclibc-4.5.3 /opt/brcm-arm<br><br>yum install libelf.so.1 libz.so.1 asciidoc xmlto<br></code></pre></td></tr></table></figure><p>###2.下载源码包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://tls.mbed.org/download/mbedtls-2.4.0-apache.tgz<br>tar zxvf mbedtls-2.4.0-apache.tgz<br>mkdir mbedtls<br><br>wget https://downloads.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gz<br>tar zxvf zlib-1.2.11.tar.gz<br>mkdir zlib<br><br>wget https://downloads.sourceforge.net/projects/pcre/files/pcre/8.39/pcre-8.39.tar.gz<br>tar zxvf pcre-8.39.tar.gz<br>mkdir pcre<br><br>git <span class="hljs-built_in">clone</span> https://github.com/shadowsocksr/shadowsocksr-libev.git<br>mkdir ss<br></code></pre></td></tr></table></figure><p>###3.添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/opt/brcm-arm/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$&#123;LD_LIBRARY_PATH&#125;</span>:/opt/brcm-arm/lib:/usr/<span class="hljs-built_in">local</span>/lib:/usr/lib<br><span class="hljs-built_in">export</span> CC=arm-uclibc-linux-2.6.36-gcc<br><span class="hljs-built_in">export</span> CXX=arm-uclibc-linux-2.6.36-g++<br><span class="hljs-built_in">export</span> AR=arm-uclibc-linux-2.6.36-ar<br><span class="hljs-built_in">export</span> RANLIB=arm-uclibc-linux-2.6.36-ranlib<br></code></pre></td></tr></table></figure><p>###4.开始编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> mbedtls-2.4.0-apache<br>vi Makefile<span class="hljs-comment">#修改第二行为DESTDIR=/home/R7000/mbedtls</span><br>make &amp;&amp; make install<br><br><span class="hljs-built_in">cd</span> ../<br><span class="hljs-built_in">cd</span> zlib-1.2.11<br>./configure --prefix=/home/R7000/zlib<br>make &amp;&amp; make install<br><br><span class="hljs-built_in">cd</span> ../<br><span class="hljs-built_in">cd</span> pcre-8.39<br>./configure --prefix=/home/R7000/pcre --host=arm-uclibc-linux<br><br><br><span class="hljs-built_in">cd</span> shadowsocksr-libev<br>./configure --prefix=/home/R7000/ss --with-mbedtls=/home/R7000/mbedtls --with-zlib=/home/R7000/zlib --with-pcre=/home/R7000/pcre --host=arm-uclibc-linux --with-crypto-library=mbedtls --disable-ssp<br>make &amp;&amp; make install<br><br><span class="hljs-built_in">cd</span> /home/R7000/ss/bin<br>arm-uclibc-strip ss-local ss-manager ss-redir ss-server ss-tunnel<br></code></pre></td></tr></table></figure><p>###5.开始测试<br>copy到/jffs/shadowsocks</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@R7000:/jffs/ssserver<span class="hljs-comment"># /jffs/shadowsocks/ss-redir -v</span><br><br>shadowsocks-libev 2.5.6 with mbed TLS 2.4.0<br><br>  maintained by Max Lv &lt;max.c.lv@gmail.com&gt; and Linus Yang &lt;laokongzi@gmail.com&gt;<br><br>  usage:<br><br>    ss-redir<br><br>       -s &lt;server_host&gt;           Host name or IP address of your remote server.<br>       -p &lt;server_port&gt;           Port number of your remote server.<br>       -l &lt;local_port&gt;            Port number of your <span class="hljs-built_in">local</span> server.<br>       -k &lt;password&gt;              Password of your remote server.<br>       -m &lt;encrypt_method&gt;        Encrypt method: table, rc4, rc4-md5,<br>                                  aes-128-cfb, aes-192-cfb, aes-256-cfb,<br>                                  aes-128-ctr, aes-192-ctr, aes-256-ctr,<br>                                  bf-cfb, camellia-128-cfb, camellia-192-cfb,<br>                                  camellia-256-cfb, cast5-cfb, des-cfb,<br>                                  idea-cfb, rc2-cfb, seed-cfb, salsa20,<br>                                  chacha20 and chacha20-ietf.<br>                                  The default cipher is rc4-md5.<br><br>       [-a &lt;user&gt;]                Run as another user.<br>       [-f &lt;pid_file&gt;]            The file path to store pid.<br>       [-t &lt;timeout&gt;]             Socket timeout <span class="hljs-keyword">in</span> seconds.<br>       [-c &lt;config_file&gt;]         The path to config file.<br>       [-n &lt;number&gt;]              Max number of open files.<br>       [-b &lt;local_address&gt;]       Local address to <span class="hljs-built_in">bind</span>.<br><br>       [-u]                       Enable UDP relay.<br>                                  TPROXY is required <span class="hljs-keyword">in</span> redir mode.<br>       [-U]                       Enable UDP relay and <span class="hljs-built_in">disable</span> TCP relay.<br>       [-A]                       Enable onetime authentication.<br><br>       [--mtu &lt;MTU&gt;]              MTU of your network interface.<br>       [--mptcp]                  Enable Multipath TCP on MPTCP Kernel.<br><br>       [-v]                       Verbose mode.<br>       [-h, --<span class="hljs-built_in">help</span>]               Print this message.<br></code></pre></td></tr></table></figure><p>收工,交叉编译第一次练手</p><p>参考资料:<br><a href="http://www.jianshu.com/p/b1a8443dbe5f">http://www.jianshu.com/p/b1a8443dbe5f</a><br><a href="http://blog.csdn.net/bunny27/article/details/50589452">http://blog.csdn.net/bunny27/article/details/50589452</a> (原文已删)<br><a href="http://ahui.us/post/netgear-r6300v2-ngrep.html">http://ahui.us/post/netgear-r6300v2-ngrep.html</a><br><a href="http://www.cnblogs.com/jackyshan/p/5985590.html">http://www.cnblogs.com/jackyshan/p/5985590.html</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浅谈一下ssr免流的实现方式</title>
    <link href="/read/ssr_free_traffic.html"/>
    <url>/read/ssr_free_traffic.html</url>
    
    <content type="html"><![CDATA[<p>免流,就是使用流量不计费<br>如何让运营商不计费呢,那就是利用运营商本身的免费项目来达到我们的目的.<br>比如一些基本的端口都是不计费的,比如53(DNS解析),138(NetBIOS)…<br>另外比如运营商的官方网站(10086.cn/10010.com/189.cn)等…<br>免流就是利用运营商网关检测流量的去向/端口来欺骗运营商,让运营商认为我们的流量是免费部分.</p><hr><p>前面讲了用OPENVPN来实现免流<br><a href="https://cuojue.org/read/OpenVPN_Free_Traffic.html">https://cuojue.org/read/OpenVPN_Free_Traffic.html</a><br>最近不给力了,发现SS的分之SSR更适合</p><hr><p>如何让SSR(s-h-a-d-o-w-socks-R)来实现免流呢.<br>当然这个软件的初衷是为了自由的访问互联网.<br>ssr提供了很多加密参数的选择和混淆插件.<br>我们就取用http_simple这款插件,来把流量模拟成普通HTTP协议访问,对向是运营商的网站,然后运营商就认为这是普通的HTTP访问自己的网站,免费!(因为网关不知道这是我们模拟的访问)<br><img src="https://static.cuojue.org/blog/files/2017/01/895444671.png"><br>ss作为中间代理,封装用户数据包,加密,混淆后,发往远端ss服务器,服务器解密后,把数据包发往它原本要去的地方.<br>http_simple插件就是把封装好的数据包,添加http协议头,修改host为运营商免流量费的地址,让运营商网关认为该流量免费.</p>]]></content>
    
    
    <categories>
      
      <category>默认分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建一个自己的ssr前后端</title>
    <link href="/read/build_ss_panel.html"/>
    <url>/read/build_ss_panel.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>搭建这个服务纯粹是为了,免那啥流,加之自家网络已经进入自由的Intelnet,免那啥流的同时,手机也可以自由进入”互联网”.毕竟家里放一台Gen8也是要吃电费的,不用白不用</p></blockquote><hr><p>###前端安装</p><p>（本文的演示环境为CentOS 7.3.1611）</p><p>首先也是安装军哥的lnmp(好东西,方便不少!)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://soft.vpser.net/lnmp/lnmp1.3-full.tar.gz<br>tar xvzf lnmp1.3-full.tar.gz<br><span class="hljs-built_in">cd</span> lnmp1.3-full<br>./install.sh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lnmp vhost add<br></code></pre></td></tr></table></figure><p>先用这个命令先创建一个网站(本文例ss.cuojue.org)<br>然后，来对 nginx 进行一些细节化配置。</p><p>打开<code>/usr/local/nginx/conf/vhost/ss.cuojue.org.conf</code></p><p>然后添加下面这一段到 server 段</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> / &#123;<br><span class="hljs-attribute">try_files</span> $uri $uri/ /index.php$is_args$args;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时，root那一行改为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">root</span> /home/wwwroot/ss.cuojue.org/public;<br></code></pre></td></tr></table></figure><p>然后下载ss-panel-v3-mod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/wwwroot/ss.cuojue.org<br>yum install git -y<br>git <span class="hljs-built_in">clone</span> https://github.com/glzjin/ss-panel-v3-mod.git tmp &amp;&amp; mv tmp/.git . &amp;&amp; rm -rf tmp &amp;&amp; git reset --hard<br>chown -R root:root *<br>chmod -R 755 *<br>chown -R www:www storage<br><span class="hljs-built_in">cd</span> /home/wwwroot/ss.cuojue.org/<br>chattr -i .user.ini<br>mv .user.ini public<br><span class="hljs-built_in">cd</span> public<br>chattr +i .user.ini<br></code></pre></td></tr></table></figure><p>然后重启一下nginx,虽然是7但是也能用service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service nginx restart<br></code></pre></td></tr></table></figure><p>打开 phpmyadmin ,来配置一下数据库</p><p>创建一个 ss-panel 用户和数据库</p><p>导入程序目录下的 glzjin_all.sql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/wwwroot/ss.cuojue.org<br>cp config/.config.php.example config/.config.php<br></code></pre></td></tr></table></figure><p>然后自己编辑<code>config/.config.php</code>里面的参数</p><p>编辑完毕后用<code>php -n xcat createAdmin</code>来创建管理员账户</p><p>同步账户<code>php xcat syncusers</code></p><p>然后编辑<code>crontab -e</code>添加计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">30 22 * * * php /home/wwwroot/ss.cuojue.org/xcat sendDiaryMail<br>*/1 * * * * php /home/wwwroot/ss.cuojue.org/xcat synclogin<br>*/1 * * * * php /home/wwwroot/ss.cuojue.org/xcat syncvpn<br>0 0 * * * php -n /home/wwwroot/ss.cuojue.org/xcat dailyjob<br>*/1 * * * * php /home/wwwroot/ss.cuojue.org/xcat checkjob    <br>*/1 * * * * php -n /home/wwwroot/ss.cuojue.org/xcat syncnas<br></code></pre></td></tr></table></figure><hr><p>###后端安装</p><p>来自<br>( <a href="https://github.com/esdeathlove/shadowsocks/">https://github.com/esdeathlove/shadowsocks/</a> )的py版后端</p><p>1.请安装 git 等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install python-setuptools &amp;&amp; easy_install pip<br>yum install git<br></code></pre></td></tr></table></figure><p>2.请安装 libsodium</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y groupinstall <span class="hljs-string">&quot;Development Tools&quot;</span><br>wget https://github.com/jedisct1/libsodium/releases/download/1.0.10/libsodium-1.0.10.tar.gz<br>tar xf libsodium-1.0.10.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> libsodium-1.0.10<br>./configure &amp;&amp; make -j2 &amp;&amp; make install<br><span class="hljs-built_in">echo</span> /usr/<span class="hljs-built_in">local</span>/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf<br>ldconfig<br></code></pre></td></tr></table></figure><p>（如果提示cannot import name OrderedDict，可能需要给服务器打补丁：第三方插件ordereddict<br><code>easy_install ordereddict</code>）</p><p>3.安装 cymysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install cymysql<br></code></pre></td></tr></table></figure><p>4.下载程序源代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b manyuser https://github.com/glzjin/shadowsocks.git<br></code></pre></td></tr></table></figure><p>5.配置程序</p><p>先得到你的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> shadowsocks<br>cp apiconfig.py userapiconfig.py<br>cp config.json user-config.json<br></code></pre></td></tr></table></figure><p>然后主要编辑<code>userapiconfig.py</code> ,来解释下里面各项配置的意思</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Config</span><br><br><span class="hljs-comment">#节点ID,这里填写后台创建服务产生的ID</span><br><br><span class="hljs-attr">NODE_ID</span> = <span class="hljs-number">1</span><br><br><span class="hljs-comment">#自动化测速，为0不测试，此处以小时为单位，要和 ss-panel 设置的小时数一致</span><br><br><span class="hljs-attr">SPEEDTEST</span> = <span class="hljs-number">6</span><br><br><span class="hljs-comment">#云安全，自动上报与下载封禁IP，1为开启，0为关闭</span><br><br><span class="hljs-attr">CLOUDSAFE</span> = <span class="hljs-number">1</span><br><br><span class="hljs-comment">#自动封禁SS密码和加密方式错误的 IP，1为开启，0为关闭</span><br><br><span class="hljs-attr">ANTISSATTACK</span> = <span class="hljs-number">0</span><br><br><span class="hljs-comment">#是否接受上级下发的命令，如果你要用这个命令，请参考我之前写的东西，公钥放在目录下的 ssshell.asc</span><br><br><span class="hljs-attr">AUTOEXEC</span> = <span class="hljs-number">1</span><br><br><span class="hljs-comment">#是否以多线程模式运行，关闭这个限速就会无效。请优先测试 1 ，开启试试，能运行没。</span><br><br><span class="hljs-attr">MULTI_THREAD</span> = <span class="hljs-number">0</span><br><br><span class="hljs-comment">#多端口单用户设置，看重大更新说明。</span><br><span class="hljs-comment">#MU_SUFFIX = &#x27;zhaoj.in&#x27;</span><br><span class="hljs-comment">#多端口单用户设置，看重大更新说明。</span><br><span class="hljs-comment">#MU_REGEX = &#x27;%5m%id.%suffix&#x27;</span><br><br><br><span class="hljs-comment">#不明觉厉</span><br><span class="hljs-attr">SERVER_PUB_ADDR</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> <span class="hljs-comment"># mujson_mgr need this to generate ssr link</span><br><br><br><span class="hljs-comment">#此处不要修改</span><br><span class="hljs-attr">API_INTERFACE</span> = <span class="hljs-string">&#x27;glzjinmod&#x27;</span> <span class="hljs-comment">#mudbjson, sspanelv2, sspanelv3, sspanelv3ssr, muapiv2(not support)</span><br><br><span class="hljs-comment">#mudb，不要管</span><br><span class="hljs-attr">MUDB_FILE</span> = <span class="hljs-string">&#x27;mudb.json&#x27;</span><br><br><br><span class="hljs-comment"># Mysql 数据库连接信息</span><br><br><span class="hljs-attr">MYSQL_HOST</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br><span class="hljs-attr">MYSQL_PORT</span> = <span class="hljs-number">3306</span><br><span class="hljs-attr">MYSQL_USER</span> = <span class="hljs-string">&#x27;ss&#x27;</span><br><span class="hljs-attr">MYSQL_PASS</span> = <span class="hljs-string">&#x27;ss&#x27;</span><br><span class="hljs-attr">MYSQL_DB</span> = <span class="hljs-string">&#x27;shadowsocks&#x27;</span><br><span class="hljs-attr">MYSQL_UPDATE_TIME</span> = <span class="hljs-number">60</span><br><br><span class="hljs-comment"># 是否启用SSL连接，0为关，1为开</span><br><br><span class="hljs-attr">MYSQL_SSL_ENABLE</span> = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 客户端证书目录，请看 https://github.com/glzjin/shadowsocks/wiki/Mysql-SSL%E9%85%8D%E7%BD%AE</span><br><span class="hljs-attr">MYSQL_SSL_CERT</span> = <span class="hljs-string">&#x27;/root/shadowsocks/client-cert.pem&#x27;</span><br><span class="hljs-attr">MYSQL_SSL_KEY</span> = <span class="hljs-string">&#x27;/root/shadowsocks/client-key.pem&#x27;</span><br><span class="hljs-attr">MYSQL_SSL_CA</span> = <span class="hljs-string">&#x27;/root/shadowsocks/ca.pem&#x27;</span><br><br><span class="hljs-comment"># API，不用管</span><br><br><span class="hljs-attr">API_HOST</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br><span class="hljs-attr">API_PORT</span> = <span class="hljs-number">80</span><br><span class="hljs-attr">API_PATH</span> = <span class="hljs-string">&#x27;/mu/v2/&#x27;</span><br><span class="hljs-attr">API_TOKEN</span> = <span class="hljs-string">&#x27;abcdef&#x27;</span><br><span class="hljs-attr">API_UPDATE_TIME</span> = <span class="hljs-number">60</span><br><br><br><span class="hljs-comment"># Manager 不用管</span><br><span class="hljs-attr">MANAGE_PASS</span> = <span class="hljs-string">&#x27;ss233333333&#x27;</span><br><br><span class="hljs-comment">#if you want manage in other server you should set this value to global ip</span><br><span class="hljs-attr">MANAGE_BIND_IP</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br><br><span class="hljs-comment">#make sure this port is idle</span><br><span class="hljs-attr">MANAGE_PORT</span> = <span class="hljs-number">23333</span><br></code></pre></td></tr></table></figure><p>6.运行的话，有几种方式。</p><ul><li>python server.py 用于调错的</li><li>./run.sh 无日志后台运行</li><li>./logrun.sh 有日志后台运行</li><li>supervisord 守护进程</li></ul><p>####守护进程supervisord的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install supervisor<br>wget https://github.com/glzjin/ssshell-jar/raw/master/supervisord.conf -O /etc/supervisord.conf<br></code></pre></td></tr></table></figure><p>编辑<code>/etc/supervisord.conf</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[program:shadowsocks]</span><br><span class="hljs-attr">command</span>=python /home/shadowsocks/shadowsocks/server.py<br><span class="hljs-attr">autorstart</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">directory</span>=/home/shadowsocks/shadowsocks/<br><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">startsecs</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">startretries</span>=<span class="hljs-number">36</span><br><span class="hljs-attr">redirect_stderr</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>创建一个服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /usr/lib/systemd/system/supervisord.service &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"># supervisord service for sysstemd (CentOS 7.0+)</span><br><span class="hljs-string"># by ET-CS (https://github.com/ET-CS)</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Supervisor daemon</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">Type=forking</span><br><span class="hljs-string">ExecStart=/usr/bin/supervisord</span><br><span class="hljs-string">ExecStop=/usr/bin/supervisorctl $OPTIONS shutdown</span><br><span class="hljs-string">ExecReload=/usr/bin/supervisorctl $OPTIONS reload</span><br><span class="hljs-string">KillMode=process</span><br><span class="hljs-string">Restart=on-failure</span><br><span class="hljs-string">RestartSec=42s</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>然后打开服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> supervisord.service<br></code></pre></td></tr></table></figure><p>参考:<br><a href="https://www.aihoom.cn/845.html">https://www.aihoom.cn/845.html</a><br><a href="https://blessing.studio/build-shadowsocks-sharing-site-with-ss-panel/">https://blessing.studio/build-shadowsocks-sharing-site-with-ss-panel/</a><br><a href="http://www.right.com.cn/forum/thread-198249-1-1.html">http://www.right.com.cn/forum/thread-198249-1-1.html</a><br><a href="http://www.th7.cn/Program/Python/201603/772451.shtml">http://www.th7.cn/Program/Python/201603/772451.shtml</a><br><a href="https://segmentfault.com/q/1010000004291599">https://segmentfault.com/q/1010000004291599</a><br><a href="https://github.com/esdeathlove/shadowsocks/wiki/%E8%AF%B4%E6%98%8E%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95">https://github.com/esdeathlove/shadowsocks/wiki/说明以及安装方法</a></p><p>搭建完成地址:<br><a href="https://ss.cuojue.org/">https://ss.cuojue.org</a></p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ESXi加UPS断电自动关机脚本</title>
    <link href="/read/esxi_apc_ups.html"/>
    <url>/read/esxi_apc_ups.html</url>
    
    <content type="html"><![CDATA[<p>被电力局搞怕了,随时都可以停电,并且没有通知!今年已经好几次了!<br>怀疑我的硬盘就是这样坏的.<br>随后败了一台UPS,APC的BX550CI-CN,就这个样子<br><img src="https://static.cuojue.org/blog/files/2017/01/3542904706.jpg"><br>没有USB接口,服务器不能知晓是否UPS在供电(就算有,ESXi也用不上,尴尬)</p><p>写了一个小脚本,让ESXi来ping网关(路由器,插市电),如果网关3分钟都是失联状态,就判断停电了,自动执行关机命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-keyword">while</span><br>ping -c 1 10.1.1.1 &gt; /dev/null<br>[ $? -eq 0 ];<br><span class="hljs-keyword">do</span><br><span class="hljs-comment">#echo &#x27; AC Power OK ! &#x27; &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;date &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log</span><br>sleep 180<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27; AC Power maybe off, checking again after 3 minutes ! &#x27;</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;date &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log<br>sleep 60<br>ping -c 1 10.1.1.1 &gt; /dev/null<br><span class="hljs-keyword">if</span> [ $? -eq 0 ]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27; Checkagain, AC Power OK ! &#x27;</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;date &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27; AC Power is already off, shut down NAS Now! &#x27;</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;date &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log<br>/bin/shutdown.sh<br>halt<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>以上代码保存成<code>apc.sh</code>放到<code>/vmfs/volumes/磁盘名/ups/</code>目录下,目录下同时创建<code>ups.log</code>空白日志文件</p><p>然后再写一个守护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><br><span class="hljs-comment">#    用ps获取ups进程数量</span><br>NUM=`ps -c | grep apc.sh | grep -v grep |wc -l`<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;NUM&#125;</span><br><span class="hljs-comment">#    少于1，重启进程</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;NUM&#125;</span>&quot;</span> -lt <span class="hljs-string">&quot;1&quot;</span> ];<span class="hljs-keyword">then</span><br>/vmfs/volumes/磁盘名/ups/apc.sh &amp;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27; UPS shouhu start&#x27;</span> &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log;date &gt;&gt; /vmfs/volumes/磁盘名/ups/ups.log<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>守护脚本保存成<code>ups_shouhu.sh</code>也放到<code>/vmfs/volumes/磁盘名/ups/</code>目录下</p><p>然后添加一个计划任务,每三分钟执行守护脚本<br>由于ESXi重启会重置计划任务的内容,所以添加到启动</p><p>在<code>/etc/rc.local.d/local.sh</code>文件里添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/<span class="hljs-built_in">kill</span> $(cat /var/run/crond.pid)<br>/bin/<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;*/3    *    *   *   *   /vmfs/volumes/磁盘名/ups/ups_shouhu.sh&#x27;</span> &gt;&gt; /var/spool/cron/crontabs/root<br>/bin/crond<br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>然后就有了一台会自动关机的GEN8了,麻麻再也不用担心异常停电了~</p><p>—————华丽的分割线—————<br>下面记录一下自动开机,如果路由器发现服务器不在线,就执行wol唤醒服务器</p><p>路由器创建一个计划任务,每三分钟执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Power for Gen8</span><br>ping -c 10 -w 10.1.1.2 &gt; /dev/null<br>ret=$?<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$ret</span> -ne 0 ]<br><span class="hljs-keyword">then</span><br>ether-wake XX:XX:XX:XX:XX:XX<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>自动关机,自动开机,都搞定:smile:</p><p>参考了不少大神的代码,我都忘记来源了,没办法一一列上,见谅</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
      <category>代码分享</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>西数红盘的质量与HPE的服务</title>
    <link href="/read/wd_disk_hpe_services.html"/>
    <url>/read/wd_disk_hpe_services.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>黑东618买的两块特价4T红盘,当时就有一块回家了,现在另外一块还是没撑住,又挂了:roll:<br>黑东服务还是不错的,这次退回去,二话没说,直接换新,第三天就给送来了.</p></blockquote><p>#####谈谈HPE的服务</p><blockquote><p>上半年败了一台GEN8的小服务器,在HPE的官网注册了,留了信息,需要一个公司名字,就随便写了一个(随便起的公司名字,之前用过的网名)</p></blockquote><p>某晚上22点多,接到一个陌生电话,问我是不是某某某公司的某工,我愣了一下,第一感觉是不是骗子电话,就说不是啊,然后对方啪挂了电话,我也就没放在心上.<br>然后过了一会出房喝水,发现客厅GEN8在闪黄灯,我曹,出现故障了?立马上ilo看下情况,玛德硬盘挂了一块.</p><p><img src="https://static.cuojue.org/blog/files/2017/01/1546672625.jpg"></p><p>回过神来,原来刚才的电话是HPE打来的,不过这服务也太不专业了,问题都没讲,要是先说我服务器出现故障了,那我可能就明白了嘛.:?:</p><p>还好两块4T做了RAID1,大姐姐们都没丢:wink:</p><p>第二天HPE又来一个电话,这次对面帅哥就很懂了,开口就问您是否有一台GEN8的服务器,出现了硬盘故障,巴拉巴拉的~~~</p><p>直接申请京东售后,第二天就很果断的发回了一块新盘</p><p><img src="https://static.cuojue.org/blog/files/2017/01/1216318268.png"></p><p>RAID重建几个小时后,黄灯闪烁变蓝灯常亮,ilo故障消除,但是硬盘读写灯持续亮了一天左右</p><p>本次换硬盘是系统层无感知的,拔掉硬盘的时候服务器继续运行,RAID同步的时候服务器也是继续运行的.终于体验到了RAID的便捷</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ESXI重新挂载磁盘</title>
    <link href="/read/esxi_disk.html"/>
    <url>/read/esxi_disk.html</url>
    
    <content type="html"><![CDATA[<p>　　京东618活动,在京东买了两块999-30的西数红盘4T塞到HP Gen8里面去了,结果竟然有一块是坏的,掉盘,在ESXI复制文件的过程中直接磁盘丢失,刷新不出来,在ILO里面也是严重错误…:mad:</p><p><img src="https://static.cuojue.org/blog/files/2016/06/50272890.png"></p><p><img src="https://static.cuojue.org/blog/files/2016/06/4023885437.jpg"></p><p>　　遇到这情况,当然是找京东换一块啦.当我拆掉硬盘的之后,进ESXI,什么情况,所有磁盘都丢失了…一块都没了,设备里面也没了.:neutral:</p><p>　　进RAID界面看到一条错误,说是磁盘丢失,然后所有磁盘都从RAID0状态(我是用的RAID模式,单块RAID0的)变成未初始化了.:wink:嗯,这简单,重新初始化一遍咯,资料是不会丢的.</p><p>(此处忘记截图)</p><p>　　初始化完毕后进ESXI,嗯?怎么数据储存还是没有内容呢?:cry:切换到设备看了一下,硬盘都认到了呀,不对,怎么编号变化了…</p><p><img src="https://static.cuojue.org/blog/files/2016/06/898692177.jpg"></p><p>　　没事,我们重新添加一下磁盘:shock:,结果,你TM在逗我?重新添加要删掉重新格式化!!!</p><p>　　那我们只能进SSH看能否手动挂载了</p><p>　　打开主机SSH,进SSH,输入</p><pre><code>  esxcfg-volume -l  </code></pre><p>　　会显示当前磁盘信息,记住UUID下面用的都是UUID.</p><p><img src="https://static.cuojue.org/blog/files/2016/06/2370386291.jpg"></p><p>　　先小试一下没有重要内容的磁盘</p><p><del>esxcfg-volume -m xxxxxxxxxxxxxxxxxxxx #uuid或者lable都可以</del><br>[更新(2016-06-17 21:27:49):<br><code>-m</code>参数是临时挂载,重启后会丢失,应该使用<code>-r</code>参数注册,注册成功后会随机命名成<code>snap-xxx-原盘符</code>这样的盘符名称,自行修改即可]</p><pre><code>esxcfg-volume -r xxxxxxxxxxxxxxxxxxxx #uuid或者lable都可以~~</code></pre><p><img src="https://static.cuojue.org/blog/files/2016/06/406757724.jpg"></p><p>　　嗯,内容都在,下面都添加上去把</p><p><img src="https://static.cuojue.org/blog/files/2016/06/1996069733.jpg"></p><p><img src="https://static.cuojue.org/blog/files/2016/06/4051117479.jpg"></p><p>就这样,大姐姐的集体宿舍又回来了~</p>]]></content>
    
    
    <categories>
      
      <category>闲言碎语</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自行搭建高大上的手机终端OpenVPN免流</title>
    <link href="/read/OpenVPN_Free_Traffic.html"/>
    <url>/read/OpenVPN_Free_Traffic.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>一直在听大家谈论免流免流,原来一直没明白,具体看了下原来是修改头信息,让运营商服务器认为你是在访问部分免流的服务器(手机营业厅之类的),修改之后,访问正常网络也不会计费,但是局限于终端服务器的上行网速</p></blockquote><h3 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h3><p>CentOS6.X<br>为什么说我推荐,因为我只会用CentOS,来打我呀<br>上行带宽最少也得有个4M吧,我用的家用宽带配置的,哈哈哈:shock:</p><h2 id="搭建OpenVPN环境"><a href="#搭建OpenVPN环境" class="headerlink" title="搭建OpenVPN环境"></a>搭建OpenVPN环境</h2><h4 id="1-更新系统"><a href="#1-更新系统" class="headerlink" title="1.更新系统"></a>1.更新系统</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br></code></pre></td></tr></table></figure><h4 id="2-修改防火墙配置"><a href="#2-修改防火墙配置" class="headerlink" title="2.修改防火墙配置"></a>2.修改防火墙配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -F<br>service iptables save<br>service iptables restart<br>iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE<br>iptables -A INPUT -p TCP --dport 34567 -j ACCEPT  #OpenVPN服务端口，可自定义，不可冲突<br>iptables -A INPUT -p TCP --dport 85 -j ACCEPT  #squid转发端口，可自定义（代理端口）<br>iptables -A INPUT -p TCP --dport 22 -j ACCEPT<br>iptables -t nat -A POSTROUTING -j MASQUERADE<br>iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<br>service iptables save<br>service iptables restart<br></code></pre></td></tr></table></figure><h4 id="3-关闭SElinux"><a href="#3-关闭SElinux" class="headerlink" title="3.关闭SElinux"></a>3.关闭SElinux</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">setenforce 0<br></code></pre></td></tr></table></figure><h4 id="4-开启路由转发"><a href="#4-开启路由转发" class="headerlink" title="4.开启路由转发"></a>4.开启路由转发</h4><p>vi /etc/sysctl.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net.ipv4.ip_forward = 1 <span class="hljs-comment">#(默认为0，修改成1 表示开启路由转发，如果默认是空内容，请自行加上)</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysctl -p<br></code></pre></td></tr></table></figure><h4 id="5-安装squid和OpenVPN"><a href="#5-安装squid和OpenVPN" class="headerlink" title="5.安装squid和OpenVPN"></a>5.安装squid和OpenVPN</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y wget squid openssl openssl-devel lzo lzo-devel pam pam-devel automake pkgconfig openvpn<br></code></pre></td></tr></table></figure><h2 id="配置OpenVPN"><a href="#配置OpenVPN" class="headerlink" title="配置OpenVPN"></a>配置OpenVPN</h2><h4 id="1-配置VPN服务端"><a href="#1-配置VPN服务端" class="headerlink" title="1. 配置VPN服务端"></a>1. 配置VPN服务端</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/openvpn/<br>wget https://static.cuojue.org/static/down/openvpn/server.conf<br>chmod 0755 ./*.conf<br></code></pre></td></tr></table></figure><h4 id="2-制作OpenVPN证书"><a href="#2-制作OpenVPN证书" class="headerlink" title="2.制作OpenVPN证书"></a>2.制作OpenVPN证书</h4><p>这里我是在本地电脑上制作的,当然你也可以直接在服务器生成<br>在官方下载OpenVPN Win版本的客户端<br><a href="https://openvpn.net/index.php/download/community-downloads.html">https://openvpn.net/index.php/download/community-downloads.html</a><br>(安装的时候把所有可选的都选择上安装,不然后面没有easy-ras目录)<br>OpenVPN装好后，点开始 → 所有程序 → 附件 → 命令提示符，右击“以管理员权限运行”，并将操作目录切换至C:\Program Files\OpenVPN\easy-rsa<br>(Win8 Win10 右键左下角 命令提示符(管理员))<br>然后输入<code>init-config</code>,等命令完成后,至C:\Program Files\OpenVPN\easy-rsa目录用文本编辑器打开 vars.bat 这个批处理文件。<br>以下是我编辑好的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">@echo off<br>rem Edit this variable to point to<br>rem the openssl.cnf file included<br>rem with easy-rsa.<br><br>set HOME=%ProgramFiles%\OpenVPN\easy-rsa<br>set KEY_CONFIG=openssl-1.0.0.cnf<br><br>rem Edit this variable to point to<br>rem your soon-to-be-created key<br>rem directory.<br>rem<br>rem WARNING: clean-all will do<br>rem a rm -rf on this directory<br>rem so make sure you define<br>rem it correctly!<br>set KEY_DIR=d:\openvpnkeys<br><br>rem Increase this to 2048 if you<br>rem are paranoid.  This will slow<br>rem down TLS negotiation performance<br>rem as well as the one-time DH parms<br>rem generation process.<br>set KEY_SIZE=2048<br><br>rem These are the default values for fields<br>rem which will be placed in the certificate.<br>rem Change these to reflect your site.<br>rem Don&#x27;t leave any of these parms blank.<br><br>set KEY_COUNTRY=CN<br>set KEY_PROVINCE=SH<br>set KEY_CITY=ShangHai<br>set KEY_ORG=OpenVPN<br>set KEY_EMAIL=blog@cuojue.org<br>set KEY_CN=OpenVPN-CA<br>set KEY_NAME=OpenVPN<br>set KEY_OU=OpenVPN<br>set PKCS11_MODULE_PATH=changeme<br>set PKCS11_PIN=1234<br></code></pre></td></tr></table></figure><p>在“命令提示符”里面依次输入<code>vars</code>、<code>clean-all</code>、<code>build-ca</code>生成主证书颁发机构所需的证书及密钥</p><p>输入 <code>build-key-server server</code> 生成服务证书及密钥</p><p>输入 <code>build-key client1</code> 生成客户端1的证书及密钥，若想生成多个客户端证书，将client1后面的1改成2，也可以改成自己想要的客户端名字，以此类推。<br>(这里说一下,生成客户端密钥的时候,Common Name最好设置一下不同的,不然下面可能提示没找到.old文件)</p><p>输入 <code>build-dh</code> 生成迪菲赫尔曼参数</p><p>此时 <code>D:\openvpnkeys</code> 文件夹里面已经生成我们所需的所有证书及密钥文件了。但真正用到的只有四个文件，分别为：证书颁发机构（<code>ca.crt</code>）、服务器证书（<code>server.crt</code>）、服务器密钥（<code>server.key</code>）及迪菲赫尔曼参数（<code>dh1024.pem</code>）</p><p>我们把<code>ca.crt</code>,<code>server.crt</code>,<code>server.key</code>,<code>dh2048.pem</code>复制到服务器的<code>/home/openvpn/keys/</code>目录下,没有就新建一个目录</p><p>然后启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service openvpn start<br></code></pre></td></tr></table></figure><h4 id="3-配置squid代理"><a href="#3-配置squid代理" class="headerlink" title="3.配置squid代理"></a>3.配置squid代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/squid/<br>rm -f ./squid.conf<br>wget https://static.cuojue.org/static/down/squid/squid.conf<br>chmod 0755 /etc/squid/squid.conf<br>squid -z<br>squid -s<br></code></pre></td></tr></table></figure><h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><h4 id="1-下载一个OpenVPN"><a href="#1-下载一个OpenVPN" class="headerlink" title="1.下载一个OpenVPN"></a>1.下载一个OpenVPN</h4><p>苹果在中国区已经下架了OpenVPN,需要注册一个美区或者日区的账户下载,这里不提供,自己在网上找吧<br>安卓的就不用说了,应该很好找到</p><h4 id="2-配置ovpn文件"><a href="#2-配置ovpn文件" class="headerlink" title="2.配置ovpn文件"></a>2.配置ovpn文件</h4><p>下载模板(这里是电信的免流,需要开爱玩4G定向包)<a href="https://static.cuojue.org/static/down/openvpn/chinanet.ovpn">点击下载</a><br>用文本编辑器(我用的editplus)打开ovpn文件,修改里面的<code>你的服务器IP或者域名</code>为你自己的服务器IP或者域名<br>修改<code>CA证书复制到这里</code>为CA证书内容<code>ca.crt</code><br>修改<code>客户端证书复制到这里</code>为客户端证书<code>client1.crt</code><br>修改<code>客户端密钥复制到这里</code>为客户端密钥<code>client.key</code></p><p>注1:只需要复制<code>-----BEGIN CERTIFICATE-----</code>(包含)到<code>-----END CERTIFICATE-----</code>之间的内容<br>注2:这个免流配置只能在手机上用,电脑上无法链接</p><p>ovpn文件编辑好之后,可以从QQ发到手机,然后选择OpenVPN打开,或者直接连iTunes复制进去</p><p>然后打开OpenVpn程序,应该就可以连接上了</p><p>电信测试免流可以在网上营业厅查询详情,如果显示的是爱玩流量,证明免流成功~!:wink:</p><p>参考:<br><a href="http://www.iwzh.cn/211.html">http://www.iwzh.cn/211.html</a><br><a href="http://www.right.com.cn/forum/thread-113709-1-1.html">http://www.right.com.cn/forum/thread-113709-1-1.html</a><br><a href="http://www.sbwml.cn/">http://www.sbwml.cn</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastcgi_cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为Typecho启用Google Authenticator两步验证</title>
    <link href="/read/Typecho_Google_Authenticator.html"/>
    <url>/read/Typecho_Google_Authenticator.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>看到好多网站都支持Google Authenticator的两步验证，所以写了这个小插件，参考了很多前辈写的插件。</p></blockquote><p>Google Authenticator的PHP实现来自：<a href="http://www.phpgangsta.de/">http://www.phpgangsta.de</a></p><hr><p>2018-11-21 更新<br><strong>最新版 0.0.2 已发布。请前往查看</strong><br><a href="https://cuojue.org/read/Typecho_Google_Authenticator_02.html">https://cuojue.org/read/Typecho_Google_Authenticator_02.html</a></p><hr><p>####实现接口<br><code>Widget_Login-&gt;loginFail</code><br><code>Widget_Login-&gt;loginSucceed</code><br>并没有用更高级的<br><code>Widget_User-&gt;login</code><br>其实按道理来说后者使用更好，但是函数内判断了如果被插件<del>插</del>(注册)了，就直接返回插件返回的结果……</p><p>####插件原理说明<br>插入了<code>(&#39;admin/header.php&#39;)-&gt;header</code>来重新处理整个后台页面，实现自定义登录页面，隐藏了用户名输入，固定为<code>_Authenticator</code>，修改密码输入为两步验证的代码输入。</p><p>用cookies来判断验证是否成功，显示系统的登录页面，因为未登录状态typecho并没有开启PHP SESSION支持，(为了系统性能)</p><p>调用<code>loginFail</code>接口，也就是登录失败的接口，实现了用系统登录接口验证两步验证的代码。</p><p>调用<code>loginSucceed</code>来清理保存验证的cookies</p><p>####已知问题<br>后台没法显示图片，或者是我不知道如何显示，反正就是没显示二维码，只给了一个二维码的网址，自己打开吧</p><p>如果手机丢了，没法找回的哟，但是SecretKey保存在数据库<code>typecho_options/plugin:GAuthenticator</code>里，可以手动查询再次绑定</p><p>####插件发布<br><a href="https://github.com/weicno/typecho-Authenticator">GitHub</a></p><p>####使用说明<br>下载插件，修改文件名为<code>GAuthenticator</code>放到<code>/usr/plugins</code>目录，然后到后台启用</p><p>插件默认关闭，首次开启需要扫描二维码绑定之后填写手机上显示的代码，验证成功之后才可以启用</p><p>有什么问题可以在本页面回复</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typecho</tag>
      
      <tag>Authenticator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改typecho保存评论用户信息为javascript模式</title>
    <link href="/read/typecho_comments_author_javascript.html"/>
    <url>/read/typecho_comments_author_javascript.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>修改这个是因为<a href="https://cuojue.org/read/typecho-cache-memcache.html">上一篇文章</a>有同学评论说会缓存评论人的信息<br>当然，我没注意到这个是因为我们的<a href="https://www.linpx.com/">Chakhsu</a>同学在<a href="https://blog.phpgao.com/tpcache_for_typecho.html">老高的技术博客</a>也提到这个问题<br>而我用的模板也是来自于Chakhsu的，所以他在模板里面已经修改过这个问题，直接不读取cookies来回填用户信息<br>我就小小的修改了一下，采用js来读取并回填，登录状态还无所谓，没登陆的用户确实造成了小小的不便（当然，对我这种常年只有我一个人访问的博客没什么影响……）</p></blockquote><h4 id="首先分析了一下typecho的函数"><a href="#首先分析了一下typecho的函数" class="headerlink" title="首先分析了一下typecho的函数"></a>首先分析了一下typecho的函数</h4><p>模板文件<code>comments.php</code>里获取的函数是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">$this</span>-&gt;remember(<span class="hljs-string">&#x27;author&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">$this</span>-&gt;remember(<span class="hljs-string">&#x27;mail&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">$this</span>-&gt;remember(<span class="hljs-string">&#x27;url&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>跟随函数到了<code>\var\Widget\Archive.php</code></p><p>函数原型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出cookie记忆别名</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@access</span> public</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $cookieName 已经记忆的cookie名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> boolean $return 是否返回</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">remember</span>(<span class="hljs-params"><span class="hljs-variable">$cookieName</span>, <span class="hljs-variable">$return</span> = <span class="hljs-literal">false</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$cookieName</span> = strtolower(<span class="hljs-variable">$cookieName</span>);<br>    <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$cookieName</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>))) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$value</span> = Typecho_Cookie::get(<span class="hljs-string">&#x27;__typecho_remember_&#x27;</span> . <span class="hljs-variable">$cookieName</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$return</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$value</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> htmlspecialchars(<span class="hljs-variable">$value</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续跟随<code>Typecho_Cookie::get</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setPrefix</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_prefix</span> = md5(<span class="hljs-variable">$url</span>);<br>        <span class="hljs-variable">$parsed</span> = parse_url(<span class="hljs-variable">$url</span>);<br><br>        <span class="hljs-comment">/** 在路径后面强制加上斜杠 */</span><br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_path</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$parsed</span>[<span class="hljs-string">&#x27;path&#x27;</span>]) ? <span class="hljs-string">&#x27;/&#x27;</span> : Typecho_Common::url(<span class="hljs-literal">NULL</span>, <span class="hljs-variable">$parsed</span>[<span class="hljs-string">&#x27;path&#x27;</span>]);<br>    &#125;<br>******中间省略******<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取指定的COOKIE值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@access</span> public</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $key 指定的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $default 默认的参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mixed</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$default</span> = <span class="hljs-literal">NULL</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$key</span> = <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_prefix</span> . <span class="hljs-variable">$key</span>;<br>        <span class="hljs-variable">$value</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-variable">$key</span>]) ? <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-variable">$key</span>] : (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$key</span>]) ? <span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$key</span>] : <span class="hljs-variable">$default</span>);<br>        <span class="hljs-keyword">return</span> is_array(<span class="hljs-variable">$value</span>) ? <span class="hljs-variable">$default</span> : <span class="hljs-variable">$value</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>发现原来前缀不是随机的，而是当前url的md5哈希</p><p>####然后当然直接读取填写啦</p><p>在<code>comments.php</code>里删除</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">$this</span>-&gt;remember(<span class="hljs-string">&#x27;author&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">$this</span>-&gt;remember(<span class="hljs-string">&#x27;mail&#x27;</span>); <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">$this</span>-&gt;remember(<span class="hljs-string">&#x27;url&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>三句</p><p>然后在合适的位置添加（当然是在<code>&lt;/script&gt;</code>里面啦）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;?php <span class="hljs-keyword">if</span>(!$this-&gt;user-&gt;hasLogin())&#123; ?&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCookie</span>(<span class="hljs-params">name</span>)</span>&#123;<br><span class="hljs-keyword">var</span> arr,reg=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(^| )&quot;</span>+name+<span class="hljs-string">&quot;=([^;]*)(;|$)&quot;</span>);<br><span class="hljs-keyword">if</span>(arr=<span class="hljs-built_in">document</span>.cookie.match(reg))<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">decodeURI</span>(arr[<span class="hljs-number">2</span>]));<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">adduser</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;author&#x27;</span>).value = getCookie(<span class="hljs-string">&#x27;&lt;?php echo md5($this-&gt;request-&gt;getUrlPrefix()); ?&gt;__typecho_remember_author&#x27;</span>);<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;mail&#x27;</span>).value = getCookie(<span class="hljs-string">&#x27;&lt;?php echo md5($this-&gt;request-&gt;getUrlPrefix()); ?&gt;__typecho_remember_mail&#x27;</span>);<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;url&#x27;</span>).value = getCookie(<span class="hljs-string">&#x27;&lt;?php echo md5($this-&gt;request-&gt;getUrlPrefix()); ?&gt;__typecho_remember_url&#x27;</span>);<br>&#125;<br>adduser();<br>&lt;?php &#125; ?&gt;<br></code></pre></td></tr></table></figure><p>搞定收工</p><p>没有用到jquery，因为模板不需要，我也喜欢轻量级~</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typecho</tag>
      
      <tag>php</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为typecho增加缓存功能,支持memcached缓存</title>
    <link href="/read/typecho-cache-memcache.html"/>
    <url>/read/typecho-cache-memcache.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>更新时间：2020 年 02 月 27 日<br>推荐一下我的Typecho的fastcgi_cache缓存插件</p></blockquote><p><a href="https://cuojue.org/read/typecho-fastcgi_cache.html">Typecho的fastcgi_cache缓存插件</a></p><p><strong>以下是本文原文</strong></p><hr><p>MostCache再次修改增进版<br>原作者：<a href="http://www.phoneshuo.com/PHP/typecho-mostcache-plugin.html">typecho缓存插件MostCache</a><br>修改支持memcache作者：<a href="http://www.lvtao.net/dev/mostcache_memcached.html">为typecho增加文件缓存及memcached缓存功能-MostCache修改增进版</a></p><p>由于作者表示存在会缓存用户状态的问题，所以<br>现在我再次修改一下:flushed:</p><p>###插件特性<br>基于MostCache的缓存插件<br>支持mysql缓存及Memcached缓存<br>支持首页、目录、内容页、独立页面缓存<br>支持内容修改之后自动更新内容、目录、首页缓存<br>支持评论生效更新缓存<br>支持缓存在线管理(仅在mysql模式支持详细列表)<br>支持自定义缓存规则<br>支持postviews阅读次数更新(在默认路由规则下生效，如archives/cid)</p><p>###新增特性<br>支持设置memcached服务器地址<br><strong>支持不缓存用户登录状态,登录状态下插件不缓存任何页面</strong></p><p>####插件发布页面</p><p><a href="https://github.com/weicno/typecho-cache">Github</a></p><p>####插件使用方法</p><p>下载插件：<a href="https://github.com/weicno/typecho-cache/archive/master.zip">https://github.com/weicno/typecho-cache/archive/master.zip</a></p><p>解压后，修改目录名为<code>MostCache</code>放到<code>typecho</code>的<code>plugins</code>进后台修改相关信息即可~</p><p>####更新</p><blockquote><p>2017-01-05<br>修复在开启缓存状态下,搜索自动跳到首页<br>修复mysql模式下,清空缓存无效</p></blockquote><blockquote><p>2016-04-13<br>修复文章被评论不刷新缓存<br>仅在最新开发版，并开启rewrite的情况下测试通过</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>typecho</tag>
      
      <tag>memcache</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更新cloudxns的ddns的shell脚本</title>
    <link href="/read/cloudxns_ddns_shell.html"/>
    <url>/read/cloudxns_ddns_shell.html</url>
    
    <content type="html"><![CDATA[<p>从dnspod换成cloudxns来解析，由于需要DDNS，之前一直用的 <a href="http://www.anrip.com/ddnspod">AnripDdns</a> ，换过来之后，找到了 <a href="https://www.xdty.org/1907">天语空间</a> 的脚本，问题是，如果同时存在相同的解析纪录，会返回多个RECORD ID导致纪录提交失败。<br>比如解析根域，同时存在MX和TXT等纪录，就会导致API接口返回302错误。<br>翻阅了一下官方的API文档，发现有个更合适的DDNS接口，可以直接获取客户端的访问IP来作为DDNS的解析IP，修改了一下，现在放出。</p><p>项目源码：<a href="https://github.com/weicno/cloudxns-ddns">Github</a></p><p>###使用方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/weicno/cloudxns-ddns/master/cloudxns.sh<br>wget https://raw.githubusercontent.com/weicno/cloudxns-ddns/master/cloudxns.conf<br>chmod +x cloudxns.sh<br></code></pre></td></tr></table></figure><p>修改<code>cloudxns.conf</code>里面的API信息<br>然后在<code>cloudxns.sh</code>底部添加要解析的域名信息</p><p>例：<br>解析根域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DdnsCheck <span class="hljs-string">&quot;cuojue.org&quot;</span><br></code></pre></td></tr></table></figure><p>解析子域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DdnsCheck <span class="hljs-string">&quot;cuojue.org&quot;</span> <span class="hljs-string">&quot;www&quot;</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/path/to/cloudxns.sh /path/to/cloudxns.conf<br>&#123;<span class="hljs-string">&quot;domain&quot;</span>:<span class="hljs-string">&quot;cuojue.org&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;code&quot;</span>:1,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>&#125;<br>Thu Apr  7 20:50:52 CST 2016 -- Update success<br></code></pre></td></tr></table></figure><p>输出<code>Update success</code>就代表更新成功</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dnspod</tag>
      
      <tag>cloudxns</tag>
      
      <tag>ddns</tag>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ngx_pagespeed模块给Nginx加速</title>
    <link href="/read/ngx_pagespeed_nginx.html"/>
    <url>/read/ngx_pagespeed_nginx.html</url>
    
    <content type="html"><![CDATA[<p>为了优化一下http/1.1的速度，尝试一下这个模块</p><p>首先你必须已经升级了gcc，可以看上一篇文章</p><p>下面来看看怎么用，nginx的模块都需要静态编译，我们只有重新编译源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos soft]# cd /tmp/soft<br>[root@centos soft]# NPS_VERSION=1.11.33.0<br>[root@centos soft]# wget https://github.com/pagespeed/ngx_pagespeed/archive/release-$&#123;NPS_VERSION&#125;-beta.zip -O release-$&#123;NPS_VERSION&#125;-beta.zip<br>[root@centos soft]# unzip release-$&#123;NPS_VERSION&#125;-beta.zip<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# cd ngx_pagespeed-release-$&#123;NPS_VERSION&#125;-beta/<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# wget https://dl.google.com/dl/page-speed/psol/$&#123;NPS_VERSION&#125;.tar.gz #这是谷歌的PageSpeed优化库<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# tar -xzvf $&#123;NPS_VERSION&#125;.tar.gz  # extracts to psol/<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# /usr/local/nginx/sbin/nginx -V<br>nginx version: weicn-server/1.0<br>built by gcc 4.8.2 20140120 (Red Hat 4.8.2-15) (GCC)<br>built with OpenSSL 1.0.2g  1 Mar 2016<br>TLS SNI support enabled<br>configure arguments: --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-openssl=/tmp/soft/openssl-1.0.2g --with-http_sub_module --with-http_stub_status_module --with-pcre --with-pcre=/tmp/soft/pcre-8.33 --with-zlib=/tmp/soft/zlib-1.2.8 --with-http_secure_link_module --with-ipv6 --with-http_gzip_static_module --with-http_realip_module --with-http_flv_module --with-ld-opt=-ljemalloc --add-module=/tmp/soft/nginx-ct-1.0.0<br>[root@centos ngx_pagespeed-release-1.11.33.0-beta]# cd /tmp/soft/nginx-1.9.13<br>[root@centos nginx-1.9.13]# ./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-openssl=/tmp/soft/openssl-1.0.2g --with-http_sub_module --with-http_stub_status_module --with-pcre --with-pcre=/tmp/soft/pcre-8.33 --with-zlib=/tmp/soft/zlib-1.2.8 --with-http_secure_link_module --with-ipv6 --with-http_gzip_static_module --with-http_realip_module --with-http_flv_module --with-ld-opt=-ljemalloc --add-module=/tmp/soft/nginx-ct-1.0.0 --add-module=/tmp/soct/ngx_pagespeed-release-$&#123;NPS_VERSION&#125;-beta<br>[root@centos nginx-1.9.13]# make<br>[root@centos nginx-1.9.13]# mv /usr/local/nginx/sbin/nginx&#123;,_`date +%F`&#125;<br>[root@centos nginx-1.9.13]# cp objs/nginx /usr/local/nginx/sbin<br></code></pre></td></tr></table></figure><p>然后配置conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123; <br>    <span class="hljs-comment"># 侦听的端口 </span><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>; <br>    <span class="hljs-comment"># 服务器名称 </span><br>    <span class="hljs-attribute">server_name</span> cuojue.org; <br>    <span class="hljs-comment"># 记下根目录 </span><br>    <span class="hljs-attribute">root</span> /usr/local/nginx/html; <br>    <span class="hljs-comment"># 访问日志 </span><br>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log main; <br>    <span class="hljs-comment"># 启用ngx_pagespeed </span><br>    <span class="hljs-attribute">pagespeed</span> <span class="hljs-literal">on</span>; <br>    <span class="hljs-comment"># 在此放置一个或多个pagespeed过滤器。</span><br>&#125; <br></code></pre></td></tr></table></figure><p>说到指定PageSpeed过滤器，有两种不同的级别可供你选择：CoreFilters和PassThrough。除非有所指定，否则默认情况下使用CoreFilters。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123; <br>    <span class="hljs-comment"># 侦听的端口 </span><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>; <br>    <span class="hljs-comment"># 服务器名称 </span><br>    <span class="hljs-attribute">server_name</span> cuojue.org; <br>    <span class="hljs-comment"># 记下根目录 </span><br>    <span class="hljs-attribute">root</span> /usr/local/nginx/html; <br>    <span class="hljs-comment"># 访问日志 </span><br>    <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log main; <br>    <span class="hljs-comment"># 启用ngx_pagespeed </span><br>    <span class="hljs-attribute">pagespeed</span> <span class="hljs-literal">on</span>; <br>    <span class="hljs-attribute">pagespeed</span> FileCachePath /var/ngx_pagespeed_cache; <br>    <span class="hljs-comment"># 禁用CoreFilters </span><br>    <span class="hljs-attribute">pagespeed</span> RewriteLevel PassThrough; <br>    <span class="hljs-comment"># 启用压缩空白过滤器 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters collapse_whitespace; <br>    <span class="hljs-comment"># 启用JavaScript库卸载 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters canonicalize_javascript_libraries; <br>    <span class="hljs-comment"># 把多个CSS文件合并成一个CSS文件 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters combine_css; <br>    <span class="hljs-comment"># 把多个JavaScript文件合并成一个JavaScript文件 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters combine_javascript; <br>    <span class="hljs-comment"># 删除带默认属性的标签 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters elide_attributes; <br>    <span class="hljs-comment"># 改善资源的可缓存性 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters extend_cache; <br>    <span class="hljs-comment"># 更换被导入文件的@import，精简CSS文件 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters flatten_css_imports; <br>    <span class="hljs-attribute">pagespeed</span> CssFlattenMaxBytes <span class="hljs-number">5120</span>; <br>    <span class="hljs-comment"># 延时加载客户端看不见的图片 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters lazyload_images; <br>    <span class="hljs-comment"># 启用JavaScript缩小机制 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_javascript; <br>    <span class="hljs-comment"># 启用图片优化机制 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_images; <br>    <span class="hljs-comment"># 预解析DNS查询 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters insert_dns_prefetch; <br>    <span class="hljs-comment"># 重写CSS，首先加载渲染页面的CSS规则 </span><br>    <span class="hljs-attribute">pagespeed</span> EnableFilters prioritize_critical_css; <br>&#125; <br></code></pre></td></tr></table></figure><p>创建将由Nginx写入的一个文件缓存目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos nginx-1.9.13]# mkdir /var/ngx_pagespeed_cache <br>[root@centos nginx-1.9.13]# chown www:www /var/ngx_pagespeed_cache <br></code></pre></td></tr></table></figure><p>好了，重启一下Nginx</p><p>贴一下我现在用的规则</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pagespeed</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">pagespeed</span> FileCachePath /var/ngx_pagespeed_cache;<br><span class="hljs-attribute">pagespeed</span> UseExperimentalJsMinifier <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">pagespeed</span> RewriteLevel PassThrough;<br><span class="hljs-comment">#pagespeed EnableFilters local_storage_cache;</span><br><span class="hljs-attribute">pagespeed</span> EnableFilters collapse_whitespace,remove_comments;<br><span class="hljs-attribute">pagespeed</span> EnableFilters outline_css;<br><span class="hljs-attribute">pagespeed</span> EnableFilters flatten_css_imports;<br><span class="hljs-attribute">pagespeed</span> EnableFilters move_css_above_scripts;<br><span class="hljs-attribute">pagespeed</span> EnableFilters move_css_to_head;<br><span class="hljs-attribute">pagespeed</span> EnableFilters outline_javascript;<br><span class="hljs-attribute">pagespeed</span> EnableFilters combine_javascript;<br><span class="hljs-attribute">pagespeed</span> EnableFilters inline_javascript;<br><span class="hljs-comment">#pagespeed EnableFilters defer_javascript;</span><br><span class="hljs-attribute">pagespeed</span> EnableFilters combine_css;<br><span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_javascript;<br><span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_css,sprite_images;<br><span class="hljs-attribute">pagespeed</span> EnableFilters rewrite_style_attributes;<br><span class="hljs-attribute">pagespeed</span> EnableFilters recompress_images;<br><span class="hljs-comment">#pagespeed EnableFilters lazyload_images;</span><br><span class="hljs-comment">#pagespeed EnableFilters rewrite_images;</span><br><span class="hljs-attribute">pagespeed</span> EnableFilters convert_meta_tags;<br><span class="hljs-attribute">pagespeed</span> EnableFilters canonicalize_javascript_libraries;<br><span class="hljs-attribute">pagespeed</span> EnableFilters elide_attributes;<br><span class="hljs-attribute">pagespeed</span> EnableFilters extend_cache;<br><span class="hljs-attribute">pagespeed</span> EnableFilters insert_dns_prefetch;<br><span class="hljs-comment">#pagespeed EnableFilters prioritize_critical_css;</span><br><span class="hljs-attribute">pagespeed</span> LoadFromFile <span class="hljs-string">&quot;https://cuojue.org&quot;</span> <span class="hljs-string">&quot;/home/cuojue.org/&quot;</span>;<br><span class="hljs-attribute">pagespeed</span> EnableFilters pedantic;<br><span class="hljs-attribute">pagespeed</span> MemcachedServers <span class="hljs-string">&quot;127.0.0.1:11211&quot;</span>;<br><span class="hljs-attribute">pagespeed</span> MaxSegmentLength <span class="hljs-number">250</span>;<br>location ~ &quot;\.pagespeed\.([a-z]\.)?[a-z]&#123;2&#125;\.[^.]&#123;10&#125;\.[^.]+&quot; &#123; add_header &quot;&quot; &quot;&quot;;&#125;<br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ &quot;^/pagespeed_static/&quot;</span> &#123;&#125;<br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ &quot;^/ngx_pagespeed_beacon$&quot;</span> &#123;&#125;<br><span class="hljs-attribute">location</span> /ngx_pagespeed_statistics &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-attribute">location</span> /ngx_pagespeed_global_statistics &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-attribute">location</span> /ngx_pagespeed_message &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-attribute">location</span> /pagespeed_console &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ ^/pagespeed_admin</span> &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ ^/pagespeed_global_admin</span> &#123; <span class="hljs-attribute">allow</span> <span class="hljs-number">127.0.0.1</span>; <span class="hljs-attribute">deny</span> all; &#125;<br>if ($request_uri ~ &quot;(pagespeed_([^.]+)/(.*)?)&quot;) &#123; break; &#125;<br>if ($request_uri ~ &quot;(ngx_pagespeed_([^.]+)/(.*)?)&quot;) &#123; break; &#125;<br></code></pre></td></tr></table></figure><p>参考列表：<br><a href="https://developers.google.com/speed/pagespeed/module/build_ngx_pagespeed_from_source#dependencies">Build ngx_pagespeed From Source</a><br><a href="http://os.51cto.com/art/201402/428780.htm">如何借助PageSpeed，为Nginx网站服务器提速？</a></p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ngixn</tag>
      
      <tag>ngx_pagespeed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给网站部署CHACHA20_POLY1305加密</title>
    <link href="/read/nginx-chacha20-poly1305.html"/>
    <url>/read/nginx-chacha20-poly1305.html</url>
    
    <content type="html"><![CDATA[<h3 id="首先下载需要的软件并解压"><a href="#首先下载需要的软件并解压" class="headerlink" title="首先下载需要的软件并解压"></a>首先下载需要的软件并解压</h3><pre><code>wget http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.3.3.tar.gztar xzf libressl-2.3.3.tar.gzwget http://nginx.org/download/nginx-1.9.13.tar.gztar xzf nginx-1.9.13.tar.gz</code></pre><p>由于Openssl的发行版并不支持CHACHA20加密算法，所以这里我们采用LibreSSL来编译</p><pre><code>[root@centos soft]# /usr/local/nginx/sbin/nginx -Vnginx version: nginx/1.9.13built by gcc 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC)built with OpenSSL 1.0.2g  1 Mar 2016TLS SNI support enabledconfigure arguments: --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-openssl=/tmp/soft/openssl-1.0.2g --with-http_sub_module --with-http_stub_status_module --with-pcre --with-pcre=/tmp/soft/pcre-8.33 --with-zlib=/tmp/soft/zlib-1.2.8 --with-http_secure_link_module --with-ipv6 --with-http_gzip_static_module --with-http_realip_module --with-http_flv_module --with-ld-opt=&#39;-ljemalloc&#39;</code></pre><p>想查看一下当前编译的nginx的参数</p><h3 id="然后开始重新编译nginx"><a href="#然后开始重新编译nginx" class="headerlink" title="然后开始重新编译nginx"></a>然后开始重新编译nginx</h3><pre><code>cd nginx-1.9.13make clean./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-http_sub_module --with-http_stub_status_module --with-pcre --with-pcre=/tmp/soft/pcre-8.33 --with-zlib=/tmp/soft/zlib-1.2.8 --with-http_secure_link_module --with-ipv6 --with-http_gzip_static_module --with-http_realip_module --with-http_flv_module --with-ld-opt=&#39;-ljemalloc&#39; --with-openssl=/tmp/soft/libressl-2.3.3 --with-ld-opt=&quot;-lrt&quot;makemv /usr/local/nginx/sbin/nginx&#123;,_`date +%F`&#125;cp objs/nginx /usr/local/nginx/sbin</code></pre><p>最后，修改<code>ssl_ciphers</code>部分</p><pre><code>ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4;</code></pre><p>重启一下nginx就可以了</p><hr><p>这样导致的问题是不支持nginx-ct,不能编译nginx-ct进去,<a href="http://v2ex.com/t/2528961">V2XE</a>上也有同学试验过</p><blockquote><p>nginx-ct:<br>The following versions of OpenSSL are supported:<br>OpenSSL 1.0.2 or above.<br>BoringSSL 4fac72e or above.</p></blockquote><blockquote><p>LibreSSL is not supported as it doesn’t provide either of the functions used to add the signed_certificate_timestamp extension to the response (SSL_CTX_add_server_custom_ext and SSL_CTX_set_signed_cert_timestamp_list).</p></blockquote><p><del>然而我patch后的openssl无法编译，所以暂时放弃chacha20</del></p><p>由于patch过后的openssl需要gcc4.7+和binutils2.22+编译，而我用的centos6自带的版本是gcc4.4和binutils2.20，所以更新一下，参考《<a href="http://www.51bbo.com/archives/2228">CENTOS 6 通过YUM升级GCC到4.7/4.8</a>》</p><pre><code>wget http://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repoyum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++mv /usr/bin/gcc /usr/bin/gcc-4.4.7mv /usr/bin/g++ /usr/bin/g++-4.4.7mv /usr/bin/c++ /usr/bin/c++-4.4.7ln -s /opt/rh/devtoolset-2/root/usr/bin/gcc /usr/bin/gccln -s /opt/rh/devtoolset-2/root/usr/bin/c++ /usr/bin/c++ln -s /opt/rh/devtoolset-2/root/usr/bin/g++ /usr/bin/g++gcc --version</code></pre><p>升级之后，重新编译nginx，然后就成了</p><p><img src="https://static.cuojue.org/blog/files/2016/04/3508010857.png"></p><p>等等，好像有点不对，怎么显示的“服务器未提供任何Certificate Transparency 信息”，我明明部署了nginx-ct的呀……<br>然后我果断的访问了一下google translate</p><p><img src="https://static.cuojue.org/blog/files/2016/04/88018558.png"></p><p>这是什么鬼？自家也不支持了？在win上都显示支持的，醉了醉了。</p><p>注：我使用的老版本Chrome(47.0.2526.107)因为最新版(49)已经不显示加密方式了。</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>ssl</tag>
      
      <tag>https</tag>
      
      <tag>LibreSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>启用 SSL 的 Certificate Transparency 策略</title>
    <link href="/read/ssl-certificate-transparency.html"/>
    <url>/read/ssl-certificate-transparency.html</url>
    
    <content type="html"><![CDATA[<h3 id="Certificate-Transparency-是什么？"><a href="#Certificate-Transparency-是什么？" class="headerlink" title="Certificate Transparency 是什么？"></a>Certificate Transparency 是什么？</h3><p>HTTPS 网站的身份认证是通过证书信任链完成的，浏览器从站点证书开始递归校验父证书，直至出现信任的根证书（根证书列表一般内置于操作系统，Firefox 则自己维护）。然而，受信任的 CA（证书颁发机构）有好几百个，他们成为整个网站身份认证过程中一个较大的攻击面。实际上，目前由于 CA 失误导致错误签发证书；以及个别 CA 出于某些目的（如监控加密流量）故意向第三方随意签发证书这两种情况时有发生。</p><p>无论是 CA 无意或有意签发出来的「非法证书」，都能通过目前的证书链校验机制的验证。这些 CA 签发的「非法证书」相比自签名的「无效证书」，更难被发现，即使被发现依靠现有机制也很难快速消除影响。</p><p>另外，域名所有者的管理不善也可能导致域名配置被第三方控制，从而第三方能够向 CA 申请你网站的证书（特别是 DV 类型的证书）。这种情况，发现和处理同样很麻烦。</p><p>而 <a href="https://www.certificate-transparency.org/">Certificate Transparency</a> 就是为了解决这些问题诞生的，它可以直译为证书透明度，由 Google 主导，并由 IETF 标准化为 <a href="http://tools.ietf.org/html/rfc6962">RFC 6962</a>。Certificate Transparency 的目标是提供一个开放的审计和监控系统，可以让任何域名所有者或者 CA 确定证书是否被错误签发或者被恶意使用，从而提高 HTTPS 网站的安全性。</p><p>Certificate Transparency 整套系统由三部分组成：1）Certificate Logs；2）Certificate Monitors；3）Certificate Auditors。完整的工作原理可以看官方文档：<a href="https://www.certificate-transparency.org/how-ct-works">How Certificate Transparency Works</a>。</p><p>简单说来，证书所有者或者 CA 都可以主动向 Certificate Logs 服务器提交证书，所有证书记录都会接受审计和监控。支持 CT 的浏览器（目前只有 Chrome）会根据 Certificate Logs 中证书状态，作出不同的反应。CT 不是要替换现有的 CA 设施，而是做为补充，使之更透明、更实时。</p><p>Certificate Logs 服务器由 Google 或 CA 部署，<a href="https://www.certificate-transparency.org/known-logs">这个页面</a>列举了目前已知的服务器。合法的证书提交到 CT Logs 服务器之后，服务器会返回 signed certificate timestamp（SCT），要启用 CT 就必须用到 SCT 信息。</p><p>以上抄录自[Certificate Transparency 那些事](<a href="https://imququ.com/post/certificate-transparency.html">https://imququ.com/post/certificate-transparency.html</a> “Certificate Transparency)，更详细的内容可以直接过去看，这里纪录一下怎么部署，我当然参考了<a href="https://www.linpx.com/p/https-certificate-to-enable-transparency-certificate-policy.html">Chakhsu Lau</a>用最简单的方法啦……</p><h3 id="提交我们的证书"><a href="#提交我们的证书" class="headerlink" title="提交我们的证书"></a>提交我们的证书</h3><p>直接 <a href="https://ct-status.org/submit">点击这里</a> 提交即可</p><p><img src="https://static.cuojue.org/blog/files/2016/04/4252223692.png"></p><p><img src="https://static.cuojue.org/blog/files/2016/04/2869200099.png"></p><p>提交完毕会生成一个zip文件，下载后，把里面的文件放到服务器的某个文件夹，比如<code>/your/path/to/scts</code></p><h3 id="编译-Nginx，加入-CT-模块"><a href="#编译-Nginx，加入-CT-模块" class="headerlink" title="编译 Nginx，加入 CT 模块"></a>编译 Nginx，加入 CT 模块</h3><p>要让 Nginx 支持发送 signed_certificate_timestamp 这个 TLS 扩展，需要加入 <a href="https://github.com/grahamedgecombe/nginx-ct">nginx-ct</a> 这个模块。nginx-ct 需要与 OpenSSL 1.0.2+ 或者 BoringSSL 4fac72e+ 一起编译，不支持 LibreSSL。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O nginx-ct.zip -c https://github.com/grahamedgecombe/nginx-ct/archive/v1.0.0.zip<br>unzip nginx-ct.zip<br></code></pre></td></tr></table></figure><p>然后在编译nginx的时候在configure指定一下路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">--add-module=../nginx-ct-1.0.0<br></code></pre></td></tr></table></figure><p>更新完成nginx之后，在配置文件加上</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssl_ct</span>   <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">ssl_ct_static_scts</span>   /your/path/to/scts;<br></code></pre></td></tr></table></figure><p>重启nginx试试看成功没有<br><img src="https://static.cuojue.org/blog/files/2016/04/1845328240.png"></p><p>已经显示了 服务器已提供有效的Certificate Transparency信息。</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>ssl</tag>
      
      <tag>https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 DNS 验证方式获取 lets-encrypt 证书的快速脚本</title>
    <link href="/read/lets-encrypt-dns.html"/>
    <url>/read/lets-encrypt-dns.html</url>
    
    <content type="html"><![CDATA[<p>折腾SSL的时候，在网上发现的优秀脚本，可以在没有搭建网站的时候，先用DNS验证一下来申请lets-encrypt证书，比如本站用的，还可以添加到计划任务来定时更新证书，比起Git python的配置真是so easy呀！</p><p>详细见<a href="https://github.com/weicno/scripts/tree/master/le-dns">GitHub</a>，作者好像还有各种验证的脚本，我只用到了DNS版</p><p>首先下载脚本和配置文件</p><p>我用的是DNSPOD，就下载DNSPOD版本的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/xdtianyu/scripts/raw/master/le-dns/le-dnspod.sh<br>wget https://github.com/xdtianyu/scripts/raw/master/le-dns/dnspod.conf<br>chmod +x le-dnspod.sh<br></code></pre></td></tr></table></figure><p>然后去DNSPOD申请一个D+的TOKEN key</p><p>填到<code>dnspod.conf</code>里面<br>修改其中的 TOKEN 为您的 dnspod api token ，注意格式为123456,556cxxxx。 修改 DOMAIN 为你的根域名，修改 CERT_DOMAINS 为您要签的域名列表，需要 ECC 证书时请取消 #ECC=TRUE 的注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">TOKEN=&quot;YOUR_TOKEN_ID,YOUR_API_TOKEN&quot;<br>RECORD_LINE=&quot;默认&quot;<br>DOMAIN=&quot;example.com&quot;<br>CERT_DOMAINS=&quot;example.com www.example.com im.example.com&quot;<br><span class="hljs-meta">#</span><span class="bash">ECC=TRUE</span><br></code></pre></td></tr></table></figure><p>填好后如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">TOKEN=&quot;这里写key的数字编号,这里写KEY&quot;<br>RECORD_LINE=&quot;默认&quot;<br>DOMAIN=&quot;cuojue.org&quot;<br>CERT_DOMAINS=&quot;cuojue.org&quot;<br>ECC=TRUE<br></code></pre></td></tr></table></figure><p>然后就可以运行试试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./le-dnspod.sh dnspod.conf<br></code></pre></td></tr></table></figure><p>没有问题的话，运行完毕，在当前目录会生成一个certs文件夹，里面有个你域名的文件夹，里面就是你需要的证书了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">fullchain.pem #完整的证书链证书，如果是nginx就用这个<br>privkey.pem #证书的私钥<br></code></pre></td></tr></table></figure><p>配置一下nginx就可以用上高大上的ssl了。</p><p>当然国内也有免费的SSL证书<a href="https://buy.wosign.com/Free/#ssl">Wosign</a>，为期两年的，比lets-encrypt的三个月长多了，但是不支持ECC证书，所以申请一个备用也是不错的</p>]]></content>
    
    
    <categories>
      
      <category>代码分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssl</tag>
      
      <tag>https</tag>
      
      <tag>dnspod</tag>
      
      <tag>lets-encrypt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gen8上的ESXi折腾纪录(硬盘篇)</title>
    <link href="/read/gen8-esxi-disk.html"/>
    <url>/read/gen8-esxi-disk.html</url>
    
    <content type="html"><![CDATA[<p>留下纪录，以备查验，走了不少弯路啊</p><p>首先说一下，Gen8的内置的软RAID支持单块硬盘初始化成RAID0使用的，也就是说，单块硬盘也可以开RAID模式，然后在ilo里面就可以看到硬盘信息了，并且内置的RAID支持识别HDD和SSD，初始化过后，在ESXi里面也可以正常识别为SSD。</p><p>一开始用ACHI模式在ESXi好像很卡？</p><p>然后切换到了RAID模式，直接切换后会识别不到硬盘，必须去RAID的控制器初始化一下，也就是POST的时候看见F5就按一下F5进去。<br>切换到RAID模式之后，在vSphere添加硬盘竟然出现了错误！！</p><blockquote><p>调用对象 “ha-datastoresystem”的“HostDatastoreSystem.QueryVmfsDatastoreCreateOptions” 失败</p></blockquote><p>这不是坑爹么……</p><p>多方查验，出现这个问题是因为磁盘上有不支持的分区格式，我去，写的明明是使用整块磁盘，您不能重新初始化一下分区表吗</p><p>网上的解决方法，来自<a href="http://aba.qzu.cn/archives/531.html">ESXi5.1调用对象”ha-datastoresystem”出错及处理</a>虽然我装的是ESXi6但是按照这个解决了，就是开SSH进去用fdisk删除了分区。</p><p>记录一下方法，避免原作者网站消失……</p><h3 id="1、查看磁盘情况"><a href="#1、查看磁盘情况" class="headerlink" title="1、查看磁盘情况"></a>1、查看磁盘情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Gen8-ESXi:~] fdisk -l<br><br>***<br>*** The fdisk <span class="hljs-built_in">command</span> is deprecated: fdisk does not handle GPT partitions.  Plea se use partedUtil<br>***<br><br>Found valid GPT with protective MBR; using GPT<br><br>Disk /dev/disks/mpx.vmhba32:C0:T0:L0: 121438208 sectors,  115M<br>Logical sector size: 512<br>Disk identifier (GUID): 4bf285cd-9feb-4a1f-babb-9c48602ae7b6<br>Partition table holds up to 128 entries<br>First usable sector is 34, last usable sector is 121438174<br><br>Number  Start (sector)End (sector)  Size   Code  Name<br>   1  6481918128   0700<br>   58224  520191499K   0700<br>   6  520224 1032191499K   0700<br>   7 1032224 1257471219K   0700<br>   8 1257504 1843199571K   0700<br>   9 1843200 7086079   5120K   0700<br>  10 7086080   121438160109M   0700<br>fdisk: device has more than 2^32 sectors, can<span class="hljs-string">&#x27;t use all of them</span><br><span class="hljs-string">Found valid GPT with protective MBR; using GPT</span><br><span class="hljs-string"></span><br><span class="hljs-string">Disk /dev/disks/naa.600508b1001c2fc9783875b1ae59d44a: 4294967295 sectors, 4095M</span><br><span class="hljs-string">Logical sector size: 512</span><br><span class="hljs-string">Disk identifier (GUID): bb8fe184-91c1-439d-9b86-5cc0ce61f7aa</span><br><span class="hljs-string">Partition table holds up to 128 entries</span><br><span class="hljs-string">First usable sector is 34, last usable sector is 5860467598</span><br><span class="hljs-string"></span><br><span class="hljs-string">Number  Start (sector)End (sector)  Size   Code  Name</span><br><span class="hljs-string">   12048  5860463804   5588M   0700</span><br><span class="hljs-string">Found valid GPT with protective MBR; using GPT</span><br><span class="hljs-string"></span><br><span class="hljs-string">Disk /dev/disks/naa.600508b1001cd4c1eeb69635def8f132: 117161280 sectors,  111M</span><br><span class="hljs-string">Logical sector size: 512</span><br><span class="hljs-string">Disk identifier (GUID): 26aca1e5-894f-43e2-b698-1b8a7fa46d27</span><br><span class="hljs-string">Partition table holds up to 128 entries</span><br><span class="hljs-string">First usable sector is 34, last usable sector is 117231374</span><br><span class="hljs-string"></span><br><span class="hljs-string">Number  Start (sector)End (sector)  Size   Code  Name</span><br><span class="hljs-string">   12048   117229567111M   0700  Basic data partition</span><br></code></pre></td></tr></table></figure><p>（这是后来加了一块SSD到SATA5之后出错的信息，套用一下，之前没保存）</p><h3 id="2、删除磁盘分区-注意一定要分清楚磁盘编号，别删错了"><a href="#2、删除磁盘分区-注意一定要分清楚磁盘编号，别删错了" class="headerlink" title="2、删除磁盘分区(注意一定要分清楚磁盘编号，别删错了)"></a>2、删除磁盘分区(注意一定要分清楚磁盘编号，别删错了)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Gen8-ESXi:~] fdisk /dev/disks/naa.600508b1001cd4c1eeb69635def8f132<br><br><br>***<br>*** The fdisk <span class="hljs-built_in">command</span> is deprecated: fdisk does not handle GPT partitions.  Please use partedUtil<br>***<br><br>Found valid GPT with protective MBR; using GPT<br><br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): d<br>Selected partition 1<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): 1<br>1: unknown <span class="hljs-built_in">command</span><br>Command Action<br>o   create a new empty DOS partition table<br>p   <span class="hljs-built_in">print</span> the partition table<br>q   quit without saving changes<br>s   create a new empty Sun disklabel<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): o<br>Building a new DOS disklabel. Changes will remain <span class="hljs-keyword">in</span> memory only,<br>until you decide to write them. After that the previous content<br>won<span class="hljs-string">&#x27;t be recoverable.</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">The number of cylinders for this disk is set to 7264.</span><br><span class="hljs-string">There is nothing wrong with that, but this is larger than 1024,</span><br><span class="hljs-string">and could in certain setups cause problems with:</span><br><span class="hljs-string">1) software that runs at boot time (e.g., old versions of LILO)</span><br><span class="hljs-string">2) booting and partitioning software from other OSs</span><br><span class="hljs-string">   (e.g., DOS FDISK, OS/2 FDISK)</span><br><span class="hljs-string"></span><br><span class="hljs-string">Command (m for help): w</span><br><span class="hljs-string">The partition table has been altered.</span><br><span class="hljs-string">Calling ioctl() to re-read partition table</span><br></code></pre></td></tr></table></figure><p>然后现在就可以正常的添加硬盘了~:smiley:</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gen8</tag>
      
      <tag>esxi</tag>
      
      <tag>ssd</tag>
      
      <tag>hdd</tag>
      
      <tag>raid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖(Synology)采用Docker运行迅雷快鸟加速</title>
    <link href="/read/Docker-Xunlei-Fastdick.html"/>
    <url>/read/Docker-Xunlei-Fastdick.html</url>
    
    <content type="html"><![CDATA[<p>首先感谢作者<a href="https://yooooo.us/2015/xunlei-fastdick-router?variant=zh-cn">fffonion</a>的移植，详情见<a href="https://github.com/fffonion/Xunlei-Fastdick">Github</a>源码</p><p>在R6300v2的<a href="https://advancedtomato.com/">AdvancedTomato</a>上运行过，在<a href="http://koolshare.cn/thread-34888-1-3.html">梅林改版固件</a>上也运行过……</p><p>下面进入正题，怎么用群辉(Synology)自带的Docker来运行迅雷快鸟</p><p>首先你得有一台群辉(Synology)NAS，还得是Intel架构的，版本还需要升级到5.2+，然后就可以直接在套件中心安装Docker了</p><p><img src="https://static.cuojue.org/blog/files/2016/03/4154038517.jpg"></p><p>安装完毕，打开Docker，进入注册表，搜索“fastdick”点击下载(下载速度……天朝大局域网你懂的……)</p><p><img src="https://static.cuojue.org/blog/files/2016/03/2036802192.jpg"></p><p>好不容易下载完了，有73M</p><p><img src="https://static.cuojue.org/blog/files/2016/03/1674918902.jpg"></p><p>然后选中，点击启动，会弹出创建容器，随便取个名字</p><p><img src="https://static.cuojue.org/blog/files/2016/03/1385220488.jpg"></p><p>第二页可以随便选择，这里我选择CPU优先为低</p><p><img src="https://static.cuojue.org/blog/files/2016/03/2465385813.jpg"></p><p>这里进入高级选项</p><p><img src="https://static.cuojue.org/blog/files/2016/03/4251334783.jpg"></p><p>添加一个卷映射，选择一个本地目录，装载路径填写<code>/flier/xunlei-fastdick</code>，去掉只读属性</p><p><img src="https://static.cuojue.org/blog/files/2016/03/272224823.jpg"></p><p>切换到环境选项，添加两个变量<code>XUNLEI_UID</code>和<code>XUNLEI_PASSWD</code>也就是你迅雷的ID和密码</p><p><img src="https://static.cuojue.org/blog/files/2016/03/2837438817.jpg"></p><p>然后大概就是这个样子，测试一下可以运行不</p><p><img src="https://static.cuojue.org/blog/files/2016/03/1969959877.png"></p><p><img src="https://static.cuojue.org/blog/files/2016/03/3036372881.png"></p><p>看起来可以运行了呢，由于我用的假ID，正确的提示了帐号不存在，当我用上真ID :no_mouth: 公司的网不支持提速</p><p><img src="https://static.cuojue.org/blog/files/2016/03/2291282395.png"><br>就是这样了，现在可以愉快的用快鸟加速了 :stuck_out_tongue_winking_eye:</p>]]></content>
    
    
    <categories>
      
      <category>个人笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Synology</tag>
      
      <tag>Docker</tag>
      
      <tag>迅雷快鸟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欢迎使用 Typecho</title>
    <link href="/read/start.html"/>
    <url>/read/start.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>如果您看到这篇文章,表示您的 blog 已经安装成功.</p></blockquote><p>又开始折腾博客了，最近败了Gen8，装了一个CentOS练手，手痒又开始部署Typecho了，还是好几年前用过，曾经的博客，域名都被别人重新注册了，好多感慨呀</p><p>没错，本博客就是建立在博主家里的Gen8服务器上，用的DNSPOD的DDNS来解析的。啦啦啦，节省了一笔“不菲”的租用费。</p><p>80端口已经封了，只有443是通的，也就是说只能用https来访问了，不知道443可以顶多久~</p><hr><p>已经放到腾讯云的学生机上了,用了又拍云的CDN</p><hr><p>2021-03-06更新</p><p>已经换成hexo了<br><a href="https://cuojue.org/read/typecho-to-hexo.html">把博客程序从 typecho 换成了 Hexo</a></p>]]></content>
    
    
    <categories>
      
      <category>默认分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
